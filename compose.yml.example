# GPU deployment configuration anchor
x-gpu-deploy: &gpu-deploy
  resources:
    reservations:
      devices:
        - driver: nvidia
          count: all
          capabilities: [gpu]

services:
  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    env_file: env/auth.env
    ports:
      - "9090:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/main", "--health-check"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  cloudflared:
    command: tunnel --no-autoupdate run
    depends_on:
      - watchtower
    env_file: env/cloudflared.env
    healthcheck:
      test: ["CMD-SHELL", "cloudflared tunnel info || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    image: cloudflare/cloudflared:latest
    restart: unless-stopped
    volumes:
      - ./conf/cloudflare/config:/home/nonroot/.cloudflared

  db:
    depends_on:
      - watchtower
    env_file: env/db.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      timeout: 5s
    image: pgvector/pgvector:pg15
    restart: unless-stopped
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  docling:
    env_file: env/docling.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5001/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    image: quay.io/docling-project/docling-serve:latest
    ports:
      - 5001:5001
    restart: unless-stopped

  edgetts:
    depends_on:
      - watchtower
    env_file: env/edgetts.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5050/voices || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 5s
    image: travisvn/openai-edge-tts:latest
    ports:
      - 5050:5050
    restart: unless-stopped

  mcposerver:
    command: ["--config", "/app/conf/config.json"]
    depends_on:
      - watchtower
    env_file: env/mcposerver.env
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep mcpo | grep -v grep || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    image: ghcr.io/open-webui/mcpo:latest
    restart: unless-stopped
    volumes:
      - ./conf/mcposerver:/app/conf:ro

  nginx:
    depends_on:
      - cloudflared
      - watchtower
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost/ || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 5s
    image: nginx:latest
    ports:
      - 80:80
    restart: unless-stopped
    volumes:
      - ./conf/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf

  ollama:
    depends_on:
      - watchtower
    deploy: *gpu-deploy
    env_file: env/ollama.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:11434/api/version || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 10s
    image: ollama/ollama:latest
    ports:
      - 11434:11434
    restart: unless-stopped
    volumes:
      - ./data/ollama:/root/.ollama

  openwebui:
    depends_on:
      - auth
      - docling
      - db
      - edgetts
      - mcposerver
      - nginx
      - ollama
      - searxng
      - tika
      - watchtower
    deploy: *gpu-deploy
    env_file: env/openwebui.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 10s
    image: ghcr.io/open-webui/open-webui:cuda
    restart: unless-stopped
    volumes:
      - ./data/openwebui:/app/backend/data

  redis:
    depends_on:
      - watchtower
    env_file: env/redis.env
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      timeout: 3s
    image: redis/redis-stack:latest
    restart: unless-stopped
    volumes:
      - ./data/redis:/data

  searxng:
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    cap_drop:
      - ALL
    env_file: env/searxng.env
    depends_on:
      - redis
      - watchtower
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 10s
    image: searxng/searxng:latest
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    restart: unless-stopped
    volumes:
      - ./conf/searxng/settings.yml:/etc/searxng/settings.yml:rw
      - ./conf/searxng/uwsgi.ini:/etc/searxng/uwsgi.ini:rw

  tika:
    env_file: env/tika.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:9998/tika || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 5s
    image: apache/tika:latest-full
    ports:
      - 9998:9998
    restart: unless-stopped

  watchtower:
    command: --cleanup --debug --interval 300
    env_file: env/watchtower.env
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep watchtower | grep -v grep || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 10s
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  backrest:
    depends_on:
      - db
      - redis
      - watchtower
    env_file: env/backrest.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:9898/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    image: garethgeorge/backrest:latest
    ports:
      - "9898:9898"
    restart: unless-stopped
    volumes:
      - ./data/backrest:/data
      - ./conf/backrest:/config
      - ./cache/backrest:/cache
      - ./tmp/backrest:/tmp
      - ./data:/backup-sources/data:ro
      - ./conf:/backup-sources/conf:ro
      - ./env:/backup-sources/env:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
