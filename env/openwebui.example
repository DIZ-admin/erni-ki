# OpenWebUI Configuration для ERNI-KI
# Основной веб-интерфейс для AI ассистента с RAG и GPU ускорением

# === Основные настройки ===
# Секретный ключ для подписи сессий
# ⚠️ КРИТИЧЕСКИ ВАЖНО: Замените перед production использованием!
# Генерировать через: openssl rand -hex 32
WEBUI_SECRET_KEY=CHANGE_THIS_SECRET_KEY_BEFORE_PRODUCTION
# Внешний URL для доступа (замените на ваш домен)
WEBUI_URL=https://your-domain.example.com
# Отключить анонимную телеметрию
ANONYMIZED_TELEMETRY=false
# Режим окружения
ENV=dev
# Уровень логирования
GLOBAL_LOG_LEVEL=info

# === База данных PostgreSQL ===
# Подключение к PostgreSQL с векторным расширением
# ⚠️ ВАЖНО: Пароль должен совпадать с POSTGRES_PASSWORD в db.env
DATABASE_URL="postgresql://postgres:CHANGE_THIS_PASSWORD_BEFORE_PRODUCTION@db:5432/openwebui"

# === Ollama интеграция (AI модели) ===
# Базовые URL для Ollama API
OLLAMA_BASE_URLS=http://ollama:11434
# Включить Ollama API
ENABLE_OLLAMA_API=true
# Использовать CUDA для GPU ускорения
USE_CUDA_DOCKER=true

# === OpenAI API совместимость ===
# Включить OpenAI API для совместимости
ENABLE_OPENAI_API=true
# API ключ OpenAI (опционально)
OPENAI_API_KEY=your-openai-api-key-here
# Базовый URL OpenAI API
OPENAI_API_BASE_URL=https://api.openai.com/v1
# === RAG (Retrieval-Augmented Generation) настройки ===
# Движок для эмбеддингов
RAG_EMBEDDING_ENGINE=ollama
# Модель для создания эмбеддингов
RAG_EMBEDDING_MODEL=nomic-embed-text:latest
# Ollama URL для RAG операций
RAG_OLLAMA_BASE_URL=http://ollama:11434
# API ключ для RAG (оставить пустым для локального использования)
RAG_OLLAMA_API_KEY=""
# Способ разделения текста
RAG_TEXT_SPLITTER=token
# Включить веб-поиск для RAG
ENABLE_RAG_WEB_SEARCH=true
# Движок веб-поиска
RAG_WEB_SEARCH_ENGINE=searxng
# Количество результатов поиска
RAG_WEB_SEARCH_RESULT_COUNT=6
# Количество одновременных запросов
RAG_WEB_SEARCH_CONCURRENT_REQUESTS=10
# Таймаут веб-поиска
RAG_WEB_SEARCH_TIMEOUT=10

# === Интеграции сервисов ===
# SearXNG для веб-поиска (через nginx proxy)
SEARXNG_QUERY_URL=http://nginx:8080/api/searxng/search?q=<query>
# Включить веб-поиск
ENABLE_WEB_SEARCH=true
WEB_SEARCH_ENGINE=searxng

# === Обработка документов ===
# Движок извлечения контента
CONTENT_EXTRACTION_ENGINE=docling
# URL сервера Docling (через nginx proxy)
DOCLING_SERVER_URL=http://nginx:8080/api/docling
# URL сервера Tika
TIKA_SERVER_URL=http://tika:9998
# Извлекать изображения из PDF
PDF_EXTRACT_IMAGES=true

# === TTS (Text-to-Speech) настройки ===
# Движок TTS
AUDIO_TTS_ENGINE=openai
# Модель TTS
AUDIO_TTS_MODEL=tts-1-hd
# URL EdgeTTS сервиса
AUDIO_TTS_OPENAI_API_BASE_URL=http://edgetts:5050/v1
# API ключ для TTS
AUDIO_TTS_API_KEY=your-tts-api-key-here
AUDIO_TTS_OPENAI_API_KEY=your-tts-api-key-here
# Голос для синтеза речи
AUDIO_TTS_VOICE=en-US-EmmaMultilingualNeural

# === Векторная база данных ===
# Использовать pgvector для векторного поиска
VECTOR_DB=pgvector
# URL подключения к pgvector
PGVECTOR_DB_URL=postgresql://postgres:your-password-here@db:5432/openwebui

# === Дополнительные функции ===
# Отключить генерацию изображений
ENABLE_IMAGE_GENERATION=false
# Отключить arena модели
ENABLE_EVALUATION_ARENA_MODELS=false
# Пользовательский User-Agent
USER_AGENT=ERNI-KI-OpenWebUI/1.0 (RAG-enabled AI assistant)

# === Tool Server подключения ===
# MCP сервер подключения (пустой массив по умолчанию)
TOOL_SERVER_CONNECTIONS=[]

# === Производительность ===
# Размер загружаемых файлов (100MB для RAG документов)
FILE_UPLOAD_MAX_SIZE=104857600
# Включить метрики
ENABLE_METRICS=true
# Интервал проверки здоровья
HEALTH_CHECK_INTERVAL=30
# Размер chunk для RAG
RAG_CHUNK_SIZE=1000
# Перекрытие chunk
RAG_CHUNK_OVERLAP=200

# === Connection pooling для PostgreSQL ===
DATABASE_POOL_SIZE=20
DATABASE_POOL_MAX_OVERFLOW=10
DATABASE_POOL_TIMEOUT=30
DATABASE_POOL_RECYCLE=3600
