# Security Pipeline –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ erni-ki
# CodeQL –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

name: üîí Security Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00 UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

# –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è security events
permissions:
  actions: read
  contents: read
  security-events: write

# –û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # CodeQL –∞–Ω–∞–ª–∏–∑
  codeql:
    name: üîç CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        language: ["go", "javascript"]
        include:
          - language: go
            path: "./auth"
          - language: javascript
            path: "."

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality
          source-root: ${{ matrix.path }}

      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Go
      - name: üêπ Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.4"

      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è JavaScript/TypeScript
      - name: üü¢ Setup Node.js
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: üì¶ Install JS dependencies
        if: matrix.language == 'javascript' && hashFiles('package.json') != ''
        run: npm ci --prefer-offline --no-audit

      # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞
      - name: üèóÔ∏è Autobuild
        uses: github/codeql-action/autobuild@v3

      # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ CodeQL
      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  dependency-scan:
    name: üì¶ Dependency Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Go –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      - name: üêπ Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.4"

      - name: üîç Run Go vulnerability check
        working-directory: ./auth
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
      - name: üü¢ Setup Node.js
        if: hashFiles('package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: üîç Run npm audit
        if: hashFiles('package.json') != ''
        run: |
          npm audit --audit-level=moderate
          npm audit --json > npm-audit-results.json || true

      - name: üì§ Upload npm audit results
        if: hashFiles('package.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit-results.json
          retention-days: 30

  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
  secret-scan:
    name: üîê Secret Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîê Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤
  container-scan:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name != 'pull_request'

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./auth
          file: ./auth/Dockerfile
          load: true
          tags: erni-ki-auth:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: üîç Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "erni-ki-auth:security-scan"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: üì§ Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: üîç Run Grype vulnerability scanner
        uses: anchore/scan-action@v4
        id: grype-scan
        with:
          image: "erni-ki-auth:security-scan"
          fail-build: false
          severity-cutoff: high

      - name: üì§ Upload Grype results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
  config-scan:
    name: ‚öôÔ∏è Configuration Security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif
          quiet: true
          soft_fail: true

      - name: üì§ Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      - name: üê≥ Validate Docker Compose
        run: |
          if [ -f "compose.yml.example" ]; then
            docker compose -f compose.yml.example config --quiet
            echo "‚úÖ Docker Compose configuration is valid"
          fi

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      - name: üåê Validate Nginx config
        run: |
          if [ -f "conf/nginx/nginx.example" ]; then
            docker run --rm -v $(pwd)/conf/nginx:/etc/nginx:ro nginx:alpine nginx -t
            echo "‚úÖ Nginx configuration is valid"
          fi

  # –û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  security-report:
    name: üìä Security Report
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan, container-scan, config-scan]
    if: always()

    steps:
      - name: üìä Generate security summary
        run: |
          echo "## üîí Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-scan.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets | ${{ needs.secret-scan.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Containers | ${{ needs.container-scan.result == 'success' && '‚úÖ' || needs.container-scan.result == 'skipped' && '‚è≠Ô∏è' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | ${{ needs.config-scan.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Review security alerts in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Follow security best practices for container images" >> $GITHUB_STEP_SUMMARY
          echo "- Regularly rotate secrets and API keys" >> $GITHUB_STEP_SUMMARY

      - name: üö® Check for critical failures
        if: needs.codeql.result == 'failure' || needs.dependency-scan.result == 'failure'
        run: |
          echo "‚ùå Critical security checks failed!"
          echo "Please review the security findings before proceeding."
          exit 1
