#!/bin/bash
# –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ERNI-KI
# –ê–≤—Ç–æ—Ä: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü (Tech Lead)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() { echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }
info() { echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"; }
section() { echo -e "${PURPLE}üîç $1${NC}"; }

# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API endpoints
quick_api_test() {
    section "–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    
    local endpoints=(
        "http://localhost:80:Nginx"
        "http://localhost:9090/health:Auth"
        "http://localhost:11434/api/version:Ollama"
        "http://localhost:5001/health:Docling"
        "http://localhost:9998/tika:Tika"
    )
    
    for endpoint_info in "${endpoints[@]}"; do
        local endpoint=$(echo "$endpoint_info" | cut -d: -f1-2)
        local name=$(echo "$endpoint_info" | cut -d: -f3)
        
        log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ $name..."
        
        local start_time=$(date +%s.%N)
        local response=$(timeout 5 curl -s -w "%{http_code}" "$endpoint" 2>/dev/null || echo "timeout")
        local end_time=$(date +%s.%N)
        
        if [[ "$response" == *"200"* ]]; then
            local response_time=$(echo "scale=0; ($end_time - $start_time) * 1000" | bc 2>/dev/null || echo "N/A")
            success "$name: ${response_time}ms"
        elif [[ "$response" == "timeout" ]]; then
            warning "$name: —Ç–∞–π–º–∞—É—Ç (>5s)"
        else
            warning "$name: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    done
    echo ""
}

# –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
quick_db_test() {
    section "–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL"
    
    if docker-compose exec -T db pg_isready -U postgres &> /dev/null; then
        success "PostgreSQL: –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        local start_time=$(date +%s.%N)
        docker-compose exec -T db psql -U postgres -d openwebui -c "SELECT count(*) FROM information_schema.tables;" &> /dev/null
        local end_time=$(date +%s.%N)
        local query_time=$(echo "scale=0; ($end_time - $start_time) * 1000" | bc 2>/dev/null || echo "N/A")
        
        success "–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î: ${query_time}ms"
        
        # –†–∞–∑–º–µ—Ä –ë–î
        local db_size=$(docker-compose exec -T db psql -U postgres -d openwebui -t -c "SELECT pg_size_pretty(pg_database_size('openwebui'));" 2>/dev/null | tr -d ' ' || echo "N/A")
        success "–†–∞–∑–º–µ—Ä –ë–î: $db_size"
    else
        error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    echo ""
}

# –¢–µ—Å—Ç Redis
quick_redis_test() {
    section "–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis"
    
    if docker-compose exec -T redis redis-cli ping 2>/dev/null | grep -q "PONG"; then
        success "Redis: –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        local start_time=$(date +%s.%N)
        docker-compose exec -T redis redis-cli set test_key test_value &> /dev/null
        docker-compose exec -T redis redis-cli get test_key &> /dev/null
        docker-compose exec -T redis redis-cli del test_key &> /dev/null
        local end_time=$(date +%s.%N)
        local redis_time=$(echo "scale=0; ($end_time - $start_time) * 1000" | bc 2>/dev/null || echo "N/A")
        
        success "–í—Ä–µ–º—è SET/GET/DEL: ${redis_time}ms"
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        local memory_usage=$(docker-compose exec -T redis redis-cli info memory 2>/dev/null | grep "used_memory_human" | cut -d: -f2 | tr -d '\r' || echo "N/A")
        success "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $memory_usage"
    else
        error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    echo ""
}

# –¢–µ—Å—Ç Ollama (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
quick_ollama_test() {
    section "–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama"
    
    if curl -sf http://localhost:11434/api/version &> /dev/null; then
        success "Ollama API: –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
        local models=$(docker-compose exec -T ollama ollama list 2>/dev/null | tail -n +2 | wc -l || echo "0")
        success "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: $models"
        
        if [ "$models" -gt 0 ]; then
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
            log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ (—Ç–∞–π–º–∞—É—Ç 30s)..."
            local start_time=$(date +%s.%N)
            
            local response=$(timeout 30 curl -s -X POST http://localhost:11434/api/generate \
                -H "Content-Type: application/json" \
                -d '{"model":"llama3.2:3b","prompt":"Hi","stream":false}' 2>/dev/null || echo "timeout")
            
            local end_time=$(date +%s.%N)
            
            if [[ "$response" != "timeout" ]] && [[ "$response" == *"response"* ]]; then
                local generation_time=$(echo "scale=1; $end_time - $start_time" | bc 2>/dev/null || echo "N/A")
                success "–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${generation_time}s"
            else
                warning "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: —Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞"
            fi
        else
            warning "–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        fi
    else
        error "Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    echo ""
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
quick_resource_check() {
    section "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
    
    # CPU
    local cpu_load=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    success "–ó–∞–≥—Ä—É–∑–∫–∞ CPU: $cpu_load"
    
    # –ü–∞–º—è—Ç—å
    local memory_info=$(free -h | grep "Mem:")
    local used_mem=$(echo "$memory_info" | awk '{print $3}')
    local total_mem=$(echo "$memory_info" | awk '{print $2}')
    local mem_percent=$(free | grep "Mem:" | awk '{printf "%.0f", $3/$2 * 100.0}')
    success "–ü–∞–º—è—Ç—å: $used_mem/$total_mem (${mem_percent}%)"
    
    # –î–∏—Å–∫
    local disk_info=$(df -h / | tail -1)
    local disk_used=$(echo "$disk_info" | awk '{print $5}')
    local disk_avail=$(echo "$disk_info" | awk '{print $4}')
    success "–î–∏—Å–∫: $disk_used –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, $disk_avail –¥–æ—Å—Ç—É–ø–Ω–æ"
    
    # Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    local running_containers=$(docker ps -q | wc -l)
    success "–ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $running_containers"
    
    # –¢–æ–ø 5 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU
    log "–¢–æ–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ CPU:"
    docker stats --no-stream --format "{{.Container}}: {{.CPUPerc}}" | head -5 | while read line; do
        echo "  $line"
    done
    
    echo ""
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
generate_quick_report() {
    section "–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    
    local score=0
    local max_score=6
    local issues=()
    local recommendations=()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    if curl -sf http://localhost &> /dev/null; then
        score=$((score + 1))
        success "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        issues+=("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    fi
    
    if curl -sf http://localhost:9090/health &> /dev/null; then
        score=$((score + 1))
        success "Auth API: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        issues+=("Auth API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    fi
    
    if curl -sf http://localhost:11434/api/version &> /dev/null; then
        score=$((score + 1))
        success "Ollama API: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        issues+=("Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    fi
    
    if docker-compose exec -T db pg_isready -U postgres &> /dev/null; then
        score=$((score + 1))
        success "PostgreSQL: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        issues+=("PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    fi
    
    if docker-compose exec -T redis redis-cli ping &> /dev/null; then
        score=$((score + 1))
        success "Redis: –†–∞–±–æ—Ç–∞–µ—Ç"
    else
        issues+=("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    local cpu_load=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    local cpu_load_num=$(echo "$cpu_load" | cut -d. -f1)
    
    if [ "$cpu_load_num" -lt 4 ]; then
        score=$((score + 1))
        success "–ù–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è"
    else
        warning "–ù–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: –í—ã—Å–æ–∫–∞—è ($cpu_load)"
        recommendations+=("–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É CPU")
    fi
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    local percentage=$((score * 100 / max_score))
    echo ""
    
    if [ "$percentage" -ge 90 ]; then
        success "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: ${percentage}% - –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    elif [ "$percentage" -ge 75 ]; then
        info "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: ${percentage}% - –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    elif [ "$percentage" -ge 50 ]; then
        warning "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: ${percentage}% - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    else
        error "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: ${percentage}% - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"
    fi
    
    # –ü—Ä–æ–±–ª–µ–º—ã
    if [ ${#issues[@]} -gt 0 ]; then
        echo ""
        error "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:"
        for issue in "${issues[@]}"; do
            echo "  ‚Ä¢ $issue"
        done
    fi
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if [ ${#recommendations[@]} -gt 0 ]; then
        echo ""
        warning "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
        for rec in "${recommendations[@]}"; do
            echo "  ‚Ä¢ $rec"
        done
    fi
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    echo ""
    info "–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:"
    echo "  ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
    echo "  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GPU –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è Ollama (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"
    echo "  ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–∏–º–∏—Ç–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  ‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –±—ç–∫–∞–ø—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                Quick Performance Test                        ‚ïë"
    echo "‚ïë            –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏           ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    quick_api_test
    quick_db_test
    quick_redis_test
    quick_ollama_test
    quick_resource_check
    generate_quick_report
    
    echo ""
    echo -e "${GREEN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë              –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ                 ‚ïë"
    echo "‚ïë        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ quick_performance.txt         ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main "$@" | tee quick_performance.txt
