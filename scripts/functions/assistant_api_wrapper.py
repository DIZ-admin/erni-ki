#!/usr/bin/env python3
"""
OpenAI Assistant API Wrapper –¥–ª—è ERNI-KI
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI Assistant —á–µ—Ä–µ–∑ LiteLLM
"""

import requests
import json
import time
import os
from typing import Dict, List, Optional

class AssistantAPIWrapper:
    def __init__(self, 
                 litellm_base_url: str = "http://localhost:4000",
                 api_key: str = "sk-7b788d5ee69638c94477f639c91f128911bdf0e024978d4ba1dbdf678eba38bb",
                 assistant_id: str = "asst_C8dUl6EKuR41O9sddVVuhTGn"):
        self.base_url = litellm_base_url
        self.api_key = api_key
        self.assistant_id = assistant_id
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
    
    def create_thread(self) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π thread –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å Assistant"""
        try:
            response = requests.post(f"{self.base_url}/v1/threads", 
                                   headers=self.headers, json={}, timeout=30)
            
            if response.status_code == 200:
                thread_data = response.json()
                return thread_data['id']
            else:
                print(f"Error creating thread: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"Exception creating thread: {e}")
            return None
    
    def add_message(self, thread_id: str, content: str, role: str = "user") -> Optional[str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ thread"""
        try:
            message_data = {
                "role": role,
                "content": content
            }
            
            response = requests.post(f"{self.base_url}/v1/threads/{thread_id}/messages",
                                   headers=self.headers, json=message_data, timeout=30)
            
            if response.status_code == 200:
                message = response.json()
                return message['id']
            else:
                print(f"Error adding message: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"Exception adding message: {e}")
            return None
    
    def create_run(self, thread_id: str, instructions: str = None) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç run –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Assistant"""
        try:
            run_data = {
                "assistant_id": self.assistant_id
            }
            
            if instructions:
                run_data["instructions"] = instructions
            
            response = requests.post(f"{self.base_url}/v1/threads/{thread_id}/runs",
                                   headers=self.headers, json=run_data, timeout=30)
            
            if response.status_code == 200:
                run = response.json()
                return run['id']
            else:
                print(f"Error creating run: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"Exception creating run: {e}")
            return None
    
    def wait_for_run_completion(self, thread_id: str, run_id: str, max_wait: int = 60) -> Optional[str]:
        """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å"""
        try:
            for attempt in range(max_wait):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫ OpenAI API —á–µ—Ä–µ–∑ requests
                openai_headers = {
                    "Authorization": f"Bearer {os.environ.get('OPENAI_API_KEY')}",
                    "Content-Type": "application/json",
                    "OpenAI-Beta": "assistants=v2"
                }
                
                response = requests.get(f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
                                      headers=openai_headers, timeout=30)
                
                if response.status_code == 200:
                    run_status = response.json()
                    status = run_status.get('status')
                    
                    if status == 'completed':
                        return 'completed'
                    elif status in ['failed', 'cancelled', 'expired']:
                        print(f"Run failed with status: {status}")
                        return status
                    else:
                        time.sleep(1)
                else:
                    print(f"Error getting run status: {response.status_code} - {response.text}")
                    time.sleep(1)
            
            return 'timeout'
                
        except Exception as e:
            print(f"Exception waiting for run: {e}")
            return None
    
    def get_messages(self, thread_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ thread"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫ OpenAI API
            openai_headers = {
                "Authorization": f"Bearer {os.environ.get('OPENAI_API_KEY')}",
                "Content-Type": "application/json",
                "OpenAI-Beta": "assistants=v2"
            }
            
            response = requests.get(f"https://api.openai.com/v1/threads/{thread_id}/messages",
                                  headers=openai_headers, timeout=30)
            
            if response.status_code == 200:
                messages = response.json()
                return messages.get('data', [])
            else:
                print(f"Error getting messages: {response.status_code} - {response.text}")
                return []
                
        except Exception as e:
            print(f"Exception getting messages: {e}")
            return []
    
    def chat_with_assistant(self, message: str, instructions: str = None) -> Optional[str]:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—â–µ–Ω–∏—è —Å Assistant"""
        print(f"üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Assistant: {message[:50]}...")
        
        # 1. –°–æ–∑–¥–∞–µ–º thread
        thread_id = self.create_thread()
        if not thread_id:
            return None
        print(f"‚úÖ Thread —Å–æ–∑–¥–∞–Ω: {thread_id}")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_id = self.add_message(thread_id, message)
        if not message_id:
            return None
        print(f"‚úÖ Message –¥–æ–±–∞–≤–ª–µ–Ω–æ: {message_id}")
        
        # 3. –°–æ–∑–¥–∞–µ–º run
        run_id = self.create_run(thread_id, instructions)
        if not run_id:
            return None
        print(f"‚úÖ Run —Å–æ–∑–¥–∞–Ω: {run_id}")
        
        # 4. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        status = self.wait_for_run_completion(thread_id, run_id)
        if status != 'completed':
            print(f"‚ùå Run –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ: {status}")
            return None
        print(f"‚úÖ Run –∑–∞–≤–µ—Ä—à–µ–Ω: {status}")
        
        # 5. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        messages = self.get_messages(thread_id)
        for msg in messages:
            if msg.get('role') == 'assistant':
                content = msg.get('content', [])
                if content and len(content) > 0:
                    text = content[0].get('text', {}).get('value', '')
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return text
        
        print("‚ùå –û—Ç–≤–µ—Ç Assistant –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Assistant API Wrapper"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI Assistant API Wrapper")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞
    if not os.environ.get('OPENAI_API_KEY'):
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º wrapper
    assistant = AssistantAPIWrapper()
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = "Hello! This is a test of the OpenAI Assistant integration through ERNI-KI system. Please confirm that you can receive and respond to this message."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = assistant.chat_with_assistant(
        message=test_message,
        instructions="Please respond briefly to confirm the integration is working."
    )
    
    if response:
        print("\n" + "=" * 60)
        print("‚úÖ –£–°–ü–ï–•! OpenAI Assistant API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìù –û—Ç–≤–µ—Ç Assistant:\n{response}")
        print("\nüìã –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
        print("   ‚Ä¢ LiteLLM –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å threads –∏ messages")
        print("   ‚Ä¢ OpenAI Assistant API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")
        print("   ‚Ä¢ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—â–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return 0
    else:
        print("\n" + "=" * 60)
        print("‚ùå –û–®–ò–ë–ö–ê! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return 1

if __name__ == "__main__":
    import sys
    sys.exit(main())
