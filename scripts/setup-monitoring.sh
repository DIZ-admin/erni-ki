#!/bin/bash

# üìä ERNI-KI Monitoring Setup Script
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –°–æ–∑–¥–∞–Ω–æ: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü, Tech Lead

set -euo pipefail

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
CRON_FILE="/tmp/erni-ki-monitoring-cron"

# === –¶–í–ï–¢–ê –î–õ–Ø –í–´–í–û–î–ê ===
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# === –§–£–ù–ö–¶–ò–ò ===
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# === –°–û–ó–î–ê–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ô ===
setup_directories() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    mkdir -p "$PROJECT_DIR/.config-backup/monitoring"
    mkdir -p "$PROJECT_DIR/.config-backup/logs"
    mkdir -p "$PROJECT_DIR/scripts"
    
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# === –ù–ê–°–¢–†–û–ô–ö–ê CRON –ó–ê–î–ê–ß ===
setup_cron() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ cron —Ñ–∞–π–ª–∞
    cat > "$CRON_FILE" << EOF
# ERNI-KI System Monitoring
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
0 * * * * cd $PROJECT_DIR && ./scripts/health-monitor.sh >> .config-backup/monitoring/cron.log 2>&1

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
0 2 * * * find $PROJECT_DIR/.config-backup/monitoring -name "health-report-*.md" -mtime +7 -delete

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 3:00)
0 3 * * 0 cd $PROJECT_DIR && ./scripts/health-monitor.sh > .config-backup/monitoring/weekly-report-\$(date +\%Y\%m\%d).md 2>&1
EOF
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cron –∑–∞–¥–∞—á
    if crontab -l > /dev/null 2>&1; then
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É crontab
        (crontab -l; cat "$CRON_FILE") | crontab -
    else
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ crontab
        crontab "$CRON_FILE"
    fi
    
    rm -f "$CRON_FILE"
    
    log_success "Cron –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:"
    log_info "  - –ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    log_info "  - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"
    log_info "  - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"
}

# === –ù–ê–°–¢–†–û–ô–ö–ê –£–†–û–í–ù–ï–ô –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
setup_logging_levels() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    cd "$PROJECT_DIR"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    local backup_dir=".config-backup/logging-backup-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$backup_dir"
    
    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    if [[ -f "env/openwebui.env" ]]; then
        cp "env/openwebui.env" "$backup_dir/"
    fi
    
    if [[ -f "env/ollama.env" ]]; then
        cp "env/ollama.env" "$backup_dir/"
    fi
    
    log_success "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ $backup_dir"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è OpenWebUI (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —à—É–º–∞)
    if grep -q "LOG_LEVEL" env/openwebui.env; then
        log_info "LOG_LEVEL —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ OpenWebUI"
    else
        echo "" >> env/openwebui.env
        echo "# === –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===" >> env/openwebui.env
        echo "# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (INFO –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞, DEBUG –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)" >> env/openwebui.env
        echo "LOG_LEVEL=INFO" >> env/openwebui.env
        log_success "–î–æ–±–∞–≤–ª–µ–Ω LOG_LEVEL=INFO –≤ OpenWebUI"
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Ollama
    if grep -q "OLLAMA_LOG_LEVEL" env/ollama.env; then
        log_info "OLLAMA_LOG_LEVEL —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        echo "" >> env/ollama.env
        echo "# === –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===" >> env/ollama.env
        echo "# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Ollama (INFO –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)" >> env/ollama.env
        echo "OLLAMA_LOG_LEVEL=INFO" >> env/ollama.env
        log_success "–î–æ–±–∞–≤–ª–µ–Ω OLLAMA_LOG_LEVEL=INFO –≤ Ollama"
    fi
}

# === –°–û–ó–î–ê–ù–ò–ï –ê–õ–ï–†–¢–û–í ===
setup_alerts() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
    cat > "$PROJECT_DIR/scripts/critical-alert.sh" << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤

ALERT_TYPE="$1"
MESSAGE="$2"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
echo "[$TIMESTAMP] CRITICAL ALERT: $ALERT_TYPE - $MESSAGE" >> .config-backup/monitoring/critical-alerts.log

# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
# - Email
# - Slack/Discord webhook
# - Telegram bot
# - SMS

echo "CRITICAL ALERT: $ALERT_TYPE"
echo "Message: $MESSAGE"
echo "Time: $TIMESTAMP"
EOF
    
    chmod +x "$PROJECT_DIR/scripts/critical-alert.sh"
    
    log_success "–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞"
}

# === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===
test_monitoring() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    cd "$PROJECT_DIR"
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    if ./scripts/health-monitor.sh; then
        log_success "–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
    else
        log_warning "–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    local latest_report
    latest_report=$(find .config-backup/monitoring -name "health-report-*.md" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2- || echo "")
    
    if [[ -n "$latest_report" && -f "$latest_report" ]]; then
        log_success "–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $latest_report"
        log_info "–†–∞–∑–º–µ—Ä –æ—Ç—á–µ—Ç–∞: $(wc -l < "$latest_report") —Å—Ç—Ä–æ–∫"
    else
        log_error "–û—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω"
        return 1
    fi
}

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
main() {
    log_info "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ERNI-KI"
    echo ""
    
    setup_directories
    setup_logging_levels
    setup_cron
    setup_alerts
    test_monitoring
    
    echo ""
    log_success "üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
    echo ""
    log_info "üìã –ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:"
    log_info "  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å"
    log_info "  ‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
    log_info "  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"
    log_info "  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤"
    log_info "  ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo ""
    log_info "üìÅ –§–∞–π–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    log_info "  - –û—Ç—á–µ—Ç—ã: .config-backup/monitoring/"
    log_info "  - –°–∫—Ä–∏–ø—Ç—ã: scripts/"
    log_info "  - –ê–ª–µ—Ä—Ç—ã: .config-backup/monitoring/critical-alerts.log"
    echo ""
    log_info "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    log_info "  - –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ./scripts/health-monitor.sh"
    log_info "  - –ü—Ä–æ—Å–º–æ—Ç—Ä cron: crontab -l | grep erni-ki"
    log_info "  - –õ–æ–≥–∏ cron: .config-backup/monitoring/cron.log"
    echo ""
    log_success "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É!"
}

# === –ó–ê–ü–£–°–ö ===
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
