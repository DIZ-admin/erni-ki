#!/bin/bash

# LiteLLM Memory Monitoring Script –¥–ª—è ERNI-KI
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
# –°–æ–∑–¥–∞–Ω: 2025-09-09 –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONTAINER_NAME="erni-ki-litellm"
MEMORY_THRESHOLD=90  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
LOG_FILE="/var/log/litellm-memory-monitor.log"
WEBHOOK_URL=""  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
send_alert() {
    local message="$1"
    local memory_usage="$2"

    log "ALERT: $message (Memory: $memory_usage%)"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if [[ -n "$WEBHOOK_URL" ]]; then
        curl -s -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{\"text\":\"üö® ERNI-KI LiteLLM Memory Alert: $message (Memory: $memory_usage%)\",\"channel\":\"#alerts\"}" \
            || log "Failed to send webhook notification"
    fi

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∂—É—Ä–Ω–∞–ª
    logger -t "litellm-monitor" "CRITICAL: $message (Memory: $memory_usage%)"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏
check_memory() {
    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    local stats
    if ! stats=$(docker stats --no-stream --format "{{.MemPerc}}" "$CONTAINER_NAME" 2>/dev/null); then
        log "ERROR: Cannot get stats for container $CONTAINER_NAME"
        return 1
    fi

    # –ò–∑–≤–ª–µ—á—å –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    local memory_percent
    memory_percent=$(echo "$stats" | sed 's/%//')

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
    if ! [[ "$memory_percent" =~ ^[0-9]+\.?[0-9]*$ ]]; then
        log "ERROR: Invalid memory percentage: $memory_percent"
        return 1
    fi

    # –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    local memory_usage
    memory_usage=$(docker stats --no-stream --format "{{.MemUsage}}" "$CONTAINER_NAME" 2>/dev/null)

    log "Memory usage: $memory_percent% ($memory_usage)"

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
    if (( $(echo "$memory_percent > $MEMORY_THRESHOLD" | bc -l) )); then
        send_alert "LiteLLM memory usage exceeded threshold ($MEMORY_THRESHOLD%)" "$memory_percent"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        log "Container details:"
        docker inspect "$CONTAINER_NAME" --format '{{.HostConfig.Memory}}' | tee -a "$LOG_FILE"

        # –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        log "Top processes in container:"
        docker exec "$CONTAINER_NAME" ps aux 2>/dev/null | head -10 | tee -a "$LOG_FILE" || true

        return 2  # –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
    fi

    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_health() {
    local health_status
    health_status=$(docker inspect "$CONTAINER_NAME" --format '{{.State.Health.Status}}' 2>/dev/null || echo "unknown")

    if [[ "$health_status" != "healthy" ]]; then
        log "WARNING: Container health status is '$health_status'"
        return 1
    fi

    return 0
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "Starting LiteLLM memory monitoring check"

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if ! docker ps --format '{{.Names}}' | grep -q "^$CONTAINER_NAME$"; then
        log "ERROR: Container $CONTAINER_NAME is not running"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–º—è—Ç—å
    local memory_check_result=0
    check_memory || memory_check_result=$?

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
    local health_check_result=0
    check_health || health_check_result=$?

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    if [[ $memory_check_result -eq 2 ]]; then
        log "CRITICAL: Memory threshold exceeded"
        exit 2
    elif [[ $memory_check_result -ne 0 || $health_check_result -ne 0 ]]; then
        log "WARNING: Some checks failed"
        exit 1
    else
        log "OK: All checks passed"
        exit 0
    fi
}

# –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p "$(dirname "$LOG_FILE")"

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
