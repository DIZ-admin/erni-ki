#!/bin/bash

# GitHub Environment Secrets Validation –¥–ª—è ERNI-KI
# –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
# –ê–≤—Ç–æ—Ä: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü (Tech Lead)
# –î–∞—Ç–∞: 2025-09-19

set -euo pipefail

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../.." && pwd)"
LOG_FILE="$PROJECT_ROOT/.config-backup/secrets-validation-$(date +%Y%m%d-%H%M%S).log"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# === –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}" | tee -a "$LOG_FILE"
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] SUCCESS: $1${NC}" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${PURPLE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}" | tee -a "$LOG_FILE"
}

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
TOTAL_SECRETS=0
VALID_SECRETS=0
INVALID_SECRETS=0
MISSING_SECRETS=0

# === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ===
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub CLI
    if ! command -v gh &> /dev/null; then
        error "GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: https://cli.github.com/"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if ! gh auth status &> /dev/null; then
        error "GitHub CLI –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: gh auth login"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ jq
    if ! command -v jq &> /dev/null; then
        warning "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
    fi

    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# === –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –û–ö–†–£–ñ–ï–ù–ò–ô ===
get_environments() {
    log "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–π..."

    local environments
    if environments=$(gh api "repos/:owner/:repo/environments" --jq '.[].name' 2>/dev/null); then
        echo "$environments"
    else
        warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏–π"
        echo "development staging production"
    fi
}

# === –ü–†–û–í–ï–†–ö–ê –°–ï–ö–†–ï–¢–ê –í –û–ö–†–£–ñ–ï–ù–ò–ò ===
validate_secret() {
    local environment="$1"
    local secret_name="$2"
    local is_critical="${3:-false}"

    TOTAL_SECRETS=$((TOTAL_SECRETS + 1))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞
    if gh secret list --env "$environment" --json name | jq -r '.[].name' | grep -q "^${secret_name}$"; then
        if [ "$is_critical" = "true" ]; then
            # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç placeholder
            local secret_info
            if secret_info=$(gh api "repos/:owner/:repo/environments/$environment/secrets/$secret_name" 2>/dev/null); then
                local updated_at=$(echo "$secret_info" | jq -r '.updated_at')
                success "‚úÖ $secret_name ($environment) - –æ–±–Ω–æ–≤–ª–µ–Ω: $updated_at"
                VALID_SECRETS=$((VALID_SECRETS + 1))
            else
                warning "‚ö†Ô∏è $secret_name ($environment) - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º"
                VALID_SECRETS=$((VALID_SECRETS + 1))
            fi
        else
            success "‚úÖ $secret_name ($environment) - –Ω–∞–π–¥–µ–Ω"
            VALID_SECRETS=$((VALID_SECRETS + 1))
        fi
    else
        error "‚ùå $secret_name ($environment) - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        MISSING_SECRETS=$((MISSING_SECRETS + 1))
    fi
}

# === –ü–†–û–í–ï–†–ö–ê –°–ï–ö–†–ï–¢–û–í –î–õ–Ø –û–ö–†–£–ñ–ï–ù–ò–Ø ===
validate_environment_secrets() {
    local environment="$1"

    info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: $environment"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
    local env_suffix=""
    case "$environment" in
        "development") env_suffix="_DEV" ;;
        "staging") env_suffix="_STAGING" ;;
        "production") env_suffix="_PROD" ;;
        *)
            warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: $environment"
            return 1
            ;;
    esac

    # –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    local required_secrets=(
        "TUNNEL_TOKEN${env_suffix}"
        "OPENAI_API_KEY${env_suffix}"
        "CONTEXT7_API_KEY${env_suffix}"
        "ANTHROPIC_API_KEY${env_suffix}"
        "GOOGLE_API_KEY${env_suffix}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ–∫—Ä–µ—Ç
    for secret in "${required_secrets[@]}"; do
        local is_critical="false"
        if [ "$environment" = "production" ]; then
            is_critical="true"
        fi
        validate_secret "$environment" "$secret" "$is_critical"
    done

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    local additional_secrets
    if additional_secrets=$(gh secret list --env "$environment" --json name | jq -r '.[].name' 2>/dev/null); then
        local additional_count=0
        while IFS= read -r secret_name; do
            if [[ ! " ${required_secrets[*]} " =~ " ${secret_name} " ]]; then
                info "‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: $secret_name ($environment)"
                additional_count=$((additional_count + 1))
            fi
        done <<< "$additional_secrets"

        if [ $additional_count -gt 0 ]; then
            info "–ù–∞–π–¥–µ–Ω–æ $additional_count –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ $environment"
        fi
    fi
}

# === –ü–†–û–í–ï–†–ö–ê REPOSITORY-LEVEL –°–ï–ö–†–ï–¢–û–í ===
validate_repository_secrets() {
    info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ repository-level —Å–µ–∫—Ä–µ—Ç–æ–≤..."

    # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö repository —Å–µ–∫—Ä–µ—Ç–æ–≤
    local repo_secrets=(
        "POSTGRES_PASSWORD"
        "JWT_SECRET"
        "WEBUI_SECRET_KEY"
        "LITELLM_MASTER_KEY"
        "LITELLM_SALT_KEY"
        "RESTIC_PASSWORD"
        "SEARXNG_SECRET"
        "REDIS_PASSWORD"
        "BACKREST_PASSWORD"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π repository —Å–µ–∫—Ä–µ—Ç
    for secret in "${repo_secrets[@]}"; do
        TOTAL_SECRETS=$((TOTAL_SECRETS + 1))

        if gh secret list --json name | jq -r '.[].name' | grep -q "^${secret}$"; then
            success "‚úÖ $secret (repository) - –Ω–∞–π–¥–µ–Ω"
            VALID_SECRETS=$((VALID_SECRETS + 1))
        else
            error "‚ùå $secret (repository) - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            MISSING_SECRETS=$((MISSING_SECRETS + 1))
        fi
    done
}

# === –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –°–ï–ö–†–ï–¢–û–í ===
security_check() {
    info "üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤..."

    local security_issues=0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ production —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ production —Å–µ–∫—Ä–µ—Ç–æ–≤ –Ω–∞ placeholder –∑–Ω–∞—á–µ–Ω–∏—è..."

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª–µ–π, —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏ —Ç.–¥.

    if [ $security_issues -eq 0 ]; then
        success "–ü—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    else
        warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $security_issues –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    fi
}

# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê ===
generate_report() {
    local report_file="$PROJECT_ROOT/.config-backup/secrets-validation-report-$(date +%Y%m%d-%H%M%S).md"

    cat > "$report_file" << EOF
# üîê –û—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ GitHub Secrets –¥–ª—è ERNI-KI

**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:** $(date +'%Y-%m-%d %H:%M:%S')
**–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–π:** $(get_environments | wc -l)
**–í—Å–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–æ–≤:** $TOTAL_SECRETS

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- ‚úÖ **–í–∞–ª–∏–¥–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:** $VALID_SECRETS
- ‚ùå **–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ–∫—Ä–µ—Ç—ã:** $MISSING_SECRETS
- ‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:** $INVALID_SECRETS

## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è–º

EOF

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é
    while IFS= read -r env; do
        echo "### $env" >> "$report_file"
        echo "" >> "$report_file"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if secrets_list=$(gh secret list --env "$env" --json name,updated_at 2>/dev/null); then
            echo "$secrets_list" | jq -r '.[] | "- ‚úÖ \(.name) (–æ–±–Ω–æ–≤–ª–µ–Ω: \(.updated_at))"' >> "$report_file"
        else
            echo "- ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤" >> "$report_file"
        fi

        echo "" >> "$report_file"
    done <<< "$(get_environments)"

    cat >> "$report_file" << EOF

## üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

$(if [ $MISSING_SECRETS -gt 0 ]; then
    echo "### ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    echo "- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç $MISSING_SECRETS —Å–µ–∫—Ä–µ—Ç–æ–≤"
    echo "- –í—ã–ø–æ–ª–Ω–∏—Ç–µ: \`./scripts/infrastructure/security/setup-environment-secrets.sh\`"
    echo ""
fi)

$(if [ $INVALID_SECRETS -gt 0 ]; then
    echo "### ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
    echo "- –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $INVALID_SECRETS –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤"
    echo "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π"
    echo ""
fi)

### üîÑ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–µ–∫—Ä–µ—Ç—ã
2. –ó–∞–º–µ–Ω–∏—Ç—å placeholder –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è production)
3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–æ—Ç–∞—Ü–∏—é —Å–µ–∫—Ä–µ—Ç–æ–≤
4. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∞—É–¥–∏—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–º validate-environment-secrets.sh*
EOF

    log "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

# === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
main() {
    log "–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ GitHub Secrets –¥–ª—è ERNI-KI..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p "$PROJECT_ROOT/.config-backup"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–π
    local environments
    environments=$(get_environments)

    log "–ù–∞–π–¥–µ–Ω—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è: $environments"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ repository-level —Å–µ–∫—Ä–µ—Ç–æ–≤
    validate_repository_secrets

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    while IFS= read -r env; do
        validate_environment_secrets "$env"
    done <<< "$environments"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_check

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    echo ""
    info "üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:"
    echo "  üî¢ –í—Å–µ–≥–æ —Å–µ–∫—Ä–µ—Ç–æ–≤: $TOTAL_SECRETS"
    echo "  ‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ: $VALID_SECRETS"
    echo "  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: $MISSING_SECRETS"
    echo "  ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ: $INVALID_SECRETS"

    if [ $MISSING_SECRETS -eq 0 ] && [ $INVALID_SECRETS -eq 0 ]; then
        success "üéâ –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        exit 0
    else
        warning "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ–∫—Ä–µ—Ç–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç."
        exit 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "--help"|"-h")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [--help|--dry-run]"
        echo "  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo "  --dry-run      –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        exit 0
        ;;
    "--dry-run")
        log "–†–µ–∂–∏–º dry-run: —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        ;;
esac

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
