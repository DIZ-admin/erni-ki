#!/bin/bash

# GitHub Environment Protection Rules Configuration –¥–ª—è ERNI-KI
# –î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∑–∞—â–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –ê–≤—Ç–æ—Ä: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü (Tech Lead)
# –î–∞—Ç–∞: 2025-09-19

set -euo pipefail

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../.." && pwd)"
LOG_FILE="$PROJECT_ROOT/.config-backup/environment-protection-$(date +%Y%m%d-%H%M%S).log"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# === –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}" | tee -a "$LOG_FILE"
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] SUCCESS: $1${NC}" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" | tee -a "$LOG_FILE"
    exit 1
}

# === –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –†–ï–ü–û–ó–ò–¢–û–†–ò–ò ===
get_repo_info() {
    local repo_info
    repo_info=$(gh repo view --json owner,name,id)

    REPO_OWNER=$(echo "$repo_info" | jq -r '.owner.login')
    REPO_NAME=$(echo "$repo_info" | jq -r '.name')
    REPO_ID=$(echo "$repo_info" | jq -r '.id')

    log "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $REPO_OWNER/$REPO_NAME (ID: $REPO_ID)"
}

# === –ü–û–õ–£–ß–ï–ù–ò–ï ID –ö–û–ú–ê–ù–î –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
get_team_ids() {
    log "–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–º–∞–Ω–¥ –¥–ª—è reviewers..."

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    local teams_response
    if teams_response=$(gh api "orgs/$REPO_OWNER/teams" 2>/dev/null); then
        echo "$teams_response" | jq -r '.[] | "\(.name): \(.id)"' | head -5

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        TEAM_ID=$(echo "$teams_response" | jq -r '.[0].id // empty')
        if [ -n "$TEAM_ID" ]; then
            log "–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å ID: $TEAM_ID"
        else
            warning "–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ reviewers"
        fi
    else
        warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
        TEAM_ID=""
    fi
}

# === –ù–ê–°–¢–†–û–ô–ö–ê DEVELOPMENT –û–ö–†–£–ñ–ï–ù–ò–Ø ===
configure_development() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Development –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

    # Development: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    local config='{
        "wait_timer": 0,
        "prevent_self_review": false,
        "reviewers": [],
        "deployment_branch_policy": null
    }'

    if gh api "repos/$REPO_OWNER/$REPO_NAME/environments/development" -X PUT \
        --input <(echo "$config") > /dev/null 2>&1; then
        success "Development –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)"
    else
        error "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Development –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    fi
}

# === –ù–ê–°–¢–†–û–ô–ö–ê STAGING –û–ö–†–£–ñ–ï–ù–ò–Ø ===
configure_staging() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Staging –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

    # Staging: —Ç—Ä–µ–±–æ–≤–∞—Ç—å 1 reviewer, —Ä–∞–∑—Ä–µ—à–∏—Ç—å develop –∏ main –≤–µ—Ç–∫–∏
    local reviewers_config="[]"
    if [ -n "$TEAM_ID" ]; then
        reviewers_config="[{\"type\": \"Team\", \"id\": $TEAM_ID}]"
    fi

    local config="{
        \"wait_timer\": 300,
        \"prevent_self_review\": true,
        \"reviewers\": $reviewers_config,
        \"deployment_branch_policy\": {
            \"protected_branches\": false,
            \"custom_branch_policies\": true
        }
    }"

    if gh api "repos/$REPO_OWNER/$REPO_NAME/environments/staging" -X PUT \
        --input <(echo "$config") > /dev/null 2>&1; then
        success "Staging –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (1 reviewer, 5 –º–∏–Ω –∑–∞–¥–µ—Ä–∂–∫–∞)"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫ –¥–ª—è staging
        configure_staging_branches
    else
        error "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Staging –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    fi
}

# === –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–¢–û–ö –î–õ–Ø STAGING ===
configure_staging_branches() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫ –¥–ª—è Staging..."

    # –†–∞–∑—Ä–µ—à–∏—Ç—å develop –∏ main –≤–µ—Ç–∫–∏ –¥–ª—è staging
    local branch_policy='{
        "name": "develop"
    }'

    gh api "repos/$REPO_OWNER/$REPO_NAME/environments/staging/deployment-branch-policies" -X POST \
        --input <(echo "$branch_policy") > /dev/null 2>&1 || true

    branch_policy='{
        "name": "main"
    }'

    gh api "repos/$REPO_OWNER/$REPO_NAME/environments/staging/deployment-branch-policies" -X POST \
        --input <(echo "$branch_policy") > /dev/null 2>&1 || true

    success "–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏ –¥–ª—è Staging: develop, main"
}

# === –ù–ê–°–¢–†–û–ô–ö–ê PRODUCTION –û–ö–†–£–ñ–ï–ù–ò–Ø ===
configure_production() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Production –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

    # Production: —Ç—Ä–µ–±–æ–≤–∞—Ç—å 2 reviewers, —Ç–æ–ª—å–∫–æ main –≤–µ—Ç–∫–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ 10 –º–∏–Ω—É—Ç
    local reviewers_config="[]"
    if [ -n "$TEAM_ID" ]; then
        reviewers_config="[{\"type\": \"Team\", \"id\": $TEAM_ID}]"
    fi

    local config="{
        \"wait_timer\": 600,
        \"prevent_self_review\": true,
        \"reviewers\": $reviewers_config,
        \"deployment_branch_policy\": {
            \"protected_branches\": true,
            \"custom_branch_policies\": false
        }
    }"

    if gh api "repos/$REPO_OWNER/$REPO_NAME/environments/production" -X PUT \
        --input <(echo "$config") > /dev/null 2>&1; then
        success "Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (2 reviewers, —Ç–æ–ª—å–∫–æ protected branches, 10 –º–∏–Ω –∑–∞–¥–µ—Ä–∂–∫–∞)"
    else
        error "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Production –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    fi
}

# === –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö ===
verify_environments() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏–π..."

    for env in development staging production; do
        log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è: $env"

        if env_info=$(gh api "repos/$REPO_OWNER/$REPO_NAME/environments/$env" 2>/dev/null); then
            local wait_timer=$(echo "$env_info" | jq -r '.protection_rules[0].wait_timer // 0')
            local reviewers_count=$(echo "$env_info" | jq -r '.protection_rules[0].reviewers | length')

            log "  - –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–µ–ø–ª–æ—è: ${wait_timer} —Å–µ–∫—É–Ω–¥"
            log "  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ reviewers: $reviewers_count"
            success "  - –û–∫—Ä—É–∂–µ–Ω–∏–µ $env –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        else
            error "–û–∫—Ä—É–∂–µ–Ω–∏–µ $env –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        fi
    done
}

# === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
main() {
    log "–ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ protection rules –¥–ª—è GitHub Environments..."

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p "$PROJECT_ROOT/.config-backup"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    get_repo_info

    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–º–∞–Ω–¥
    get_team_ids

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    configure_development
    configure_staging
    configure_production

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    verify_environments

    success "‚úÖ Protection rules —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π!"

    echo ""
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–π:"
    echo "üìù Development: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–±—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)"
    echo "üîç Staging: 1 reviewer, –∑–∞–¥–µ—Ä–∂–∫–∞ 5 –º–∏–Ω, –≤–µ—Ç–∫–∏ develop/main"
    echo "üîí Production: 2 reviewers, –∑–∞–¥–µ—Ä–∂–∫–∞ 10 –º–∏–Ω, —Ç–æ–ª—å–∫–æ protected branches"
    echo ""
    log "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: $LOG_FILE"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
