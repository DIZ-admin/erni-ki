#!/bin/bash

# =============================================================================
# ERNI-KI: –°–∫—Ä–∏–ø—Ç —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
# =============================================================================
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π –¥–ª—è PostgreSQL, Redis, Backrest
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/rotate-secrets.sh [--dry-run] [--service SERVICE]
# =============================================================================

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] SUCCESS: $1${NC}"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    local deps=("docker-compose" "openssl")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            error "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å '$dep' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∫—Ä–∏–ø—Ç–∞."
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
check_project_root() {
    if [ ! -f "compose.yml" ] || [ ! -d "env" ] || [ ! -d "secrets" ]; then
        error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ ERNI-KI"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ backup —Å—Ç–∞—Ä—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
backup_secrets() {
    local backup_dir=".config-backup/secrets-rotation-$(date +%Y%m%d-%H%M%S)"
    log "–°–æ–∑–¥–∞–Ω–∏–µ backup —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ $backup_dir"
    
    mkdir -p "$backup_dir"
    cp -r secrets/ "$backup_dir/"
    cp -r env/ "$backup_dir/"
    
    success "Backup —Å–æ–∑–¥–∞–Ω –≤ $backup_dir"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–æ–ª–µ–π
generate_passwords() {
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π..."
    
    NEW_POSTGRES_PASSWORD=$(openssl rand -base64 32)
    NEW_REDIS_PASSWORD=$(openssl rand -base64 32)
    NEW_BACKREST_PASSWORD=$(openssl rand -base64 32)
    
    success "–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PostgreSQL –ø–∞—Ä–æ–ª—è
rotate_postgres_password() {
    if [ "$DRY_RUN" = true ]; then
        log "[DRY RUN] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PostgreSQL –ø–∞—Ä–æ–ª—è"
        return
    fi
    
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PostgreSQL –ø–∞—Ä–æ–ª—è..."
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ env —Ñ–∞–π–ª–∞
    sed -i "s/POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=${NEW_POSTGRES_PASSWORD}/" env/db.env
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ secrets —Ñ–∞–π–ª–∞
    echo "$NEW_POSTGRES_PASSWORD" > secrets/postgres_password.txt
    chmod 600 secrets/postgres_password.txt
    
    success "PostgreSQL –ø–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Redis –ø–∞—Ä–æ–ª—è
rotate_redis_password() {
    if [ "$DRY_RUN" = true ]; then
        log "[DRY RUN] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Redis –ø–∞—Ä–æ–ª—è"
        return
    fi
    
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Redis –ø–∞—Ä–æ–ª—è..."
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ env —Ñ–∞–π–ª–∞
    sed -i "s/REDIS_ARGS=\"--requirepass [^\"]*\"/REDIS_ARGS=\"--requirepass ${NEW_REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru\"/" env/redis.env
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ secrets —Ñ–∞–π–ª–∞
    echo "$NEW_REDIS_PASSWORD" > secrets/redis_password.txt
    chmod 600 secrets/redis_password.txt
    
    success "Redis –ø–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Backrest –ø–∞—Ä–æ–ª—è
rotate_backrest_password() {
    if [ "$DRY_RUN" = true ]; then
        log "[DRY RUN] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Backrest –ø–∞—Ä–æ–ª—è"
        return
    fi
    
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Backrest –ø–∞—Ä–æ–ª—è..."
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ env —Ñ–∞–π–ª–∞
    sed -i "s/BACKREST_PASSWORD=.*/BACKREST_PASSWORD=${NEW_BACKREST_PASSWORD}/" env/backrest.env
    sed -i "s/RESTIC_PASSWORD=.*/RESTIC_PASSWORD=${NEW_BACKREST_PASSWORD}/" env/backrest.env
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ secrets —Ñ–∞–π–ª–∞
    echo "$NEW_BACKREST_PASSWORD" > secrets/backrest_password.txt
    chmod 600 secrets/backrest_password.txt
    
    success "Backrest –ø–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
restart_services() {
    if [ "$DRY_RUN" = true ]; then
        log "[DRY RUN] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: $1"
        return
    fi
    
    local services="$1"
    log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: $services"
    
    # Graceful restart —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–¥–æ—Ä–æ–≤—å—è
    for service in $services; do
        log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ $service..."
        docker-compose restart "$service"
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
        local max_attempts=30
        local attempt=1
        
        while [ $attempt -le $max_attempts ]; do
            if docker-compose ps "$service" | grep -q "healthy\|Up"; then
                success "$service —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
                break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
                error "$service –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
            fi
            
            log "–û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è $service (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts)..."
            sleep 10
            ((attempt++))
        done
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Ä–æ—Ç–∞—Ü–∏–∏
verify_rotation() {
    if [ "$DRY_RUN" = true ]; then
        log "[DRY RUN] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
        return
    fi
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Ä–æ—Ç–∞—Ü–∏–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if docker-compose exec -T db pg_isready -U postgres; then
        success "PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Ä–æ—Ç–∞—Ü–∏–∏"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if docker-compose exec -T redis redis-cli ping | grep -q "PONG"; then
        success "Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Ä–æ—Ç–∞—Ü–∏–∏"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Backrest
    if curl -s http://localhost:9898/health >/dev/null; then
        success "Backrest —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        warning "Backrest –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é)"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local service_filter=""
    DRY_RUN=false
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --service)
                service_filter="$2"
                shift 2
                ;;
            --help|-h)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [--dry-run] [--service SERVICE]"
                echo "  --dry-run    –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                echo "  --service    –†–æ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å (postgres|redis|backrest)"
                exit 0
                ;;
            *)
                error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
                ;;
        esac
    done
    
    log "üîÑ –ó–∞–ø—É—Å–∫ —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ ERNI-KI..."
    
    if [ "$DRY_RUN" = true ]; then
        warning "–†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    fi
    
    check_dependencies
    check_project_root
    
    if [ "$DRY_RUN" = false ]; then
        backup_secrets
    fi
    
    generate_passwords
    
    # –†–æ—Ç–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
    case "$service_filter" in
        "postgres")
            rotate_postgres_password
            restart_services "db"
            ;;
        "redis")
            rotate_redis_password
            restart_services "redis"
            ;;
        "backrest")
            rotate_backrest_password
            restart_services "backrest"
            ;;
        "")
            # –†–æ—Ç–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            rotate_postgres_password
            rotate_redis_password
            rotate_backrest_password
            restart_services "db redis backrest"
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: $service_filter"
            ;;
    esac
    
    verify_rotation
    
    success "‚úÖ –†–æ—Ç–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    
    if [ "$DRY_RUN" = false ]; then
        warning "–í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"
        echo "PostgreSQL: $NEW_POSTGRES_PASSWORD"
        echo "Redis: $NEW_REDIS_PASSWORD"
        echo "Backrest: $NEW_BACKREST_PASSWORD"
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
