#!/bin/bash

# –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ERNI-KI
# –ê–≤—Ç–æ—Ä: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü (ERNI-KI Tech Lead)

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

header() {
    echo -e "${PURPLE}[HEADER]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
check_monitoring_services() {
    header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."

    local services=(
        "prometheus:9091:Prometheus"
        "grafana:3000:Grafana"
        "alertmanager:9093:Alertmanager"
        "node-exporter:9101:Node Exporter"
        "postgres-exporter:9187:PostgreSQL Exporter"
        "redis-exporter:9121:Redis Exporter"
        "nvidia-exporter:9445:NVIDIA GPU Exporter"
        "webhook-receiver:9095:Webhook Receiver"
        "cadvisor:8081:cAdvisor"
        "blackbox-exporter:9115:Blackbox Exporter"
    )

    local healthy_count=0
    local total_count=${#services[@]}

    echo ""
    printf "%-20s %-10s %-15s %-30s\n" "SERVICE" "PORT" "STATUS" "DESCRIPTION"
    echo "------------------------------------------------------------------------"

    for service_info in "${services[@]}"; do
        IFS=':' read -r service port description <<< "$service_info"

        if curl -s -f "http://localhost:$port" >/dev/null 2>&1 || \
           curl -s -f "http://localhost:$port/health" >/dev/null 2>&1 || \
           curl -s -f "http://localhost:$port/metrics" >/dev/null 2>&1; then
            printf "%-20s %-10s %-15s %-30s\n" "$service" "$port" "‚úÖ HEALTHY" "$description"
            ((healthy_count++))
        else
            printf "%-20s %-10s %-15s %-30s\n" "$service" "$port" "‚ùå DOWN" "$description"
        fi
    done

    echo "------------------------------------------------------------------------"
    echo "–†–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $healthy_count/$total_count"

    if [ $healthy_count -eq $total_count ]; then
        success "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç!"
        return 0
    else
        warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
check_metrics() {
    header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫..."

    echo ""
    echo "=== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò ==="

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Prometheus
    if ! curl -s http://localhost:9091/api/v1/status/config >/dev/null; then
        error "Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi

    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    log "–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (Node Exporter)..."
    local node_metrics=$(curl -s "http://localhost:9091/api/v1/query?query=up{job=\"node-exporter\"}" | jq -r '.data.result | length')
    if [ "$node_metrics" -gt 0 ]; then
        success "Node Exporter –º–µ—Ç—Ä–∏–∫–∏: $node_metrics targets"
    else
        error "Node Exporter –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi

    # GPU –º–µ—Ç—Ä–∏–∫–∏
    log "GPU –º–µ—Ç—Ä–∏–∫–∏ (NVIDIA Exporter)..."
    local gpu_metrics=$(curl -s http://localhost:9445/metrics | grep -c "nvidia_gpu" || echo "0")
    if [ "$gpu_metrics" -gt 0 ]; then
        success "GPU –º–µ—Ç—Ä–∏–∫–∏: $gpu_metrics –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É GPU
        local gpu_usage=$(curl -s http://localhost:9445/metrics | grep "nvidia_gpu_duty_cycle" | awk '{print $2}' | head -1)
        if [ -n "$gpu_usage" ]; then
            echo "  ‚îî‚îÄ –¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ GPU: ${gpu_usage}%"
        fi
    else
        warning "GPU –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    log "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (cAdvisor)..."
    local container_metrics=$(curl -s "http://localhost:9091/api/v1/query?query=container_last_seen" | jq -r '.data.result | length')
    if [ "$container_metrics" -gt 0 ]; then
        success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: $container_metrics –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    else
        warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫–∏
    log "PostgreSQL –º–µ—Ç—Ä–∏–∫–∏..."
    local db_metrics=$(curl -s "http://localhost:9091/api/v1/query?query=pg_up" | jq -r '.data.result | length')
    if [ "$db_metrics" -gt 0 ]; then
        success "PostgreSQL –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
    else
        warning "PostgreSQL –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤ Grafana
check_grafana_dashboards() {
    header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤ Grafana..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Grafana API
    if ! curl -s http://localhost:3000/api/health >/dev/null; then
        error "Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        return 1
    fi

    success "Grafana –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:3000"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö..."
    echo "  ‚îú‚îÄ Prometheus: http://localhost:9091"
    echo "  ‚îú‚îÄ Alertmanager: http://localhost:9093"
    echo "  ‚îî‚îÄ Elasticsearch: http://localhost:9200"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—à–±–æ—Ä–¥–∞—Ö
    log "–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã:"
    echo "  ‚îú‚îÄ ERNI-KI System Overview"
    echo "  ‚îú‚îÄ Infrastructure Monitoring"
    echo "  ‚îú‚îÄ AI Services Monitoring"
    echo "  ‚îî‚îÄ Critical Alerts Dashboard"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
check_alerts() {
    header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Alertmanager
    if ! curl -s http://localhost:9093/api/v1/status >/dev/null; then
        error "Alertmanager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi

    success "Alertmanager —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:9093"

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤..."
    local active_alerts=$(curl -s http://localhost:9093/api/v1/alerts | jq -r '.data[] | select(.state == "active") | .labels.alertname' | wc -l)

    if [ "$active_alerts" -eq 0 ]; then
        success "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç"
    else
        warning "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: $active_alerts"
        curl -s http://localhost:9093/api/v1/alerts | jq -r '.data[] | select(.state == "active") | "  ‚îú‚îÄ \(.labels.alertname): \(.labels.severity)"'
    fi

    # Webhook receiver
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook receiver..."
    if curl -s http://localhost:9095/health >/dev/null; then
        success "Webhook receiver —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:9095"
    else
        error "Webhook receiver –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
check_performance() {
    header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã..."

    echo ""
    echo "=== –¢–ï–ö–£–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò ==="

    # CPU
    local cpu_usage=$(curl -s "http://localhost:9091/api/v1/query?query=100-(avg(irate(node_cpu_seconds_total{mode=\"idle\"}[5m]))*100)" | jq -r '.data.result[0].value[1]' 2>/dev/null || echo "N/A")
    echo "CPU Usage: ${cpu_usage}%"

    # Memory
    local mem_usage=$(curl -s "http://localhost:9091/api/v1/query?query=(1-(node_memory_MemAvailable_bytes/node_memory_MemTotal_bytes))*100" | jq -r '.data.result[0].value[1]' 2>/dev/null || echo "N/A")
    echo "Memory Usage: ${mem_usage}%"

    # Disk
    local disk_usage=$(df -h / | tail -1 | awk '{print $5}')
    echo "Disk Usage: $disk_usage"

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    local containers=$(docker ps | wc -l)
    echo "Running Containers: $((containers-1))"

    # GPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    local gpu_temp=$(curl -s http://localhost:9445/metrics | grep "nvidia_gpu_temperature_celsius" | awk '{print $2}' | head -1 2>/dev/null || echo "N/A")
    if [ "$gpu_temp" != "N/A" ]; then
        echo "GPU Temperature: ${gpu_temp}¬∞C"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "=================================================="
    echo "üîç –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ERNI-KI"
    echo "=================================================="
    echo "–î–∞—Ç–∞: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "–•–æ—Å—Ç: $(hostname)"
    echo ""

    local all_good=true

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    if ! check_monitoring_services; then
        all_good=false
    fi
    echo ""

    check_metrics
    echo ""

    check_grafana_dashboards
    echo ""

    check_alerts
    echo ""

    check_performance
    echo ""

    echo "=================================================="
    if [ "$all_good" = true ]; then
        success "üéâ –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê!"
        echo ""
        echo "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:"
        echo "‚Ä¢ Grafana: http://localhost:3000"
        echo "‚Ä¢ Prometheus: http://localhost:9091"
        echo "‚Ä¢ Alertmanager: http://localhost:9093"
        echo "‚Ä¢ Kibana: http://localhost:5601"
        echo ""
        echo "üîß Exporters:"
        echo "‚Ä¢ Node Exporter: http://localhost:9101/metrics"
        echo "‚Ä¢ GPU Exporter: http://localhost:9445/metrics"
        echo "‚Ä¢ cAdvisor: http://localhost:8081"
    else
        warning "‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
        echo ""
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
        echo "docker-compose -f monitoring/docker-compose.monitoring.yml logs [service-name]"
    fi
    echo "=================================================="
}

# –ó–∞–ø—É—Å–∫
main "$@"
