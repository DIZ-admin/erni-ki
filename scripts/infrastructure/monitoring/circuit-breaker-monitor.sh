#!/bin/bash

# Circuit Breaker Monitor –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ERNI-KI
# –§–∞–∑–∞ 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥ - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤
# Version: 1.0 - Production Ready

set -euo pipefail

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ============================================================================

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
FLUENT_BIT_URL="http://localhost:2020"
LOKI_URL="http://localhost:3100"
PROMETHEUS_URL="http://localhost:9090"

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è circuit breaker
ERROR_THRESHOLD=10          # –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –∑–∞ 5 –º–∏–Ω—É—Ç
RETRY_THRESHOLD=50          # –ú–∞–∫—Å–∏–º—É–º retry –∑–∞ 5 –º–∏–Ω—É—Ç
BUFFER_THRESHOLD=80         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –≤ %
RESPONSE_TIME_THRESHOLD=5   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
# ============================================================================

check_fluent_bit_health() {
    echo "=== –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø FLUENT BIT ==="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if ! curl -s --max-time 5 "$FLUENT_BIT_URL/api/v1/health" > /dev/null; then
        echo "‚ùå Fluent Bit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    local metrics=$(curl -s --max-time 5 "$FLUENT_BIT_URL/api/v1/metrics" 2>/dev/null || echo '{}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
    local errors=$(echo "$metrics" | jq -r '.output.["loki.0"].errors // 0')
    local retries=$(echo "$metrics" | jq -r '.output.["loki.0"].retries // 0')
    
    echo "–û—à–∏–±–∫–∏: $errors (–ø–æ—Ä–æ–≥: $ERROR_THRESHOLD)"
    echo "–ü–æ–≤—Ç–æ—Ä—ã: $retries (–ø–æ—Ä–æ–≥: $RETRY_THRESHOLD)"
    
    # Circuit breaker –ª–æ–≥–∏–∫–∞
    if [ "$errors" -gt "$ERROR_THRESHOLD" ]; then
        echo "üî¥ CIRCUIT BREAKER: –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ ($errors > $ERROR_THRESHOLD)"
        trigger_circuit_breaker "errors" "$errors"
        return 1
    fi
    
    if [ "$retries" -gt "$RETRY_THRESHOLD" ]; then
        echo "üü° WARNING: –í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ ($retries > $RETRY_THRESHOLD)"
        trigger_warning "retries" "$retries"
    fi
    
    echo "‚úÖ Fluent Bit —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ"
    return 0
}

check_loki_health() {
    echo "=== –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø LOKI ==="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å Loki
    local start_time=$(date +%s)
    if ! curl -s --max-time "$RESPONSE_TIME_THRESHOLD" "$LOKI_URL/ready" > /dev/null; then
        echo "‚ùå Loki –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç"
        trigger_circuit_breaker "loki_unavailable" "timeout"
        return 1
    fi
    local end_time=$(date +%s)
    local response_time=$((end_time - start_time))
    
    echo "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ Loki: ${response_time}s (–ø–æ—Ä–æ–≥: ${RESPONSE_TIME_THRESHOLD}s)"
    
    if [ "$response_time" -gt "$RESPONSE_TIME_THRESHOLD" ]; then
        echo "üü° WARNING: –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç Loki (${response_time}s > ${RESPONSE_TIME_THRESHOLD}s)"
        trigger_warning "loki_slow" "$response_time"
    fi
    
    echo "‚úÖ Loki —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ"
    return 0
}

check_system_resources() {
    echo "=== –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –†–ï–°–£–†–°–û–í ==="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    local disk_usage=$(df -h data/logs-optimized 2>/dev/null | awk 'NR==2 {print $5}' | sed 's/%//' || echo "0")
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤: ${disk_usage}%"
    
    if [ "$disk_usage" -gt 90 ]; then
        echo "üî¥ CIRCUIT BREAKER: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞ (${disk_usage}% > 90%)"
        trigger_circuit_breaker "disk_full" "$disk_usage"
        return 1
    elif [ "$disk_usage" -gt 80 ]; then
        echo "üü° WARNING: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ (${disk_usage}% > 80%)"
        trigger_warning "disk_usage" "$disk_usage"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    local fluent_memory=$(docker stats --no-stream --format "{{.MemPerc}}" erni-ki-fluent-bit 2>/dev/null | sed 's/%//' || echo "0")
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Fluent Bit: ${fluent_memory}%"
    
    if [ "${fluent_memory%.*}" -gt 80 ]; then
        echo "üü° WARNING: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Fluent Bit (${fluent_memory}% > 80%)"
        trigger_warning "memory_usage" "$fluent_memory"
    fi
    
    echo "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –≤ –Ω–æ—Ä–º–µ"
    return 0
}

# ============================================================================
# CIRCUIT BREAKER –î–ï–ô–°–¢–í–ò–Ø
# ============================================================================

trigger_circuit_breaker() {
    local reason="$1"
    local value="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "üî¥ CIRCUIT BREAKER –ê–ö–¢–ò–í–ò–†–û–í–ê–ù: $reason = $value"
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    echo "[$timestamp] CIRCUIT_BREAKER_TRIGGERED: reason=$reason value=$value" >> "$PROJECT_ROOT/.config-backup/logs/circuit-breaker.log"
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if command -v curl > /dev/null; then
        curl -s -X POST "http://localhost:9095/webhook/circuit-breaker" \
            -H "Content-Type: application/json" \
            -d "{\"reason\":\"$reason\",\"value\":\"$value\",\"timestamp\":\"$timestamp\",\"severity\":\"critical\"}" \
            > /dev/null 2>&1 || true
    fi
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã
    case "$reason" in
        "errors"|"loki_unavailable")
            echo "–ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤"
            enable_local_fallback
            ;;
        "disk_full")
            echo "–ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã: —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"
            emergency_log_cleanup
            ;;
    esac
}

trigger_warning() {
    local reason="$1"
    local value="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "üü° WARNING: $reason = $value"
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    echo "[$timestamp] WARNING: reason=$reason value=$value" >> "$PROJECT_ROOT/.config-backup/logs/circuit-breaker.log"
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ webhook
    if command -v curl > /dev/null; then
        curl -s -X POST "http://localhost:9095/webhook/warning" \
            -H "Content-Type: application/json" \
            -d "{\"reason\":\"$reason\",\"value\":\"$value\",\"timestamp\":\"$timestamp\",\"severity\":\"warning\"}" \
            > /dev/null 2>&1 || true
    fi
}

enable_local_fallback() {
    echo "–í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ fallback —Ä–µ–∂–∏–º–∞ –¥–ª—è –ª–æ–≥–æ–≤..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    local fallback_config="$PROJECT_ROOT/conf/fluent-bit/fluent-bit-fallback.conf"
    
    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
    cp "$PROJECT_ROOT/conf/fluent-bit/fluent-bit.conf" "$fallback_config"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π output
    cat >> "$fallback_config" << EOF

# EMERGENCY FALLBACK OUTPUT - Circuit Breaker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
[OUTPUT]
    Name        file
    Match       *
    Path        /var/log/emergency
    File        emergency-logs.txt
    Format      json_lines

EOF
    
    echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π fallback —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

emergency_log_cleanup() {
    echo "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤..."
    
    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
    find "$PROJECT_ROOT/data/logs-optimized" -name "*.log" -mtime +7 -exec gzip {} \; 2>/dev/null || true
    find "$PROJECT_ROOT/data/logs-optimized" -name "*.gz" -mtime +30 -delete 2>/dev/null || true
    
    # –û—á–∏—â–∞–µ–º Docker –ª–æ–≥–∏
    docker system prune -f --volumes > /dev/null 2>&1 || true
    
    echo "‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# ============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# ============================================================================

main() {
    echo "üîç –ó–∞–ø—É—Å–∫ Circuit Breaker Monitor –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ERNI-KI"
    echo "–í—Ä–µ–º—è: $(date)"
    echo ""
    
    local overall_status=0
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    mkdir -p "$PROJECT_ROOT/.config-backup/logs"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    check_fluent_bit_health || overall_status=1
    echo ""
    
    check_loki_health || overall_status=1
    echo ""
    
    check_system_resources || overall_status=1
    echo ""
    
    if [ $overall_status -eq 0 ]; then
        echo "üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ"
    else
        echo "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã"
    fi
    
    return $overall_status
}

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main "$@"
