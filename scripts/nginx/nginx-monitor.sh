#!/bin/bash

# ERNI-KI NGINX Production Monitoring Script
# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ nginx –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å—Ä–µ–¥—ã

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}üìä ERNI-KI NGINX Production Monitoring${NC}"
echo "=================================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint
test_endpoint() {
    local url=$1
    local description=$2
    local timeout=${3:-10}

    echo -n "Testing $description... "

    local start_time=$(date +%s%3N)
    local http_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time $timeout "$url" 2>/dev/null || echo "000")
    local end_time=$(date +%s%3N)
    local response_time=$((end_time - start_time))

    if [ "$http_code" = "200" ]; then
        echo -e "${GREEN}‚úÖ OK (${response_time}ms)${NC}"
        return 0
    elif [ "$http_code" = "301" ] || [ "$http_code" = "302" ]; then
        echo -e "${YELLOW}‚ÜóÔ∏è Redirect $http_code (${response_time}ms)${NC}"
        return 0
    else
        echo -e "${RED}‚ùå HTTP $http_code (${response_time}ms)${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container_status() {
    echo -e "\n${CYAN}üê≥ Container Status${NC}"
    echo "-------------------"

    local status=$(docker ps --filter "name=nginx" --format "{{.Status}}" 2>/dev/null || echo "Not found")
    local health=$(docker inspect erni-ki-nginx-1 2>/dev/null | jq -r '.[0].State.Health.Status' 2>/dev/null || echo "unknown")

    echo "Status: $status"
    echo "Health: $health"

    if [[ "$status" == *"Up"* ]]; then
        echo -e "${GREEN}‚úÖ Container is running${NC}"
    else
        echo -e "${RED}‚ùå Container is not running${NC}"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
check_performance() {
    echo -e "\n${CYAN}‚ö° Performance Metrics${NC}"
    echo "----------------------"

    # CPU –∏ Memory usage
    local stats=$(docker stats erni-ki-nginx-1 --no-stream --format "{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null || echo "N/A\tN/A")
    local cpu=$(echo "$stats" | cut -f1)
    local memory=$(echo "$stats" | cut -f2)

    echo "CPU Usage: $cpu"
    echo "Memory Usage: $memory"

    # Response times
    echo -e "\nResponse Times:"
    test_endpoint "http://localhost:8080/health" "HTTP Health"
    test_endpoint "https://localhost:443/health" "HTTPS Health" 15
    # RAG components
    test_endpoint "https://localhost/api/docling/health" "Docling over HTTPS" 10
    test_endpoint "https://localhost/api/searxng/search?q=test&format=json" "SearXNG API over HTTPS" 10
    test_endpoint "https://localhost/searxng/healthz" "SearXNG health over HTTPS" 5

    # Worker processes (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    local workers=$(docker exec erni-ki-nginx-1 ls -la /proc/ 2>/dev/null | grep -E "^d.*[0-9]+$" | wc -l 2>/dev/null || echo "N/A")
    echo "Active Processes: $workers"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL/TLS
check_ssl_tls() {
    echo -e "\n${CYAN}üîí SSL/TLS Status${NC}"
    echo "------------------"

    # SSL certificate info
    if openssl s_client -connect localhost:443 -servername localhost </dev/null 2>/dev/null | openssl x509 -noout -dates 2>/dev/null; then
        echo -e "${GREEN}‚úÖ SSL certificate is valid${NC}"
    else
        echo -e "${RED}‚ùå SSL certificate issues${NC}"
    fi

    # SSL protocols and ciphers
    echo -e "\nSSL Configuration:"
    echo | openssl s_client -connect localhost:443 -servername localhost 2>/dev/null | grep -E "(Protocol|Cipher)" || echo "Unable to retrieve SSL info"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers
check_security_headers() {
    echo -e "\n${CYAN}üõ°Ô∏è Security Headers${NC}"
    echo "--------------------"

    echo "HTTPS Headers:"
    local https_headers=$(curl -s -I -k https://localhost:443/health 2>/dev/null || echo "")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö security headers
    local headers_to_check=(
        "Strict-Transport-Security"
        "X-Frame-Options"
        "X-Content-Type-Options"
        "X-XSS-Protection"
        "Referrer-Policy"
        "Content-Security-Policy"
    )

    for header in "${headers_to_check[@]}"; do
        if echo "$https_headers" | grep -qi "$header"; then
            echo -e "  ${GREEN}‚úÖ $header${NC}"
        else
            echo -e "  ${RED}‚ùå $header${NC}"
        fi
    done
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
check_logs() {
    echo -e "\n${CYAN}üìã Recent Logs Analysis${NC}"
    echo "------------------------"

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
    local error_count=$(docker logs erni-ki-nginx-1 --tail=100 2>/dev/null | grep -c -E "(error|Error|ERROR)" 2>/dev/null || echo "0")
    local warn_count=$(docker logs erni-ki-nginx-1 --tail=100 2>/dev/null | grep -c -E "(warn|Warn|WARN)" 2>/dev/null || echo "0")

    echo "Recent Errors (last 100 lines): $error_count"
    echo "Recent Warnings (last 100 lines): $warn_count"

    if [ "$error_count" -gt 0 ]; then
        echo -e "\n${RED}Recent Errors:${NC}"
        docker logs erni-ki-nginx-1 --tail=100 2>/dev/null | grep -E "(error|Error|ERROR)" | tail -5
    fi

    if [ "$warn_count" -gt 0 ]; then
        echo -e "\n${YELLOW}Recent Warnings:${NC}"
        docker logs erni-ki-nginx-1 --tail=100 2>/dev/null | grep -E "(warn|Warn|WARN)" | tail -3
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_configuration() {
    echo -e "\n${CYAN}‚öôÔ∏è Configuration Status${NC}"
    echo "------------------------"

    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if docker exec erni-ki-nginx-1 nginx -t 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Configuration is valid${NC}"
    else
        echo -e "${RED}‚ùå Configuration has errors${NC}"
        docker exec erni-ki-nginx-1 nginx -t 2>&1 | head -5
    fi

    # –í–µ—Ä—Å–∏—è nginx
    local version=$(docker exec erni-ki-nginx-1 nginx -v 2>&1 | cut -d' ' -f3 2>/dev/null || echo "unknown")
    echo "NGINX Version: $version"

    # HTTP/2 support
    if docker exec erni-ki-nginx-1 nginx -T 2>/dev/null | grep -q "http2"; then
        echo -e "${GREEN}‚úÖ HTTP/2 enabled${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è HTTP/2 not detected${NC}"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ upstream connectivity
check_upstream() {
    echo -e "\n${CYAN}üîó Upstream Connectivity${NC}"
    echo "-------------------------"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenWebUI
    if docker exec erni-ki-nginx-1 curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 http://openwebui:8080/health 2>/dev/null | grep -q "200"; then
        echo -e "${GREEN}‚úÖ OpenWebUI upstream reachable${NC}"
    else
        echo -e "${RED}‚ùå OpenWebUI upstream unreachable${NC}"
    fi

    # DNS resolution test
    if docker exec erni-ki-nginx-1 nslookup openwebui 2>/dev/null >/dev/null; then
        echo -e "${GREEN}‚úÖ DNS resolution working${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è DNS resolution issues${NC}"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    echo -e "\n${CYAN}üìä Summary Report${NC}"
    echo "=================="

    local total_checks=0
    local passed_checks=0

    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    echo "System Status:"

    # Container status
    if docker ps --filter "name=nginx" --format "{{.Status}}" 2>/dev/null | grep -q "Up"; then
        echo -e "  ${GREEN}‚úÖ Container Running${NC}"
        ((passed_checks++))
    else
        echo -e "  ${RED}‚ùå Container Issues${NC}"
    fi
    ((total_checks++))

    # HTTP connectivity
    if curl -s -o /dev/null -w "%{http_code}" --max-time 5 http://localhost:8080/health 2>/dev/null | grep -q "200"; then
        echo -e "  ${GREEN}‚úÖ HTTP Connectivity${NC}"
        ((passed_checks++))
    else
        echo -e "  ${RED}‚ùå HTTP Issues${NC}"
    fi
    ((total_checks++))

    # Configuration validity
    if docker exec erni-ki-nginx-1 nginx -t 2>/dev/null; then
        echo -e "  ${GREEN}‚úÖ Configuration Valid${NC}"
        ((passed_checks++))
    else
        echo -e "  ${RED}‚ùå Configuration Issues${NC}"
    fi
    ((total_checks++))

    # Overall score
    local score=$((passed_checks * 100 / total_checks))
    echo -e "\nOverall Health Score: ${score}% (${passed_checks}/${total_checks})"

    if [ $score -ge 90 ]; then
        echo -e "${GREEN}üéâ NGINX is running optimally${NC}"
    elif [ $score -ge 70 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è NGINX has minor issues${NC}"
    else
        echo -e "${RED}üö® NGINX needs attention${NC}"
    fi

    echo -e "\n${BLUE}üí° Recommendations:${NC}"
    echo "- Monitor logs regularly for errors"
    echo "- Check SSL certificate expiration"
    echo "- Review performance metrics"
    echo "- Update security headers as needed"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ ! -f "compose.production.yml" ]; then
        echo -e "${RED}Error: Script must be run from ERNI-KI project root directory${NC}"
        exit 1
    fi

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_container_status
    check_performance
    check_ssl_tls
    check_security_headers
    check_logs
    check_configuration
    check_upstream
    generate_report

    echo -e "\n${BLUE}Monitoring completed at $(date)${NC}"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
