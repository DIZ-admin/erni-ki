#!/bin/bash
# –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ERNI-KI
# –ê–≤—Ç–æ—Ä: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü (Tech Lead)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() { echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }
info() { echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"; }
section() { echo -e "${PURPLE}üîç $1${NC}"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
check_dependencies() {
    section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ curl
    if command -v curl &> /dev/null; then
        success "curl –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è HTTP —Ç–µ—Å—Ç–æ–≤)"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ apache2-utils (ab)
    if command -v ab &> /dev/null; then
        success "Apache Bench (ab) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "Apache Bench –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
        if command -v apt-get &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y apache2-utils
        else
            error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Apache Bench"
            return 1
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ jq –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
    if command -v jq &> /dev/null; then
        success "jq –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é..."
        if command -v apt-get &> /dev/null; then
            sudo apt-get install -y jq
        else
            warning "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã"
        fi
    fi

    echo ""
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Ollama
test_ollama_performance() {
    section "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Ollama"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama
    if ! curl -sf http://localhost:11434/api/version &> /dev/null; then
        error "Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi

    success "Ollama API –¥–æ—Å—Ç—É–ø–µ–Ω"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
    local models=$(curl -s http://localhost:11434/api/tags | jq -r '.models[].name' 2>/dev/null || echo "")
    if [ -z "$models" ]; then
        warning "–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å..."
        docker-compose exec -T ollama ollama pull llama3.2:3b
        models="llama3.2:3b"
    fi

    local test_model=$(echo "$models" | head -1)
    success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é: $test_model"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    local test_prompt="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ."

    # –¢–µ—Å—Ç 1: –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    log "–¢–µ—Å—Ç 1: –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"
    local start_time=$(date +%s.%N)

    local response=$(curl -s -X POST http://localhost:11434/api/generate \
        -H "Content-Type: application/json" \
        -d "{\"model\":\"$test_model\",\"prompt\":\"$test_prompt\",\"stream\":false}")

    local end_time=$(date +%s.%N)
    local response_time=$(echo "$end_time - $start_time" | bc)

    if [ -n "$response" ]; then
        success "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${response_time} —Å–µ–∫—É–Ω–¥"

        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
        local response_length=$(echo "$response" | jq -r '.response' 2>/dev/null | wc -c)
        success "–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: $response_length —Å–∏–º–≤–æ–ª–æ–≤"
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"
    fi

    # –¢–µ—Å—Ç 2: –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    log "–¢–µ—Å—Ç 2: –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç (5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)"
    local concurrent_requests=5
    local total_time=0
    local successful_requests=0

    for i in $(seq 1 $concurrent_requests); do
        {
            local req_start=$(date +%s.%N)
            local req_response=$(curl -s -X POST http://localhost:11434/api/generate \
                -H "Content-Type: application/json" \
                -d "{\"model\":\"$test_model\",\"prompt\":\"–¢–µ—Å—Ç $i: –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ $i\",\"stream\":false}")
            local req_end=$(date +%s.%N)
            local req_time=$(echo "$req_end - $req_start" | bc)

            if [ -n "$req_response" ]; then
                echo "–ó–∞–ø—Ä–æ—Å $i: ${req_time}s" >> /tmp/ollama_load_test.log
            fi
        } &
    done

    wait

    if [ -f /tmp/ollama_load_test.log ]; then
        local avg_time=$(awk '{sum+=$2; count++} END {print sum/count}' /tmp/ollama_load_test.log)
        local completed=$(wc -l < /tmp/ollama_load_test.log)
        success "–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: $completed/$concurrent_requests"
        success "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${avg_time}s"
        rm -f /tmp/ollama_load_test.log
    fi

    # –¢–µ—Å—Ç 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    log "–¢–µ—Å—Ç 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"
    local ollama_container=$(docker-compose ps -q ollama)
    if [ -n "$ollama_container" ]; then
        local stats=$(docker stats --no-stream --format "{{.CPUPerc}}\t{{.MemUsage}}" "$ollama_container")
        local cpu_usage=$(echo "$stats" | cut -f1)
        local mem_usage=$(echo "$stats" | cut -f2)
        success "CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $cpu_usage"
        success "–ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $mem_usage"
    fi

    echo ""
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL
test_postgresql_performance() {
    section "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î
    if ! docker-compose exec -T db pg_isready -U postgres &> /dev/null; then
        error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi

    success "PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω"

    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ SELECT –∑–∞–ø—Ä–æ—Å—ã
    log "–¢–µ—Å—Ç 1: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å SELECT –∑–∞–ø—Ä–æ—Å–æ–≤"
    local start_time=$(date +%s.%N)

    for i in {1..100}; do
        docker-compose exec -T db psql -U postgres -d openwebui -c "SELECT 1;" &> /dev/null
    done

    local end_time=$(date +%s.%N)
    local total_time=$(echo "$end_time - $start_time" | bc)
    local avg_time=$(echo "scale=4; $total_time / 100" | bc)

    success "100 SELECT –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${total_time}s"
    success "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${avg_time}s"

    # –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    log "–¢–µ—Å—Ç 2: –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
    local connection_start=$(date +%s.%N)

    for i in {1..20}; do
        {
            docker-compose exec -T db psql -U postgres -d openwebui -c "SELECT current_timestamp;" &> /dev/null
        } &
    done

    wait
    local connection_end=$(date +%s.%N)
    local connection_time=$(echo "$connection_end - $connection_start" | bc)

    success "20 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${connection_time}s"

    # –¢–µ—Å—Ç 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î
    log "–¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î"

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    local active_connections=$(docker-compose exec -T db psql -U postgres -d openwebui -t -c "SELECT count(*) FROM pg_stat_activity WHERE state = 'active';" | tr -d ' ')
    success "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: $active_connections"

    # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    local db_size=$(docker-compose exec -T db psql -U postgres -d openwebui -t -c "SELECT pg_size_pretty(pg_database_size('openwebui'));" | tr -d ' ')
    success "–†–∞–∑–º–µ—Ä –ë–î: $db_size"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü
    local table_count=$(docker-compose exec -T db psql -U postgres -d openwebui -t -c "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';" | tr -d ' ')
    success "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: $table_count"

    echo ""
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
test_webui_performance() {
    section "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"

    # –¢–µ—Å—Ç 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–µ—Ä–µ–∑ Nginx
    log "–¢–µ—Å—Ç 1: –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"

    if command -v ab &> /dev/null; then
        local ab_result=$(ab -n 100 -c 10 -q http://localhost/ 2>&1)

        local requests_per_sec=$(echo "$ab_result" | grep "Requests per second" | awk '{print $4}')
        local time_per_request=$(echo "$ab_result" | grep "Time per request" | head -1 | awk '{print $4}')
        local failed_requests=$(echo "$ab_result" | grep "Failed requests" | awk '{print $3}')

        success "–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: $requests_per_sec"
        success "–í—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${time_per_request}ms"
        success "–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: $failed_requests"
    else
        warning "Apache Bench –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç"
    fi

    # –¢–µ—Å—Ç 2: API endpoints
    log "–¢–µ—Å—Ç 2: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API endpoints"

    local endpoints=(
        "http://localhost:9090/health:Auth API"
        "http://localhost:11434/api/version:Ollama API"
        "http://localhost:5001/health:Docling API"
        "http://localhost:9998/tika:Tika API"
    )

    for endpoint_info in "${endpoints[@]}"; do
        local endpoint=$(echo "$endpoint_info" | cut -d: -f1)
        local name=$(echo "$endpoint_info" | cut -d: -f2)

        local start_time=$(date +%s.%N)
        local response=$(curl -s -w "%{http_code}" "$endpoint")
        local end_time=$(date +%s.%N)
        local response_time=$(echo "scale=3; ($end_time - $start_time) * 1000" | bc)

        if [[ "$response" == *"200" ]]; then
            success "$name: ${response_time}ms"
        else
            warning "$name: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞"
        fi
    done

    # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
    log "–¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"

    local static_start=$(date +%s.%N)
    curl -s http://localhost/ > /dev/null
    local static_end=$(date +%s.%N)
    local static_time=$(echo "scale=3; ($static_end - $static_start) * 1000" | bc)

    success "–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${static_time}ms"

    echo ""
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Redis
test_redis_performance() {
    section "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Redis"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
    if ! docker-compose exec -T redis redis-cli ping &> /dev/null; then
        error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi

    success "Redis –¥–æ—Å—Ç—É–ø–µ–Ω"

    # –¢–µ—Å—Ç 1: –û–ø–µ—Ä–∞—Ü–∏–∏ SET/GET
    log "–¢–µ—Å—Ç 1: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å SET/GET –æ–ø–µ—Ä–∞—Ü–∏–π"

    local redis_start=$(date +%s.%N)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 1000 SET –æ–ø–µ—Ä–∞—Ü–∏–π
    for i in {1..1000}; do
        docker-compose exec -T redis redis-cli set "test_key_$i" "test_value_$i" &> /dev/null
    done

    local redis_set_end=$(date +%s.%N)
    local set_time=$(echo "scale=3; $redis_set_end - $redis_start" | bc)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 1000 GET –æ–ø–µ—Ä–∞—Ü–∏–π
    for i in {1..1000}; do
        docker-compose exec -T redis redis-cli get "test_key_$i" &> /dev/null
    done

    local redis_get_end=$(date +%s.%N)
    local get_time=$(echo "scale=3; $redis_get_end - $redis_set_end" | bc)

    success "1000 SET –æ–ø–µ—Ä–∞—Ü–∏–π: ${set_time}s"
    success "1000 GET –æ–ø–µ—Ä–∞—Ü–∏–π: ${get_time}s"

    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    docker-compose exec -T redis redis-cli flushdb &> /dev/null

    # –¢–µ—Å—Ç 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Redis
    log "–¢–µ—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis"

    local redis_info=$(docker-compose exec -T redis redis-cli info stats)
    local total_commands=$(echo "$redis_info" | grep "total_commands_processed" | cut -d: -f2 | tr -d '\r')
    local keyspace_hits=$(echo "$redis_info" | grep "keyspace_hits" | cut -d: -f2 | tr -d '\r')
    local keyspace_misses=$(echo "$redis_info" | grep "keyspace_misses" | cut -d: -f2 | tr -d '\r')

    success "–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: $total_commands"
    success "–ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: $keyspace_hits"
    success "–ü—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞: $keyspace_misses"

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Redis
    local memory_info=$(docker-compose exec -T redis redis-cli info memory)
    local used_memory=$(echo "$memory_info" | grep "used_memory_human" | cut -d: -f2 | tr -d '\r')
    local max_memory=$(echo "$memory_info" | grep "maxmemory_human" | cut -d: -f2 | tr -d '\r')

    success "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–º—è—Ç–∏: $used_memory"
    if [ -n "$max_memory" ] && [ "$max_memory" != "0B" ]; then
        success "–ú–∞–∫—Å–∏–º—É–º –ø–∞–º—è—Ç–∏: $max_memory"
    else
        info "–õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi

    echo ""
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤
monitor_system_resources() {
    section "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"

    # CPU –∑–∞–≥—Ä—É–∑–∫–∞
    local cpu_load=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    success "–ó–∞–≥—Ä—É–∑–∫–∞ CPU: $cpu_load"

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    local memory_info=$(free -h | grep "Mem:")
    local total_mem=$(echo "$memory_info" | awk '{print $2}')
    local used_mem=$(echo "$memory_info" | awk '{print $3}')
    local available_mem=$(echo "$memory_info" | awk '{print $7}')

    success "–ü–∞–º—è—Ç—å: $used_mem/$total_mem –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, $available_mem –¥–æ—Å—Ç—É–ø–Ω–æ"

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    local disk_usage=$(df -h / | tail -1 | awk '{print $5}')
    local disk_available=$(df -h / | tail -1 | awk '{print $4}')

    success "–î–∏—Å–∫: $disk_usage –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, $disk_available –¥–æ—Å—Ç—É–ø–Ω–æ"

    # Docker —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    log "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" | head -6

    echo ""
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
generate_performance_report() {
    section "–û—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"

    local overall_score=0
    local max_score=5
    local performance_issues=()
    local recommendations=()

    # –û—Ü–µ–Ω–∫–∞ Ollama (–µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è)
    if curl -sf http://localhost:11434/api/version &> /dev/null; then
        overall_score=$((overall_score + 1))
        success "Ollama: –†–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã"
    else
        performance_issues+=("Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç")
    fi

    # –û—Ü–µ–Ω–∫–∞ PostgreSQL
    if docker-compose exec -T db pg_isready -U postgres &> /dev/null; then
        overall_score=$((overall_score + 1))
        success "PostgreSQL: –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"
    else
        performance_issues+=("PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    fi

    # –û—Ü–µ–Ω–∫–∞ Redis
    if docker-compose exec -T redis redis-cli ping &> /dev/null; then
        overall_score=$((overall_score + 1))
        success "Redis: –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"
    else
        performance_issues+=("Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    fi

    # –û—Ü–µ–Ω–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if curl -sf http://localhost &> /dev/null; then
        overall_score=$((overall_score + 1))
        success "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –î–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–∑—ã–≤—á–∏–≤"
    else
        performance_issues+=("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    fi

    # –û—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    local cpu_load=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    local cpu_load_num=$(echo "$cpu_load" | cut -d. -f1)

    if [ "$cpu_load_num" -lt 2 ]; then
        overall_score=$((overall_score + 1))
        success "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
    elif [ "$cpu_load_num" -lt 4 ]; then
        success "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: –£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
        recommendations+=("–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É CPU –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    else
        warning "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
        recommendations+=("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞")
    fi

    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    local percentage=$((overall_score * 100 / max_score))
    echo ""

    if [ "$percentage" -ge 90 ]; then
        success "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: ${percentage}% - –û—Ç–ª–∏—á–Ω–æ"
    elif [ "$percentage" -ge 70 ]; then
        info "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: ${percentage}% - –•–æ—Ä–æ—à–æ"
    elif [ "$percentage" -ge 50 ]; then
        warning "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: ${percentage}% - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    else
        error "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: ${percentage}% - –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
    fi

    # –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if [ ${#performance_issues[@]} -gt 0 ]; then
        echo ""
        error "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"
        for issue in "${performance_issues[@]}"; do
            echo "  ‚Ä¢ $issue"
        done
    fi

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if [ ${#recommendations[@]} -gt 0 ]; then
        echo ""
        warning "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:"
        for rec in "${recommendations[@]}"; do
            echo "  ‚Ä¢ $rec"
        done
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    Load Testing Suite                       ‚ïë"
    echo "‚ïë              –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ERNI-KI               ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"

    check_dependencies
    test_ollama_performance
    test_postgresql_performance
    test_redis_performance
    test_webui_performance
    monitor_system_resources
    generate_performance_report

    echo ""
    echo -e "${GREEN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë               –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ            ‚ïë"
    echo "‚ïë          –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ load_test_report.txt        ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main "$@" | tee load_test_report.txt
