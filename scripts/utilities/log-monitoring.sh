#!/bin/bash

# ============================================================================
# ERNI-KI LOG MONITORING SCRIPT
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–≥–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
# –°–æ–∑–¥–∞–Ω: 2025-09-18 –≤ —Ä–∞–º–∫–∞—Ö —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ============================================================================

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
LOG_DIR="$PROJECT_ROOT/logs"
ALERT_THRESHOLD_GB=1
CRITICAL_THRESHOLD_GB=5
WEBHOOK_URL="${LOG_MONITORING_WEBHOOK_URL:-}"
COMPOSE_FILE="$PROJECT_ROOT/compose.yml"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
send_webhook() {
    local message="$1"
    local severity="${2:-info}"

    if [[ -n "$WEBHOOK_URL" ]]; then
        curl -s -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{\"text\":\"üîç ERNI-KI Log Monitor: $message\", \"severity\":\"$severity\"}" \
            >/dev/null 2>&1 || warn "Failed to send webhook notification"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–≥–æ–≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_docker_logs() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –ª–æ–≥–æ–≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."

    local total_size=0
    local alerts=()

    while IFS= read -r container; do
        if [[ -n "$container" ]]; then
            local log_file="/var/lib/docker/containers/$container/$container-json.log"
            if [[ -f "$log_file" ]]; then
                local size_bytes=$(stat -f%z "$log_file" 2>/dev/null || stat -c%s "$log_file" 2>/dev/null || echo 0)
                local size_mb=$((size_bytes / 1024 / 1024))
                total_size=$((total_size + size_mb))

                if [[ $size_mb -gt 100 ]]; then
                    local container_name=$(docker inspect --format='{{.Name}}' "$container" 2>/dev/null | sed 's/^\/*//' || echo "unknown")
                    alerts+=("$container_name: ${size_mb}MB")
                fi
            fi
        fi
    done < <(docker ps -q)

    local total_gb=$((total_size / 1024))

    echo "üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤ Docker: ${total_gb}GB (${total_size}MB)"

    if [[ $total_gb -gt $CRITICAL_THRESHOLD_GB ]]; then
        error "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤: ${total_gb}GB > ${CRITICAL_THRESHOLD_GB}GB"
        send_webhook "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤: ${total_gb}GB" "critical"
        return 2
    elif [[ $total_gb -gt $ALERT_THRESHOLD_GB ]]; then
        warn "–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${total_gb}GB > ${ALERT_THRESHOLD_GB}GB"
        send_webhook "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –ª–æ–≥–æ–≤: ${total_gb}GB" "warning"
        return 1
    else
        success "–†–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤ –≤ –Ω–æ—Ä–º–µ: ${total_gb}GB"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Fluent Bit
check_fluent_bit_performance() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Fluent Bit..."

    local container_name="erni-ki-fluent-bit"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU –∏ –ø–∞–º—è—Ç–∏
    local stats=$(docker stats --no-stream --format "table {{.CPUPerc}}\t{{.MemUsage}}" "$container_name" 2>/dev/null || echo "N/A	N/A")
    local cpu_percent=$(echo "$stats" | tail -n1 | awk '{print $1}' | sed 's/%//')
    local mem_usage=$(echo "$stats" | tail -n1 | awk '{print $2}')

    echo "üìà Fluent Bit –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"
    echo "   CPU: ${cpu_percent}%"
    echo "   Memory: $mem_usage"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ API
    local metrics_response=$(curl -s "http://localhost:2020/api/v1/metrics" 2>/dev/null || echo "{}")
    local input_records=$(echo "$metrics_response" | jq -r '.input.forward.records // 0' 2>/dev/null || echo "0")
    local output_records=$(echo "$metrics_response" | jq -r '.output.loki.proc_records // 0' 2>/dev/null || echo "0")

    echo "   Input records: $input_records"
    echo "   Output records: $output_records"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    local error_count=$(docker logs "$container_name" --since 1h 2>/dev/null | grep -c -E "(ERROR|error)" || echo "0")
    echo "   Errors (1h): $error_count"

    if [[ "$error_count" -gt 50 ]]; then
        warn "–í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤ Fluent Bit: $error_count –∑–∞ —á–∞—Å"
        send_webhook "‚ö†Ô∏è Fluent Bit errors: $error_count/hour" "warning"
        return 1
    else
        success "Fluent Bit —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Loki API
check_loki_api() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Loki API..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
    local local_status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3100/ready" 2>/dev/null || echo "000")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API —á–µ—Ä–µ–∑ nginx
    local nginx_status=$(curl -k -s -o /dev/null -w "%{http_code}" "https://localhost/loki/api/v1/labels" 2>/dev/null || echo "000")

    echo "üîó Loki API —Å—Ç–∞—Ç—É—Å:"
    echo "   –õ–æ–∫–∞–ª—å–Ω—ã–π API: $local_status"
    echo "   Nginx proxy: $nginx_status"

    if [[ "$local_status" == "200" && "$nginx_status" == "200" ]]; then
        success "Loki API –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        error "–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é Loki API"
        send_webhook "üö® Loki API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (local: $local_status, nginx: $nginx_status)" "critical"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
cleanup_old_logs() {
    log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤..."

    local cleaned_files=0

    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs/
    if [[ -d "$LOG_DIR" ]]; then
        while IFS= read -r -d '' file; do
            rm -f "$file"
            ((cleaned_files++))
        done < <(find "$LOG_DIR" -name "*.log" -type f -mtime +7 -print0 2>/dev/null)
    fi

    # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ Docker (–µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)
    local total_size_gb=$(check_docker_logs | grep "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä" | awk '{print $5}' | sed 's/GB.*//' || echo "0")

    if [[ "${total_size_gb:-0}" -gt $CRITICAL_THRESHOLD_GB ]]; then
        log "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ Docker..."
        docker system prune -f --volumes >/dev/null 2>&1 || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å docker system prune"
    fi

    success "–û—á–∏—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $cleaned_files"
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_report() {
    local timestamp=$(date '+%Y-%m-%d_%H-%M-%S')
    local report_file="$LOG_DIR/log-monitoring-report-$timestamp.json"

    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞: $report_file"

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mkdir -p "$LOG_DIR"

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
    local docker_log_check=$(check_docker_logs 2>&1)
    local fluent_bit_check=$(check_fluent_bit_performance 2>&1)
    local loki_api_check=$(check_loki_api 2>&1)

    # –°–æ–∑–¥–∞–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞
    cat > "$report_file" << EOF
{
  "timestamp": "$(date -Iseconds)",
  "version": "1.0",
  "system": "ERNI-KI",
  "checks": {
    "docker_logs": {
      "output": $(echo "$docker_log_check" | jq -Rs .)
    },
    "fluent_bit": {
      "output": $(echo "$fluent_bit_check" | jq -Rs .)
    },
    "loki_api": {
      "output": $(echo "$loki_api_check" | jq -Rs .)
    }
  },
  "thresholds": {
    "alert_gb": $ALERT_THRESHOLD_GB,
    "critical_gb": $CRITICAL_THRESHOLD_GB
  }
}
EOF

    success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "============================================================================"
    echo "üîç ERNI-KI LOG MONITORING - $(date '+%Y-%m-%d %H:%M:%S')"
    echo "============================================================================"

    local exit_code=0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –ª–æ–≥–æ–≤
    check_docker_logs || exit_code=$?
    echo

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Fluent Bit
    check_fluent_bit_performance || exit_code=$?
    echo

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Loki API
    check_loki_api || exit_code=$?
    echo

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if [[ $exit_code -gt 1 ]]; then
        cleanup_old_logs
        echo
    fi

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report
    echo

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    case $exit_code in
        0)
            success "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
            send_webhook "‚úÖ Log monitoring: –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ" "info"
            ;;
        1)
            warn "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
            ;;
        2)
            error "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
            ;;
    esac

    echo "============================================================================"
    exit $exit_code
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
