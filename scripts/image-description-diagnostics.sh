#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# –ê–≤—Ç–æ—Ä: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü (ERNI-KI Tech Lead)

set -euo pipefail

echo "üîç ERNI-KI: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤–∫–ª—é—á–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
echo "============================================================================"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."

    local services=("docling" "ollama" "openwebui" "db")
    local all_healthy=true

    for service in "${services[@]}"; do
        if docker-compose ps "$service" | grep -q "healthy"; then
            log "‚úÖ $service: –ó–¥–æ—Ä–æ–≤"
        else
            log "‚ùå $service: –ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º"
            all_healthy=false
        fi
    done

    if [ "$all_healthy" = true ]; then
        log "‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∑–¥–æ—Ä–æ–≤—ã"
        return 0
    else
        log "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama API
check_ollama_api() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama API..."

    if curl -s http://localhost:11434/api/tags > /dev/null; then
        log "‚úÖ Ollama API –¥–æ—Å—Ç—É–ø–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è llava –º–æ–¥–µ–ª–∏
        if curl -s http://localhost:11434/api/tags | grep -q "llava"; then
            log "‚úÖ –ú–æ–¥–µ–ª—å llava –Ω–∞–π–¥–µ–Ω–∞ –≤ Ollama"
            return 0
        else
            log "‚ö†Ô∏è  –ú–æ–¥–µ–ª—å llava –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞: ollama pull llava:latest"
            return 1
        fi
    else
        log "‚ùå Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docling API
check_docling_api() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docling API..."

    if docker-compose exec docling curl -s http://localhost:5001/health | grep -q "ok"; then
        log "‚úÖ Docling API –∑–¥–æ—Ä–æ–≤"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints
        if docker-compose exec docling curl -s http://localhost:5001/openapi.json | jq -r '.paths | keys[]' | grep -q "convert"; then
            log "‚úÖ Docling convert endpoints –¥–æ—Å—Ç—É–ø–Ω—ã"
            return 0
        else
            log "‚ùå Docling convert endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            return 1
        fi
    else
        log "‚ùå Docling API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
check_disk_space() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ..."

    local available_gb=$(df -BG . | awk 'NR==2 {print $4}' | sed 's/G//')

    if [ "$available_gb" -gt 10 ]; then
        log "‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${available_gb}GB (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"
        return 0
    else
        log "‚ö†Ô∏è  –°–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${available_gb}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >10GB –¥–ª—è –º–æ–¥–µ–ª–µ–π)"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
check_memory() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏..."

    local available_mb=$(free -m | awk 'NR==2{printf "%.0f", $7}')

    if [ "$available_mb" -gt 4096 ]; then
        log "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏: ${available_mb}MB (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"
        return 0
    else
        log "‚ö†Ô∏è  –î–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏: ${available_mb}MB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >4GB –¥–ª—è VLM –º–æ–¥–µ–ª–µ–π)"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
check_gpu() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU..."

    if command -v nvidia-smi &> /dev/null; then
        local gpu_memory=$(nvidia-smi --query-gpu=memory.free --format=csv,noheader,nounits | head -1)
        if [ "$gpu_memory" -gt 2048 ]; then
            log "‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏: ${gpu_memory}MB"
            return 0
        else
            log "‚ö†Ô∏è  GPU –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏: ${gpu_memory}MB"
            return 1
        fi
    else
        log "‚ÑπÔ∏è  GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU)"
        return 0
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_config_backup() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    local backup_dir=".config-backup/image-description-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$backup_dir"

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cp env/docling.env "$backup_dir/"
    cp compose.yml "$backup_dir/"

    # –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenWebUI (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    if docker-compose exec openwebui test -f /app/backend/data/config.json; then
        docker-compose exec openwebui cat /app/backend/data/config.json > "$backup_dir/openwebui-config.json"
    fi

    log "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤: $backup_dir"
    echo "$backup_dir" > .config-backup/latest-image-description-backup
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local all_checks_passed=true

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_services || all_checks_passed=false
    check_ollama_api || all_checks_passed=false
    check_docling_api || all_checks_passed=false
    check_disk_space || all_checks_passed=false
    check_memory || all_checks_passed=false
    check_gpu || all_checks_passed=false

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫
    create_config_backup

    echo ""
    echo "============================================================================"

    if [ "$all_checks_passed" = true ]; then
        log "üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≤–∫–ª—é—á–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!"
        log "üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å –í–∞—Ä–∏–∞–Ω—Ç–∞ 2 (API mode —Å Ollama)"
        exit 0
    else
        log "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Ö —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
        log "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
