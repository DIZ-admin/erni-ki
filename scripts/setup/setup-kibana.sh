#!/bin/bash
# ERNI-KI Kibana Setup Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Kibana –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã ERNI-KI

set -e

KIBANA_URL="http://localhost:5601"
ELASTICSEARCH_URL="http://localhost:9200"
INDEX_PATTERN="erni-ki-*"

echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kibana –¥–ª—è —Å–∏—Å—Ç–µ–º—ã ERNI-KI..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Kibana –∏ Elasticsearch
check_services() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    if ! curl -s "$KIBANA_URL/api/status" >/dev/null; then
        echo "‚ùå Kibana –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É $KIBANA_URL"
        exit 1
    fi
    
    if ! curl -s "$ELASTICSEARCH_URL/_cluster/health" >/dev/null; then
        echo "‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É $ELASTICSEARCH_URL"
        exit 1
    fi
    
    local kibana_status=$(curl -s "$KIBANA_URL/api/status" | jq -r '.status.overall.state')
    local es_status=$(curl -s "$ELASTICSEARCH_URL/_cluster/health" | jq -r '.status')
    
    echo "‚úÖ Kibana —Å—Ç–∞—Ç—É—Å: $kibana_status"
    echo "‚úÖ Elasticsearch —Å—Ç–∞—Ç—É—Å: $es_status"
}

# –°–æ–∑–¥–∞–Ω–∏–µ index pattern
create_index_pattern() {
    echo "üìã –°–æ–∑–¥–∞–Ω–∏–µ index pattern '$INDEX_PATTERN'..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
    local indices_count=$(curl -s "$ELASTICSEARCH_URL/_cat/indices/$INDEX_PATTERN?h=index" | wc -l)
    if [ "$indices_count" -eq 0 ]; then
        echo "‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å—ã $INDEX_PATTERN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–≥–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ Elasticsearch."
        return 1
    fi
    
    echo "üìä –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: $indices_count"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ index pattern —á–µ—Ä–µ–∑ Kibana API
    local response=$(curl -s -X POST "$KIBANA_URL/api/saved_objects/index-pattern/erni-ki-logs" \
        -H "Content-Type: application/json" \
        -H "kbn-xsrf: true" \
        -d '{
            "attributes": {
                "title": "'"$INDEX_PATTERN"'",
                "timeFieldName": "@timestamp",
                "fields": "[{\"name\":\"@timestamp\",\"type\":\"date\",\"searchable\":true,\"aggregatable\":true},{\"name\":\"cluster\",\"type\":\"string\",\"searchable\":true,\"aggregatable\":true},{\"name\":\"container_name\",\"type\":\"string\",\"searchable\":true,\"aggregatable\":true},{\"name\":\"environment\",\"type\":\"string\",\"searchable\":true,\"aggregatable\":true},{\"name\":\"log\",\"type\":\"string\",\"searchable\":true,\"aggregatable\":false},{\"name\":\"log_source\",\"type\":\"string\",\"searchable\":true,\"aggregatable\":true}]"
            }
        }')
    
    if echo "$response" | jq -e '.id' >/dev/null 2>&1; then
        echo "‚úÖ Index pattern —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ö†Ô∏è  Index pattern –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
        echo "Response: $response"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
create_saved_searches() {
    echo "üîç –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤..."
    
    # OpenWebUI Errors
    curl -s -X POST "$KIBANA_URL/api/saved_objects/search/openwebui-errors" \
        -H "Content-Type: application/json" \
        -H "kbn-xsrf: true" \
        -d '{
            "attributes": {
                "title": "OpenWebUI Errors",
                "description": "–û—à–∏–±–∫–∏ OpenWebUI —Å–µ—Ä–≤–∏—Å–∞",
                "hits": 0,
                "columns": ["@timestamp", "container_name", "log"],
                "sort": [["@timestamp", "desc"]],
                "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"index\":\"erni-ki-logs\",\"query\":{\"match\":{\"container_name\":\"/erni-ki-openwebui-1\"}},\"filter\":[{\"query\":{\"bool\":{\"should\":[{\"wildcard\":{\"log\":\"*error*\"}},{\"wildcard\":{\"log\":\"*ERROR*\"}}]}}}]}"
                }
            }
        }' >/dev/null
    
    # nginx Access Logs
    curl -s -X POST "$KIBANA_URL/api/saved_objects/search/nginx-access-logs" \
        -H "Content-Type: application/json" \
        -H "kbn-xsrf: true" \
        -d '{
            "attributes": {
                "title": "nginx Access Logs",
                "description": "–õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–∞ nginx (–±–µ–∑ –æ—à–∏–±–æ–∫)",
                "hits": 0,
                "columns": ["@timestamp", "container_name", "log"],
                "sort": [["@timestamp", "desc"]],
                "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"index\":\"erni-ki-logs\",\"query\":{\"match\":{\"container_name\":\"/erni-ki-nginx-1\"}},\"filter\":[{\"query\":{\"bool\":{\"must_not\":[{\"wildcard\":{\"log\":\"*error*\"}}]}}}]}"
                }
            }
        }' >/dev/null
    
    # Database Slow Queries
    curl -s -X POST "$KIBANA_URL/api/saved_objects/search/db-slow-queries" \
        -H "Content-Type: application/json" \
        -H "kbn-xsrf: true" \
        -d '{
            "attributes": {
                "title": "Database Slow Queries",
                "description": "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã PostgreSQL",
                "hits": 0,
                "columns": ["@timestamp", "container_name", "log"],
                "sort": [["@timestamp", "desc"]],
                "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"index\":\"erni-ki-logs\",\"query\":{\"match\":{\"container_name\":\"/erni-ki-db-1\"}},\"filter\":[{\"query\":{\"wildcard\":{\"log\":\"*duration*\"}}}]}"
                }
            }
        }' >/dev/null
    
    # All Container Errors
    curl -s -X POST "$KIBANA_URL/api/saved_objects/search/all-container-errors" \
        -H "Content-Type: application/json" \
        -H "kbn-xsrf: true" \
        -d '{
            "attributes": {
                "title": "All Container Errors",
                "description": "–í—Å–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤",
                "hits": 0,
                "columns": ["@timestamp", "container_name", "log"],
                "sort": [["@timestamp", "desc"]],
                "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{\"index\":\"erni-ki-logs\",\"query\":{\"exists\":{\"field\":\"container_name\"}},\"filter\":[{\"query\":{\"bool\":{\"should\":[{\"wildcard\":{\"log\":\"*error*\"}},{\"wildcard\":{\"log\":\"*ERROR*\"}},{\"wildcard\":{\"log\":\"*exception*\"}}]}}}]}"
                }
            }
        }' >/dev/null
    
    echo "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö
verify_data() {
    echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö..."
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local total_docs=$(curl -s "$ELASTICSEARCH_URL/$INDEX_PATTERN/_count" | jq '.count')
    echo "üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: $total_docs"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
    echo "üê≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º:"
    curl -s "$ELASTICSEARCH_URL/$INDEX_PATTERN/_search" \
        -H "Content-Type: application/json" \
        -d '{
            "size": 0,
            "aggs": {
                "containers": {
                    "terms": {
                        "field": "container_name.keyword",
                        "size": 20
                    }
                }
            }
        }' | jq -r '.aggregations.containers.buckets[] | "   üîπ " + .key + ": " + (.doc_count | tostring) + " –ª–æ–≥–æ–≤"'
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    echo "üè∑Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:"
    local sample=$(curl -s "$ELASTICSEARCH_URL/$INDEX_PATTERN/_search?size=1" | jq '.hits.hits[0]._source')
    
    if echo "$sample" | jq -e '.cluster' >/dev/null; then
        echo "   ‚úÖ cluster: $(echo "$sample" | jq -r '.cluster')"
    else
        echo "   ‚ùå cluster: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
    if echo "$sample" | jq -e '.environment' >/dev/null; then
        echo "   ‚úÖ environment: $(echo "$sample" | jq -r '.environment')"
    else
        echo "   ‚ùå environment: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
    if echo "$sample" | jq -e '.log_source' >/dev/null; then
        echo "   ‚úÖ log_source: $(echo "$sample" | jq -r '.log_source')"
    else
        echo "   ‚ùå log_source: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_services
    create_index_pattern
    create_saved_searches
    verify_data
    
    echo ""
    echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kibana –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:"
    echo "   üåê Kibana: $KIBANA_URL"
    echo "   üìä Index Pattern: $INDEX_PATTERN"
    echo "   üîç Discover: $KIBANA_URL/app/discover"
    echo ""
    echo "üîç –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏:"
    echo "   ‚Ä¢ OpenWebUI Errors"
    echo "   ‚Ä¢ nginx Access Logs"
    echo "   ‚Ä¢ Database Slow Queries"
    echo "   ‚Ä¢ All Container Errors"
    echo ""
    echo "üìñ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "   1. –û—Ç–∫—Ä–æ–π—Ç–µ Kibana –≤ –±—Ä–∞—É–∑–µ—Ä–µ: $KIBANA_URL"
    echo "   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Discover –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤"
    echo "   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏"
    echo "   4. –°–æ–∑–¥–∞–π—Ç–µ –¥–∞—à–±–æ—Ä–¥—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"
}

main "$@"
