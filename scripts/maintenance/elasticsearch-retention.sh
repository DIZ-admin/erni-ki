#!/bin/bash
# ERNI-KI Elasticsearch Index Retention Management
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ retention policy –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤ Elasticsearch

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ELASTICSEARCH_URL="http://localhost:9200"
INDEX_PREFIX="erni-ki"
RETENTION_DAYS=7
CRITICAL_RETENTION_DAYS=30

echo "üóÑÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ retention policy Elasticsearch - $(date)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Elasticsearch
check_elasticsearch() {
    if ! curl -s "$ELASTICSEARCH_URL/_cluster/health" >/dev/null; then
        echo "‚ùå Elasticsearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É $ELASTICSEARCH_URL"
        exit 1
    fi
    
    local status=$(curl -s "$ELASTICSEARCH_URL/_cluster/health" | jq -r '.status')
    echo "‚úÖ Elasticsearch –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: $status"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
get_indices() {
    curl -s "$ELASTICSEARCH_URL/_cat/indices/${INDEX_PREFIX}-*?h=index,creation.date.string,docs.count,store.size&s=creation.date" | \
    while read index creation_date docs_count store_size; do
        echo "$index|$creation_date|$docs_count|$store_size"
    done
}

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
cleanup_old_indices() {
    local retention_days=$1
    local cutoff_date=$(date -d "$retention_days days ago" +%Y.%m.%d)
    
    echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–∞—Ä—à–µ $retention_days –¥–Ω–µ–π (–¥–æ $cutoff_date)..."
    
    local deleted_count=0
    local total_size="0"
    
    get_indices | while IFS='|' read index creation_date docs_count store_size; do
        # –ò–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ –∏–Ω–¥–µ–∫—Å–∞ (—Ñ–æ—Ä–º–∞—Ç: erni-ki-YYYY.MM.DD)
        local index_date=$(echo "$index" | grep -oE '[0-9]{4}\.[0-9]{2}\.[0-9]{2}$' || echo "")
        
        if [ -n "$index_date" ] && [ "$index_date" \< "$cutoff_date" ]; then
            echo "   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: $index ($creation_date, $docs_count docs, $store_size)"
            
            if curl -s -X DELETE "$ELASTICSEARCH_URL/$index" | jq -r '.acknowledged' | grep -q true; then
                echo "      ‚úÖ –£–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                deleted_count=$((deleted_count + 1))
            else
                echo "      ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"
            fi
        fi
    done
    
    if [ $deleted_count -eq 0 ]; then
        echo "   ‚ÑπÔ∏è  –ù–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
    else
        echo "   üìä –£–¥–∞–ª–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: $deleted_count"
    fi
}

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
optimize_indices() {
    echo "‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤..."
    
    # –§–æ—Ä—Å–∏—Ä–æ–≤–∞—Ç—å merge –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è
    local yesterday=$(date -d "1 day ago" +%Y.%m.%d)
    
    get_indices | while IFS='|' read index creation_date docs_count store_size; do
        local index_date=$(echo "$index" | grep -oE '[0-9]{4}\.[0-9]{2}\.[0-9]{2}$' || echo "")
        
        if [ -n "$index_date" ] && [ "$index_date" \< "$yesterday" ]; then
            echo "   üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞: $index"
            curl -s -X POST "$ELASTICSEARCH_URL/$index/_forcemerge?max_num_segments=1" >/dev/null || true
        fi
    done
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
show_statistics() {
    echo ""
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ Elasticsearch:"
    echo "   üîó URL: $ELASTICSEARCH_URL"
    echo "   üìÖ Retention: $RETENTION_DAYS –¥–Ω–µ–π (–æ–±—ã—á–Ω—ã–µ), $CRITICAL_RETENTION_DAYS –¥–Ω–µ–π (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)"
    echo ""
    
    local total_indices=0
    local total_docs=0
    local total_size_mb=0
    
    echo "   üìã –¢–µ–∫—É—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã:"
    get_indices | while IFS='|' read index creation_date docs_count store_size; do
        echo "      üìÅ $index: $docs_count docs, $store_size ($creation_date)"
        total_indices=$((total_indices + 1))
        total_docs=$((total_docs + docs_count))
    done
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
    local cluster_stats=$(curl -s "$ELASTICSEARCH_URL/_cluster/stats")
    local total_size=$(echo "$cluster_stats" | jq -r '.indices.store.size_in_bytes // 0')
    local total_size_mb=$((total_size / 1024 / 1024))
    
    echo ""
    echo "   üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    echo "      üóÇÔ∏è  –í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤: $(echo "$cluster_stats" | jq -r '.indices.count // 0')"
    echo "      üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: $(echo "$cluster_stats" | jq -r '.indices.docs.count // 0')"
    echo "      üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${total_size_mb}MB"
    echo "      üñ•Ô∏è  –£–∑–ª–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ: $(echo "$cluster_stats" | jq -r '.nodes.count.total // 0')"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    check_elasticsearch
    
    case "${1:-cleanup}" in
        "cleanup")
            cleanup_old_indices $RETENTION_DAYS
            ;;
        "optimize")
            optimize_indices
            ;;
        "stats")
            show_statistics
            ;;
        "full")
            cleanup_old_indices $RETENTION_DAYS
            optimize_indices
            show_statistics
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [cleanup|optimize|stats|full]"
            echo "  cleanup  - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  optimize - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã"
            echo "  stats    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            echo "  full     - –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
            exit 1
            ;;
    esac
}

main "$@"

echo ""
echo "‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ retention policy –∑–∞–≤–µ—Ä—à–µ–Ω–æ - $(date)"
