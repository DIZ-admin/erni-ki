#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ OCR –≤ Docling
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ Tesseract –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å EasyOCR

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

section() {
    echo ""
    echo -e "${BLUE}=== $1 ===${NC}"
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container_status() {
    section "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Docling"
    
    if docker ps --filter "name=docling" --format "{{.Status}}" | grep -q "healthy"; then
        success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Docling —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∑–¥–æ—Ä–æ–≤"
        docker ps --filter "name=docling" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    else
        error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Docling –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ–∑–¥–æ—Ä–æ–≤"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
check_api_health() {
    section "–ü—Ä–æ–≤–µ—Ä–∫–∞ API Docling"
    
    local start_time=$(date +%s.%N)
    if curl -s --max-time 5 http://localhost:5001/health | grep -q "ok"; then
        local end_time=$(date +%s.%N)
        local duration=$(echo "$end_time - $start_time" | bc -l)
        success "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${duration}s)"
    else
        error "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏ OCR
check_ocr_errors() {
    section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏ OCR"
    
    local tesseract_errors=$(docker logs erni-ki-docling-1 --tail 100 2>&1 | grep -c "OSD failed" || true)
    local easyocr_errors=$(docker logs erni-ki-docling-1 --tail 100 2>&1 | grep -c "is not supported" || true)
    
    if [[ $tesseract_errors -eq 0 ]]; then
        success "–û—à–∏–±–∫–∏ Tesseract OSD –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    else
        warning "–ù–∞–π–¥–µ–Ω–æ $tesseract_errors –æ—à–∏–±–æ–∫ Tesseract OSD –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å—Ç—Ä–æ–∫–∞—Ö"
    fi
    
    if [[ $easyocr_errors -eq 0 ]]; then
        success "–û—à–∏–±–∫–∏ EasyOCR –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    else
        warning "–ù–∞–π–¥–µ–Ω–æ $easyocr_errors –æ—à–∏–±–æ–∫ EasyOCR –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å—Ç—Ä–æ–∫–∞—Ö"
    fi
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    local total_errors=$((tesseract_errors + easyocr_errors))
    if [[ $total_errors -gt 0 ]]; then
        log "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ OCR:"
        docker logs erni-ki-docling-1 --tail 20 2>&1 | grep -E "(ERROR|WARN)" || echo "–ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å—Ç—Ä–æ–∫–∞—Ö"
    fi
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ OCR
test_ocr_functionality() {
    section "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ OCR"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    local test_file="/tmp/docling_ocr_test.html"
    cat > "$test_file" << 'EOF'
<!DOCTYPE html>
<html>
<head><title>OCR Test</title></head>
<body>
    <h1>OCR Functionality Test</h1>
    <p>This document tests OCR processing capabilities.</p>
    <p>English text for recognition testing.</p>
</body>
</html>
EOF
    
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HTML ‚Üí Markdown..."
    local test_result=$(curl -s --max-time 30 -X POST "http://localhost:5001/v1alpha/convert/file" \
        -H "Content-Type: multipart/form-data" \
        -F "files=@$test_file" \
        -F "output_format=markdown")
    
    if echo "$test_result" | grep -q "OCR Functionality Test"; then
        success "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ"
        log "–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"
        echo "$test_result" | jq -r '.document.md_content' 2>/dev/null || echo "$test_result"
    else
        error "–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é OCR"
        log "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $test_result"
        return 1
    fi
    
    # –û—á–∏—Å—Ç–∫–∞
    rm -f "$test_file"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OCR
check_ocr_configuration() {
    section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OCR"
    
    log "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OCR –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:"
    docker exec erni-ki-docling-1 env | grep -E "(OCR|TESSERACT|EASYOCR|DOCLING)" || echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ OCR –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    echo ""
    log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ env/docling.env:"
    grep -E "(OCR|TESSERACT|EASYOCR)" env/docling.env || echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ OCR –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenWebUI
check_openwebui_integration() {
    section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenWebUI"
    
    log "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ OpenWebUI:"
    docker exec erni-ki-openwebui-1 env | grep -E "(DOCLING|CONTENT_EXTRACTION)" || echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ OpenWebUI –∫ Docling
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è OpenWebUI ‚Üí Docling..."
    if docker exec erni-ki-openwebui-1 curl -s --max-time 5 http://docling:5001/health | grep -q "ok"; then
        success "OpenWebUI –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Docling"
    else
        warning "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º OpenWebUI –∫ Docling"
    fi
}

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
show_summary() {
    section "–ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å OCR –≤ Docling"
    
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:"
    echo "  ‚Ä¢ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Docling: $(docker ps --filter 'name=docling' --format '{{.Status}}')"
    echo "  ‚Ä¢ API Health: $(curl -s http://localhost:5001/health 2>/dev/null || echo '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω')"
    echo "  ‚Ä¢ OCR –¥–≤–∏–∂–æ–∫: EasyOCR (–Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
    echo "  ‚Ä¢ –Ø–∑—ã–∫–∏: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (en)"
    
    echo ""
    echo "üîó –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  ‚Ä¢ –õ–æ–≥–∏: docker logs erni-ki-docling-1 --tail 50"
    echo "  ‚Ä¢ API —Ç–µ—Å—Ç: curl http://localhost:5001/health"
    echo "  ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:5001/docs"
    
    echo ""
    echo "üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    echo "  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ OCR"
    echo "  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    echo "  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ OCR –≤ Docling - ERNI-KI"
    echo "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ Tesseract –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å EasyOCR"
    echo ""
    
    local exit_code=0
    
    check_container_status || exit_code=1
    check_api_health || exit_code=1
    check_ocr_errors
    test_ocr_functionality || exit_code=1
    check_ocr_configuration
    check_openwebui_integration
    show_summary
    
    if [[ $exit_code -eq 0 ]]; then
        success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ OCR –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
    else
        error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å OCR. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
    fi
    
    return $exit_code
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
