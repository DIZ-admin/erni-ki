#!/bin/bash

# üîç ERNI-KI Health Monitor Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ PostgreSQL
# –°–æ–∑–¥–∞–Ω–æ: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü, Tech Lead

set -euo pipefail

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
LOG_DIR="$PROJECT_DIR/.config-backup/monitoring"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
REPORT_FILE="$LOG_DIR/health-report-$TIMESTAMP.md"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
mkdir -p "$LOG_DIR"

# === –¶–í–ï–¢–ê –î–õ–Ø –í–´–í–û–î–ê ===
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# === –§–£–ù–ö–¶–ò–ò ===
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$REPORT_FILE"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$REPORT_FILE"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$REPORT_FILE"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$REPORT_FILE"
}

# === –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–û–í ===
check_services() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ï–†–í–ò–°–û–í ==="

    cd "$PROJECT_DIR"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    local services_status
    services_status=$(docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Health}}" 2>/dev/null || echo "ERROR: Cannot get services status")

    if [[ "$services_status" == "ERROR:"* ]]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
        return 1
    fi

    echo "$services_status" >> "$REPORT_FILE"

    # –ü–æ–¥—Å—á–µ—Ç healthy —Å–µ—Ä–≤–∏—Å–æ–≤
    local total_services healthy_services unhealthy_services
    total_services=$(echo "$services_status" | grep -c "erni-ki-" || echo "0")
    healthy_services=$(echo "$services_status" | grep -c "healthy" || echo "0")
    unhealthy_services=$((total_services - healthy_services))

    log_info "–í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: $total_services"
    log_info "Healthy —Å–µ—Ä–≤–∏—Å–æ–≤: $healthy_services"

    if [[ $unhealthy_services -gt 0 ]]; then
        log_warning "Unhealthy —Å–µ—Ä–≤–∏—Å–æ–≤: $unhealthy_services"
        return 1
    else
        log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ healthy"
        return 0
    fi
}

# === –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö ===
check_critical_errors() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç) ==="

    cd "$PROJECT_DIR"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
    local critical_services=("db" "openwebui" "ollama" "nginx" "litellm")
    local total_errors=0

    for service in "${critical_services[@]}"; do
        local error_count
        error_count=$(docker-compose logs "$service" --since 30m 2>/dev/null | grep -c -E "(ERROR|FATAL|CRITICAL)" || echo "0")

        if [[ "$error_count" =~ ^[0-9]+$ ]] && [[ $error_count -gt 0 ]]; then
            log_warning "$service: $error_count –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç"
            total_errors=$((total_errors + error_count))
        else
            log_success "$service: –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"
        fi
    done

    if [[ $total_errors -gt 5 ]]; then
        log_error "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫: $total_errors (–ø–æ—Ä–æ–≥: 5)"
        return 1
    else
        log_success "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã: $total_errors"
        return 0
    fi
}

# === –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò RAG ===
check_rag_performance() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò RAG ==="

    local start_time end_time duration
    start_time=$(date +%s.%N)

    # –¢–µ—Å—Ç RAG –ø–æ–∏—Å–∫–∞
    local rag_result
    rag_result=$(curl -s -w "%{time_total}" "http://localhost:8080/searxng/search?q=test&format=json" 2>/dev/null | tail -1 || echo "ERROR")

    end_time=$(date +%s.%N)
    duration=$(echo "$end_time - $start_time" | bc -l 2>/dev/null || echo "0")

    if [[ "$rag_result" == "ERROR" ]]; then
        log_error "RAG –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (—Ü–µ–ª—å <2s)
    if (( $(echo "$duration > 2.0" | bc -l) )); then
        log_warning "RAG –ø–æ–∏—Å–∫ –º–µ–¥–ª–µ–Ω–Ω—ã–π: ${duration}s (—Ü–µ–ª—å <2s)"
        return 1
    else
        log_success "RAG –ø–æ–∏—Å–∫ –±—ã—Å—Ç—Ä—ã–π: ${duration}s"
        return 0
    fi
}

# === –ü–†–û–í–ï–†–ö–ê POSTGRESQL ===
check_postgresql() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê POSTGRESQL pg17 ==="

    cd "$PROJECT_DIR"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PostgreSQL
    local pg_version
    pg_version=$(docker-compose exec -T db psql -U postgres -c "SELECT version();" 2>/dev/null | grep "PostgreSQL" || echo "ERROR")

    if [[ "$pg_version" == "ERROR" ]]; then
        log_error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi

    if [[ "$pg_version" == *"PostgreSQL 17"* ]]; then
        log_success "PostgreSQL 17 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log_warning "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è PostgreSQL: $pg_version"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pgvector
    local pgvector_version
    pgvector_version=$(docker-compose exec -T db psql -U postgres -c "SELECT extversion FROM pg_extension WHERE extname='vector';" 2>/dev/null | grep -E "0\.[0-9]" || echo "ERROR")

    if [[ "$pgvector_version" == "ERROR" ]]; then
        log_error "pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        return 1
    else
        log_success "pgvector –≤–µ—Ä—Å–∏—è: $pgvector_version"
        return 0
    fi
}

# === –ü–†–û–í–ï–†–ö–ê WEBSOCKET –ü–†–û–ë–õ–ï–ú ===
check_websocket_issues() {
    log_info "=== –ü–†–û–í–ï–†–ö–ê WEBSOCKET –ü–†–û–ë–õ–ï–ú ==="

    cd "$PROJECT_DIR"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 400 –æ—à–∏–±–æ–∫ WebSocket –≤ OpenWebUI
    local websocket_errors
    websocket_errors=$(docker-compose logs openwebui --since 30m 2>/dev/null | grep -c "socket.io.*400" || echo "0")

    if [[ $websocket_errors -gt 10 ]]; then
        log_warning "–ú–Ω–æ–≥–æ WebSocket 400 –æ—à–∏–±–æ–∫: $websocket_errors (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω)"
        log_info "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å Redis –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"
        return 1
    elif [[ $websocket_errors -gt 0 ]]; then
        log_info "WebSocket 400 –æ—à–∏–±–∫–∏: $websocket_errors (–æ–∂–∏–¥–∞–µ–º–æ, WebSocket –æ—Ç–∫–ª—é—á–µ–Ω)"
        return 0
    else
        log_success "–ù–µ—Ç WebSocket –æ—à–∏–±–æ–∫"
        return 0
    fi
}

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
main() {
    log_info "üîç ERNI-KI Health Monitor - $(date)"
    log_info "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $REPORT_FILE"
    echo "" >> "$REPORT_FILE"

    local exit_code=0

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_services || exit_code=1
    echo "" >> "$REPORT_FILE"

    check_critical_errors || exit_code=1
    echo "" >> "$REPORT_FILE"

    check_rag_performance || exit_code=1
    echo "" >> "$REPORT_FILE"

    check_postgresql || exit_code=1
    echo "" >> "$REPORT_FILE"

    check_websocket_issues || exit_code=1
    echo "" >> "$REPORT_FILE"

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    if [[ $exit_code -eq 0 ]]; then
        log_success "üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
        log_success "–°–∏—Å—Ç–µ–º–∞ ERNI-KI —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"
    else
        log_warning "‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´"
        log_warning "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    fi

    log_info "–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å"

    return $exit_code
}

# === –ó–ê–ü–£–°–ö ===
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
