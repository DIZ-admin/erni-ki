#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ERNI-KI
# –ê–≤—Ç–æ—Ä: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü (Tech Lead)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() { echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; exit 1; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # Docker
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
    fi
    success "Docker –Ω–∞–π–¥–µ–Ω: $(docker --version)"
    
    # Docker Compose
    if ! command -v docker compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    success "Docker Compose –Ω–∞–π–¥–µ–Ω: $(docker compose version)"
    
    # Node.js (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if command -v node &> /dev/null; then
        success "Node.js –Ω–∞–π–¥–µ–Ω: $(node --version)"
    else
        warning "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"
    fi
    
    # Go (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if command -v go &> /dev/null; then
        success "Go –Ω–∞–π–¥–µ–Ω: $(go version)"
    else
        warning "Go –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Å–±–æ—Ä–∫–∏ auth —Å–µ—Ä–≤–∏—Å–∞)"
    fi
    
    # OpenSSL –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
    if ! command -v openssl &> /dev/null; then
        error "OpenSSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π)"
    fi
    success "OpenSSL –Ω–∞–π–¥–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    directories=("data" "data/postgres" "data/redis" "data/ollama" "data/openwebui" "scripts" "logs")
    
    for dir in "${directories[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            success "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
        else
            success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $dir"
        fi
    done
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤
    chmod 755 data/
    chmod 700 data/postgres
    success "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
copy_config_files() {
    log "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # Docker Compose
    if [ ! -f "compose.yml" ]; then
        cp compose.yml.example compose.yml
        success "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω compose.yml"
    else
        warning "compose.yml —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    config_files=(
        "conf/cloudflare/config.example:conf/cloudflare/config.yml"
        "conf/mcposerver/config.example:conf/mcposerver/config.json"
        "conf/nginx/nginx.example:conf/nginx/nginx.conf"
        "conf/nginx/conf.d/default.example:conf/nginx/conf.d/default.conf"
        "conf/searxng/settings.yml.example:conf/searxng/settings.yml"
        "conf/searxng/uwsgi.ini.example:conf/searxng/uwsgi.ini"
    )
    
    for config in "${config_files[@]}"; do
        src="${config%:*}"
        dst="${config#*:}"
        
        if [ -f "$src" ] && [ ! -f "$dst" ]; then
            cp "$src" "$dst"
            success "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $dst"
        elif [ ! -f "$src" ]; then
            warning "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $src"
        else
            warning "–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $dst"
        fi
    done
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
copy_env_files() {
    log "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    env_files=(
        "auth" "cloudflared" "db" "docling" "edgetts" 
        "mcposerver" "ollama" "openwebui" "redis" 
        "searxng" "tika" "watchtower"
    )
    
    for env_file in "${env_files[@]}"; do
        src="env/${env_file}.example"
        dst="env/${env_file}.env"
        
        if [ -f "$src" ] && [ ! -f "$dst" ]; then
            cp "$src" "$dst"
            success "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $dst"
        elif [ ! -f "$src" ]; then
            warning "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $src"
        else
            warning "–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $dst"
        fi
    done
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
generate_secrets() {
    log "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π..."
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    SECRET_KEY=$(openssl rand -hex 32)
    DB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    
    success "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -f "env/auth.env" ]; then
        sed -i "s/CHANGE_BEFORE_GOING_LIVE/$SECRET_KEY/g" env/auth.env
        success "–û–±–Ω–æ–≤–ª–µ–Ω JWT_SECRET –≤ env/auth.env"
    fi
    
    if [ -f "env/openwebui.env" ]; then
        sed -i "s/CHANGE_BEFORE_GOING_LIVE/$SECRET_KEY/g" env/openwebui.env
        sed -i "s/postgres:postgres@db/postgres:$DB_PASSWORD@db/g" env/openwebui.env
        success "–û–±–Ω–æ–≤–ª–µ–Ω WEBUI_SECRET_KEY –≤ env/openwebui.env"
    fi
    
    if [ -f "env/db.env" ]; then
        sed -i "s/POSTGRES_PASSWORD=postgres/POSTGRES_PASSWORD=$DB_PASSWORD/g" env/db.env
        success "–û–±–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å –ë–î –≤ env/db.env"
    fi
    
    if [ -f "env/searxng.env" ]; then
        sed -i "s/YOUR-SECRET-KEY/$SECRET_KEY/g" env/searxng.env
        success "–û–±–Ω–æ–≤–ª–µ–Ω SEARXNG_SECRET –≤ env/searxng.env"
    fi
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
    cat > .secrets_backup << EOF
# ERNI-KI –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ - $(date)
# –í–ù–ò–ú–ê–ù–ò–ï: –•—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!

SECRET_KEY=$SECRET_KEY
DB_PASSWORD=$DB_PASSWORD

# –≠—Ç–∏ –∫–ª—é—á–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
EOF
    
    chmod 600 .secrets_backup
    success "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .secrets_backup"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞
setup_domain() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞..."
    
    echo -n "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è localhost): "
    read -r domain
    
    if [ -z "$domain" ]; then
        domain="localhost"
        warning "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localhost (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)"
    else
        success "–ù–∞—Å—Ç—Ä–æ–µ–Ω –¥–æ–º–µ–Ω: $domain"
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
    if [ -f "conf/nginx/conf.d/default.conf" ]; then
        sed -i "s/<domain-name>/$domain/g" conf/nginx/conf.d/default.conf
        success "–î–æ–º–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ OpenWebUI URL
    if [ -f "env/openwebui.env" ]; then
        if [ "$domain" = "localhost" ]; then
            sed -i "s|WEBUI_URL=https://<domain-name>|WEBUI_URL=http://localhost|g" env/openwebui.env
        else
            sed -i "s/<domain-name>/$domain/g" env/openwebui.env
        fi
        success "URL –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenWebUI"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudflare (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
setup_cloudflare() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudflare —Ç—É–Ω–Ω–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)..."
    
    echo -n "–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Cloudflare —Ç—É–Ω–Ω–µ–ª—å? (y/N): "
    read -r setup_cf
    
    if [[ "$setup_cf" =~ ^[Yy]$ ]]; then
        echo -n "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Cloudflare —Ç—É–Ω–Ω–µ–ª—è: "
        read -r tunnel_token
        
        if [ -n "$tunnel_token" ] && [ -f "env/cloudflared.env" ]; then
            sed -i "s/add-your-cloudflare-tunnel-token-here/$tunnel_token/g" env/cloudflared.env
            success "–¢–æ–∫–µ–Ω Cloudflare –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            warning "–¢–æ–∫–µ–Ω –Ω–µ –≤–≤–µ–¥–µ–Ω –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    else
        success "Cloudflare —Ç—É–Ω–Ω–µ–ª—å –ø—Ä–æ–ø—É—â–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
validate_config() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if docker compose config > /dev/null 2>&1; then
        success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker Compose –≤–∞–ª–∏–¥–Ω–∞"
    else
        error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
    if grep -r "CHANGE_BEFORE_GOING_LIVE" env/ > /dev/null 2>&1; then
        error "–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏!"
    fi
    
    if grep -r "YOUR-SECRET-KEY" env/ > /dev/null 2>&1; then
        error "–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏!"
    fi
    
    success "–í—Å–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
create_helper_scripts() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤..."
    
    # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
    cat > scripts/start.sh << 'EOF'
#!/bin/bash
echo "üöÄ –ó–∞–ø—É—Å–∫ ERNI-KI..."
docker compose up -d
echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ./scripts/health_check.sh"
EOF
    
    # –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    cat > scripts/stop.sh << 'EOF'
#!/bin/bash
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ERNI-KI..."
docker compose down
echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
EOF
    
    # –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    cat > scripts/restart.sh << 'EOF'
#!/bin/bash
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ERNI-KI..."
docker compose down
docker compose up -d
echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
EOF
    
    # –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞
    cat > scripts/backup.sh << 'EOF'
#!/bin/bash
BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
docker compose exec -T db pg_dump -U postgres openwebui > "$BACKUP_DIR/database.sql"
tar -czf "$BACKUP_DIR/configs.tar.gz" env/ conf/
echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ $BACKUP_DIR"
EOF
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    chmod +x scripts/*.sh
    success "–°–æ–∑–¥–∞–Ω—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ scripts/"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    ERNI-KI Setup Script                     ‚ïë"
    echo "‚ïë              –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã           ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    check_dependencies
    echo ""
    
    create_directories
    echo ""
    
    copy_config_files
    echo ""
    
    copy_env_files
    echo ""
    
    generate_secrets
    echo ""
    
    setup_domain
    echo ""
    
    setup_cloudflare
    echo ""
    
    validate_config
    echo ""
    
    create_helper_scripts
    echo ""
    
    echo -e "${GREEN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!                     ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë  –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:                                             ‚ïë"
    echo "‚ïë  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/start.sh                           ‚ïë"
    echo "‚ïë  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: ./scripts/health_check.sh                    ‚ïë"
    echo "‚ïë  3. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost (–∏–ª–∏ –≤–∞—à –¥–æ–º–µ–Ω)              ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë  –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: DEPLOYMENT_GUIDE.md                          ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
