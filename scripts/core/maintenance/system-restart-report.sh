#!/bin/bash

# –û—Ç—á–µ—Ç –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ERNI-KI —Å–∏—Å—Ç–µ–º—ã
# –ê–≤—Ç–æ—Ä: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü (ERNI-KI Tech Lead)
# –î–∞—Ç–∞: $(date '+%Y-%m-%d %H:%M:%S')

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
check_all_services() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."

    local services=(
        "auth"
        "backrest"
        "db"
        "docling"
        "edgetts"
        "litellm"
        "mcposerver"
        "nginx"
        "ollama"
        "openwebui"
        "redis"
        "searxng"
        "tika"
        "watchtower"
        "cloudflared"
    )

    local healthy_count=0
    local total_count=${#services[@]}

    echo ""
    echo "=== –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í ==="
    printf "%-15s %-10s %-20s\n" "SERVICE" "STATUS" "HEALTH"
    echo "----------------------------------------"

    for service in "${services[@]}"; do
        local status=$(docker-compose ps "$service" --format "{{.Status}}" 2>/dev/null || echo "Not found")

        if [[ "$status" == *"healthy"* ]]; then
            printf "%-15s %-10s %-20s\n" "$service" "‚úÖ UP" "üü¢ HEALTHY"
            ((healthy_count++))
        elif [[ "$status" == *"Up"* ]]; then
            printf "%-15s %-10s %-20s\n" "$service" "‚úÖ UP" "üü° NO HEALTH"
            ((healthy_count++))
        elif [[ "$status" == "Not found" ]]; then
            printf "%-15s %-10s %-20s\n" "$service" "‚ùå DOWN" "üî¥ NOT FOUND"
        else
            printf "%-15s %-10s %-20s\n" "$service" "‚ùå DOWN" "üî¥ UNHEALTHY"
        fi
    done

    echo "----------------------------------------"
    echo "–†–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: $healthy_count/$total_count"

    if [ $healthy_count -eq $total_count ]; then
        success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        return 0
    else
        warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
check_web_access() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."

    local url="https://diz.zone"
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null || echo "000")

    if [ "$response" = "200" ]; then
        success "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω: $url (HTTP $response)"
        return 0
    else
        error "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $url (HTTP $response)"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
check_integrations() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π..."

    echo ""
    echo "=== –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ô ==="

    # TTS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EdgeTTS..."
    if curl -s -H "Authorization: Bearer your_api_key_here" \
        http://localhost:5050/v1/audio/voices >/dev/null 2>&1; then
        success "EdgeTTS API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "EdgeTTS API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi

    # Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama..."
    if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
        success "Ollama API —Ä–∞–±–æ—Ç–∞–µ—Ç"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
        local models=$(curl -s http://localhost:11434/api/tags | jq -r '.models | length' 2>/dev/null || echo "0")
        if [ "$models" -gt 0 ]; then
            success "–î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: $models"
        else
            warning "–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        fi
    else
        error "Ollama API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi

    # PostgreSQL –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL..."
    if docker-compose exec -T db pg_isready >/dev/null 2>&1; then
        success "PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "PostgreSQL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi

    # SearXNG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SearXNG..."
    if curl -s http://localhost:8080/search?q=test >/dev/null 2>&1; then
        success "SearXNG —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        error "SearXNG –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
check_system_resources() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã..."

    echo ""
    echo "=== –†–ï–°–£–†–°–´ –°–ò–°–¢–ï–ú–´ ==="

    # CPU
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
    echo "CPU Usage: ${cpu_usage}%"

    # Memory
    local mem_info=$(free -h | grep "Mem:")
    echo "Memory: $mem_info"

    # Disk
    local disk_usage=$(df -h / | tail -1 | awk '{print $5}')
    echo "Disk Usage: $disk_usage"

    # Docker
    local containers=$(docker ps | wc -l)
    echo "Running Containers: $((containers-1))"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "=================================================="
    echo "üîÑ –û–¢–ß–ï–¢ –û –ü–ï–†–ï–ó–ê–ü–£–°–ö–ï ERNI-KI –°–ò–°–¢–ï–ú–´"
    echo "=================================================="
    echo "–î–∞—Ç–∞: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "–•–æ—Å—Ç: $(hostname)"
    echo ""

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    local all_good=true

    if ! check_all_services; then
        all_good=false
    fi
    echo ""

    if ! check_web_access; then
        all_good=false
    fi
    echo ""

    check_integrations
    echo ""

    check_system_resources
    echo ""

    echo "=================================================="
    if [ "$all_good" = true ]; then
        success "üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!"
        echo ""
        echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
        echo "‚Ä¢ OpenWebUI: https://diz.zone"
        echo "‚Ä¢ Grafana: http://localhost:3000"
        echo "‚Ä¢ Backrest: http://localhost:9898"
        echo "‚Ä¢ LiteLLM: http://localhost:4000"
        echo ""
        echo "üîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
        echo "‚Ä¢ Email: diz-admin@proton.me"
        echo "‚Ä¢ –ü–∞—Ä–æ–ª—å: testpass"
    else
        warning "‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò"
        echo ""
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
        echo "docker-compose logs [service-name]"
    fi
    echo "=================================================="
}

# –ó–∞–ø—É—Å–∫
main "$@"
