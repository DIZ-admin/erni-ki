#!/bin/bash

# ERNI-KI Admin Models Display Test Script
# –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ OpenWebUI

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_URL="https://192.168.62.140/admin/settings/models"
LOCAL_URL="http://localhost:8080"

echo -e "${BLUE}üîç ERNI-KI Admin Models Display Test${NC}"
echo "=================================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoint
test_api_endpoint() {
    local endpoint=$1
    local description=$2

    echo -n "Testing $description... "

    local response=$(curl -s --max-time 10 "$LOCAL_URL$endpoint" 2>/dev/null || echo "ERROR")
    local http_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$LOCAL_URL$endpoint" 2>/dev/null || echo "000")

    if [ "$http_code" = "200" ]; then
        echo -e "${GREEN}‚úÖ OK (HTTP $http_code)${NC}"
        return 0
    elif [ "$http_code" = "403" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Authentication required (HTTP $http_code)${NC}"
        return 1
    else
        echo -e "${RED}‚ùå Failed (HTTP $http_code)${NC}"
        return 2
    fi
}

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
echo -e "\n${BLUE}üìä API Endpoints Tests${NC}"
echo "----------------------"

total_tests=0
passed_tests=0

# –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
((total_tests++))
if test_api_endpoint "/" "Main page"; then
    ((passed_tests++))
fi

# –¢–µ—Å—Ç health endpoint
((total_tests++))
if test_api_endpoint "/health" "Health check"; then
    ((passed_tests++))
fi

# –¢–µ—Å—Ç Ollama config
((total_tests++))
if test_api_endpoint "/ollama/config" "Ollama config"; then
    if [ $? -eq 1 ]; then ((passed_tests++)); fi  # 403 is expected without auth
fi

# –¢–µ—Å—Ç models API
((total_tests++))
if test_api_endpoint "/api/models" "Models API"; then
    if [ $? -eq 1 ]; then ((passed_tests++)); fi  # 403 is expected without auth
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
echo -e "\n${BLUE}üîó Provider Integration Tests${NC}"
echo "------------------------------"

# –¢–µ—Å—Ç Ollama —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
((total_tests++))
echo -n "Testing Ollama integration... "
if docker exec erni-ki-openwebui-1 curl -s --max-time 5 "http://ollama:11434/api/tags" | grep -q "models"; then
    echo -e "${GREEN}‚úÖ OK${NC}"
    ((passed_tests++))
else
    echo -e "${RED}‚ùå Failed${NC}"
fi

# –¢–µ—Å—Ç LiteLLM —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
((total_tests++))
echo -n "Testing LiteLLM integration... "
if docker exec erni-ki-openwebui-1 curl -s --max-time 5 -H "Authorization: Bearer sk-7b788d5ee69638c94477f639c91f128911bdf0e024978d4ba1dbdf678eba38bb" "http://litellm:4000/v1/models" | grep -q "data"; then
    echo -e "${GREEN}‚úÖ OK${NC}"
    ((passed_tests++))
else
    echo -e "${RED}‚ùå Failed${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo -e "\n${BLUE}üíæ Database Tests${NC}"
echo "------------------"

# –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –≤ –ë–î
((total_tests++))
echo -n "Testing models in database... "
model_count=$(docker exec erni-ki-openwebui-1 python -c "
import os, psycopg2
try:
    conn = psycopg2.connect(os.environ['DATABASE_URL'])
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM model')
    count = cursor.fetchone()[0]
    conn.close()
    print(count)
except: print(0)
" 2>/dev/null)

if [ "$model_count" -gt 0 ]; then
    echo -e "${GREEN}‚úÖ OK ($model_count models)${NC}"
    ((passed_tests++))
else
    echo -e "${RED}‚ùå No models found${NC}"
fi

# –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ë–î
((total_tests++))
echo -n "Testing config in database... "
config_check=$(docker exec erni-ki-openwebui-1 python -c "
import os, psycopg2, json
try:
    conn = psycopg2.connect(os.environ['DATABASE_URL'])
    cursor = conn.cursor()
    cursor.execute('SELECT data FROM config WHERE id = 1')
    result = cursor.fetchone()
    if result:
        data = result[0]
        ollama_enabled = data.get('ollama', {}).get('enable', False)
        openai_enabled = data.get('openai', {}).get('enable', False)
        print(f'ollama:{ollama_enabled},openai:{openai_enabled}')
    else:
        print('no_config')
    conn.close()
except Exception as e: print(f'error:{e}')
" 2>/dev/null)

if [[ "$config_check" == *"ollama:True"* ]] && [[ "$config_check" == *"openai:True"* ]]; then
    echo -e "${GREEN}‚úÖ OK (Providers enabled)${NC}"
    ((passed_tests++))
else
    echo -e "${RED}‚ùå Config issues: $config_check${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
echo -e "\n${BLUE}üîí Admin Panel Access${NC}"
echo "---------------------"

((total_tests++))
echo -n "Testing admin panel access... "
admin_status=$(curl -s -o /dev/null -w "%{http_code}" "$ADMIN_URL" --connect-timeout 10 -k 2>/dev/null || echo "000")

if [ "$admin_status" = "200" ]; then
    echo -e "${GREEN}‚úÖ OK (HTTP $admin_status)${NC}"
    ((passed_tests++))
elif [ "$admin_status" = "302" ] || [ "$admin_status" = "401" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Authentication required (HTTP $admin_status)${NC}"
    ((passed_tests++))
else
    echo -e "${RED}‚ùå Failed (HTTP $admin_status)${NC}"
fi

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
echo -e "\n${BLUE}üìã Test Summary${NC}"
echo "==============="
echo "Total tests: $total_tests"
echo "Passed: $passed_tests"
echo "Failed: $((total_tests - passed_tests))"

success_rate=$((passed_tests * 100 / total_tests))
echo "Success rate: $success_rate%"

echo -e "\n${BLUE}üìù Instructions for Admin Panel${NC}"
echo "================================="
echo "1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É:"
echo "   ${ADMIN_URL}"
echo ""
echo "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:"
echo "   Email: diz-admin@proton.me"
echo "   Password: [–≤–∞—à –ø–∞—Ä–æ–ª—å]"
echo ""
echo "3. –í —Ä–∞–∑–¥–µ–ª–µ Admin > Settings > Models –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:"
echo "   - 5 –º–æ–¥–µ–ª–µ–π Ollama (qwen2.5:0.5b, phi4-mini-reasoning:3.8b, –∏ –¥—Ä.)"
echo "   - 3 –º–æ–¥–µ–ª–∏ LiteLLM (local-phi4-mini, local-deepseek-r1, local-gemma3n)"
echo ""
echo "4. –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:"
echo "   - Connections –≤ —Ä–∞–∑–¥–µ–ª–µ Admin > Settings > Connections"
echo "   - Ollama connection: http://ollama:11434"
echo "   - OpenAI connection: http://litellm:4000/v1"

if [ $success_rate -ge 90 ]; then
    echo -e "\n${GREEN}üéâ Admin models setup: EXCELLENT${NC}"
    exit 0
elif [ $success_rate -ge 75 ]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è Admin models setup: GOOD${NC}"
    exit 0
else
    echo -e "\n${RED}‚ùå Admin models setup: NEEDS ATTENTION${NC}"
    exit 1
fi
