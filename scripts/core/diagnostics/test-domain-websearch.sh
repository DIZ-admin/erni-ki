#!/bin/bash

# Domain Web Search Testing Script for ERNI-KI
# –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –¥–æ–º–µ–Ω—ã

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
test_websearch() {
    local domain=$1
    local protocol=$2
    local url="${protocol}://${domain}"
    
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ ${url}..."
    
    # –¢–µ—Å—Ç API endpoint
    local api_url="${url}/api/searxng/search"
    local search_data="q=test&category_general=1&format=json"
    
    echo "  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint: ${api_url}"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    local response
    local http_code
    local result_count
    
    if response=$(curl -k -s -w "%{http_code}" -X POST \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "$search_data" \
        --max-time 15 \
        "$api_url" 2>/dev/null); then
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º HTTP –∫–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–∏–º–≤–æ–ª–∞)
        http_code="${response: -3}"
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON (–≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Å–∏–º–≤–æ–ª–æ–≤)
        json_response="${response%???}"
        
        echo "    HTTP –∫–æ–¥: $http_code"
        
        if [ "$http_code" = "200" ]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç - –≤–∞–ª–∏–¥–Ω—ã–π JSON
            if echo "$json_response" | jq . >/dev/null 2>&1; then
                result_count=$(echo "$json_response" | jq '.results | length' 2>/dev/null || echo "0")
                if [ "$result_count" -gt 0 ]; then
                    success "    ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: $result_count —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                    return 0
                else
                    warning "    ‚ö†Ô∏è  API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                    return 1
                fi
            else
                error "    ‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON"
                echo "    –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: ${json_response:0:200}"
                return 1
            fi
        else
            error "    ‚ùå HTTP –æ—à–∏–±–∫–∞: $http_code"
            echo "    –û—Ç–≤–µ—Ç: ${json_response:0:200}"
            return 1
        fi
    else
        error "    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å (—Ç–∞–π–º–∞—É—Ç –∏–ª–∏ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞)"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
test_main_interface() {
    local domain=$1
    local protocol=$2
    local url="${protocol}://${domain}"
    
    echo "  üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: ${url}/"
    
    local response
    local http_code
    
    if response=$(curl -k -s -w "%{http_code}" --max-time 10 "$url/" 2>/dev/null); then
        http_code="${response: -3}"
        
        if [ "$http_code" = "200" ]; then
            success "    ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
            return 0
        else
            warning "    ‚ö†Ô∏è  HTTP –∫–æ–¥: $http_code"
            return 1
        fi
    else
        error "    ‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è health check
test_health() {
    local domain=$1
    local protocol=$2
    local url="${protocol}://${domain}"
    
    echo "  üíö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check: ${url}/health"
    
    local response
    local http_code
    
    if response=$(curl -k -s -w "%{http_code}" --max-time 5 "$url/health" 2>/dev/null); then
        http_code="${response: -3}"
        
        if [ "$http_code" = "200" ]; then
            success "    ‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç"
            return 0
        else
            warning "    ‚ö†Ô∏è  Health check HTTP –∫–æ–¥: $http_code"
            return 1
        fi
    else
        error "    ‚ùå Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞
test_domain() {
    local domain=$1
    local protocol=$2
    
    echo ""
    echo "=================================================="
    echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–ú–ï–ù–ê: ${protocol}://${domain}"
    echo "=================================================="
    
    local tests_passed=0
    local total_tests=3
    
    # –¢–µ—Å—Ç 1: Health check
    if test_health "$domain" "$protocol"; then
        ((tests_passed++))
    fi
    
    # –¢–µ—Å—Ç 2: –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if test_main_interface "$domain" "$protocol"; then
        ((tests_passed++))
    fi
    
    # –¢–µ—Å—Ç 3: –í–µ–±-–ø–æ–∏—Å–∫ API
    if test_websearch "$domain" "$protocol"; then
        ((tests_passed++))
    fi
    
    echo ""
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${domain}: $tests_passed/$total_tests —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ"
    
    if [ $tests_passed -eq $total_tests ]; then
        success "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã –¥–ª—è ${domain}!"
        return 0
    else
        warning "‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã –¥–ª—è ${domain}"
        return 1
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    local results=("$@")
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo ""
    echo "=================================================="
    echo "üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
    echo "=================================================="
    echo "–í—Ä–µ–º—è: $timestamp"
    echo ""
    
    local total_domains=0
    local passed_domains=0
    
    for result in "${results[@]}"; do
        domain=$(echo "$result" | cut -d: -f1)
        status=$(echo "$result" | cut -d: -f2)
        
        ((total_domains++))
        
        if [ "$status" = "PASS" ]; then
            success "‚úÖ $domain - –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´"
            ((passed_domains++))
        else
            error "‚ùå $domain - –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´"
        fi
    done
    
    echo ""
    echo "üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:"
    echo "   –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: $total_domains"
    echo "   –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã: $passed_domains"
    echo "   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $((passed_domains * 100 / total_domains))%"
    
    if [ $passed_domains -eq $total_domains ]; then
        echo ""
        success "üéâ –í–°–ï –î–û–ú–ï–ù–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!"
        echo "   –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ diz.zone –†–ï–®–ï–ù–ê!"
    else
        echo ""
        warning "‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ù–ï–ö–û–¢–û–†–´–ú–ò –î–û–ú–ï–ù–ê–ú–ò"
        echo "   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –¥–æ–º–µ–Ω—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ jq
    if ! command -v jq >/dev/null 2>&1; then
        error "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install jq"
        exit 1
    fi
    
    # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    local results=()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º localhost (HTTP –∏ HTTPS)
    if test_domain "localhost" "http"; then
        results+=("localhost:PASS")
    else
        results+=("localhost:FAIL")
    fi
    
    if test_domain "localhost" "https"; then
        results+=("localhost-https:PASS")
    else
        results+=("localhost-https:FAIL")
    fi
    
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: diz.zone –∏ webui.diz.zone —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS/hosts
    # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ /etc/hosts:
    # 127.0.0.1 diz.zone webui.diz.zone
    
    echo ""
    warning "–ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è diz.zone –∏ webui.diz.zone"
    warning "–¥–æ–±–∞–≤—å—Ç–µ –≤ /etc/hosts: 127.0.0.1 diz.zone webui.diz.zone"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report "${results[@]}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    local report_file="domain_websearch_test_$(date +%Y%m%d_%H%M%S).txt"
    {
        echo "Domain Web Search Test Report"
        echo "Generated: $(date)"
        echo "=============================="
        echo ""
        for result in "${results[@]}"; do
            echo "$result"
        done
    } > "$report_file"
    
    log "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $report_file"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
