#!/bin/bash
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ERNI-KI
# –ê–≤—Ç–æ—Ä: –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü (Tech Lead)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() { echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }
info() { echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"; }
section() { echo -e "${PURPLE}üîç $1${NC}"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π Docker –∏ docker-compose
check_docker_versions() {
    section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π Docker –∏ Docker Compose"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if command -v docker &> /dev/null; then
        local docker_version=$(docker --version | awk '{print $3}' | sed 's/,//')
        success "Docker –≤–µ—Ä—Å–∏—è: $docker_version"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (20.10+)
        local major=$(echo "$docker_version" | cut -d. -f1)
        local minor=$(echo "$docker_version" | cut -d. -f2)

        if [ "$major" -gt 20 ] || ([ "$major" -eq 20 ] && [ "$minor" -ge 10 ]); then
            success "Docker –≤–µ—Ä—Å–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å ERNI-KI"
        else
            warning "Docker –≤–µ—Ä—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 20.10+)"
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker daemon
        if docker info &> /dev/null; then
            success "Docker daemon —Ä–∞–±–æ—Ç–∞–µ—Ç"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Docker
            local docker_root=$(docker info --format '{{.DockerRootDir}}')
            local storage_driver=$(docker info --format '{{.Driver}}')
            success "Docker root: $docker_root"
            success "Storage driver: $storage_driver"
        else
            error "Docker daemon –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            return 1
        fi
    else
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose
    if command -v docker-compose &> /dev/null; then
        local compose_version=$(docker-compose --version | awk '{print $3}' | sed 's/,//')
        success "Docker Compose –≤–µ—Ä—Å–∏—è: $compose_version"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (1.29+)
        local major=$(echo "$compose_version" | cut -d. -f1)
        local minor=$(echo "$compose_version" | cut -d. -f2)

        if [ "$major" -gt 1 ] || ([ "$major" -eq 1 ] && [ "$minor" -ge 29 ]); then
            success "Docker Compose –≤–µ—Ä—Å–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–∞"
        else
            warning "Docker Compose –≤–µ—Ä—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1.29+)"
        fi
    else
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker compose (v2)
    if docker compose version &> /dev/null; then
        local compose_v2=$(docker compose version --short)
        info "Docker Compose v2 —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω: $compose_v2"
    fi

    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose
check_compose_config() {
    section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose"

    if [ -f "compose.yml" ]; then
        success "–§–∞–π–ª compose.yml –Ω–∞–π–¥–µ–Ω"

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if docker-compose config &> /dev/null; then
            success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker Compose –≤–∞–ª–∏–¥–Ω–∞"

            # –ü–æ–¥—Å—á–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
            local services_count=$(docker-compose config --services | wc -l)
            success "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤: $services_count"

            # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
            info "–°–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
            docker-compose config --services | while read service; do
                echo "  ‚Ä¢ $service"
            done
        else
            error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker Compose"
            docker-compose config
            return 1
        fi
    else
        error "–§–∞–π–ª compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ Docker
check_docker_images() {
    section "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker –æ–±—Ä–∞–∑–æ–≤"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –∏–∑ compose.yml
    local images=$(docker-compose config | grep "image:" | awk '{print $2}' | sort -u)

    echo "$images" | while read image; do
        if [ -n "$image" ]; then
            log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞: $image"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞–∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ
            if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "^$image$"; then
                success "–û–±—Ä–∞–∑ $image –¥–æ—Å—Ç—É–ø–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ"
            else
                info "–û–±—Ä–∞–∑ $image –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ"

                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑–∞
                log "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑–∞ $image..."
                if docker pull "$image" &> /dev/null; then
                    success "–û–±—Ä–∞–∑ $image —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω"
                else
                    warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑ $image"
                fi
            fi
        fi
    done
    echo ""
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
test_services_startup() {
    section "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"

    # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–ø—É—Å–∫–∞
    local critical_services=("db" "redis" "auth" "ollama" "nginx" "openwebui")
    local optional_services=("searxng" "docling" "edgetts" "tika" "mcposerver")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞..."
    docker-compose down &> /dev/null || true

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    for service in "${critical_services[@]}"; do
        log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: $service"

        if docker-compose up -d "$service" &> /dev/null; then
            sleep 5

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            local status=$(docker-compose ps "$service" --format "{{.State}}" 2>/dev/null || echo "unknown")
            if echo "$status" | grep -q "Up"; then
                success "–°–µ—Ä–≤–∏—Å $service –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else
                warning "–°–µ—Ä–≤–∏—Å $service –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã: $status"

                # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                echo "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ $service:"
                docker-compose logs --tail=10 "$service" 2>/dev/null || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            fi
        else
            error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å $service"
        fi
    done

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    for service in "${optional_services[@]}"; do
        if docker-compose up -d "$service" &> /dev/null; then
            sleep 3
            local status=$(docker-compose ps "$service" --format "{{.State}}" 2>/dev/null || echo "unknown")
            if echo "$status" | grep -q "Up"; then
                success "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å $service —Ä–∞–±–æ—Ç–∞–µ—Ç"
            else
                info "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å $service: $status"
            fi
        else
            info "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å $service –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
        fi
    done
    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
test_inter_service_communication() {
    section "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..."
    if docker-compose exec -T db pg_isready -U postgres &> /dev/null; then
        success "PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if docker-compose exec -T db psql -U postgres -d openwebui -c "SELECT 1;" &> /dev/null; then
            success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            warning "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        fi
    else
        error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis..."
    if docker-compose exec -T redis redis-cli ping 2>/dev/null | grep -q "PONG"; then
        success "Redis –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama API
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama API..."
    if curl -sf http://localhost:11434/api/version &> /dev/null; then
        success "Ollama API –¥–æ—Å—Ç—É–ø–µ–Ω"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        local models=$(docker-compose exec -T ollama ollama list 2>/dev/null | tail -n +2 | wc -l)
        if [ "$models" -gt 0 ]; then
            success "Ollama: $models –º–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
        else
            warning "Ollama: –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        fi
    else
        error "Ollama API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Auth —Å–µ—Ä–≤–∏—Å–∞
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Auth API..."
    if curl -sf http://localhost:9090/health &> /dev/null; then
        success "Auth API –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "Auth API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx..."
    if curl -sf http://localhost &> /dev/null; then
        success "Nginx –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "Nginx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenWebUI
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ OpenWebUI..."
    if curl -sf http://localhost:8080 &> /dev/null; then
        success "OpenWebUI –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "OpenWebUI –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    echo ""
}

# –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
analyze_resource_usage() {
    section "–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log "–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤..."

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    printf "%-20s %-10s %-15s %-15s %-10s\n" "–ö–û–ù–¢–ï–ô–ù–ï–†" "CPU %" "–ü–ê–ú–Ø–¢–¨" "–°–ï–¢–¨ I/O" "–î–ò–°–ö I/O"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}" | tail -n +2 | while read line; do
        echo "$line"
    done

    echo ""

    # –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    local total_containers=$(docker ps -q | wc -l)
    success "–í—Å–µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $total_containers"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    docker-compose config | grep -A 5 -B 5 "mem_limit\|cpus\|memory" | grep -v "^--$" || info "–õ–∏–º–∏—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

    echo ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_network_configuration() {
    section "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker"

    # –°–ø–∏—Å–æ–∫ Docker —Å–µ—Ç–µ–π
    success "Docker —Å–µ—Ç–∏:"
    docker network ls --format "table {{.Name}}\t{{.Driver}}\t{{.Scope}}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
    local project_network=$(docker-compose config | grep -A 10 "networks:" | grep -v "networks:" | head -1 | awk '{print $1}' | sed 's/://')
    if [ -n "$project_network" ]; then
        info "–°–µ—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: $project_network"

        # –î–µ—Ç–∞–ª–∏ —Å–µ—Ç–∏
        docker network inspect "$project_network" &> /dev/null && success "–°–µ—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" || warning "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –ø—Ä–æ–µ–∫—Ç–∞"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤..."
    netstat -tuln 2>/dev/null | grep -E ":(80|5432|6379|8080|9090|11434|5001|5050|9998|8000) " | while read line; do
        local port=$(echo "$line" | awk '{print $4}' | cut -d: -f2)
        success "–ü–æ—Ä—Ç $port –æ—Ç–∫—Ä—ã—Ç"
    done

    echo ""
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
generate_compatibility_report() {
    section "–û—Ç—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

    local score=0
    local max_score=8
    local issues=()
    local recommendations=()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if command -v docker &> /dev/null && docker info &> /dev/null; then
        score=$((score + 2))
        success "Docker: –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        error "Docker: –ü—Ä–æ–±–ª–µ–º—ã —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏–ª–∏ –∑–∞–ø—É—Å–∫–æ–º"
        issues+=("Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose
    if command -v docker-compose &> /dev/null && docker-compose config &> /dev/null; then
        score=$((score + 1))
        success "Docker Compose: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"
    else
        error "Docker Compose: –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
        issues+=("–ü—Ä–æ–±–ª–µ–º—ã —Å Docker Compose")
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    local running_services=$(docker-compose ps --services --filter "status=running" | wc -l)
    local total_services=$(docker-compose ps --services | wc -l)

    if [ "$running_services" -ge 8 ]; then
        score=$((score + 2))
        success "–°–µ—Ä–≤–∏—Å—ã: $running_services/$total_services –∑–∞–ø—É—â–µ–Ω–æ"
    elif [ "$running_services" -ge 5 ]; then
        score=$((score + 1))
        warning "–°–µ—Ä–≤–∏—Å—ã: $running_services/$total_services –∑–∞–ø—É—â–µ–Ω–æ"
        recommendations+=("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
    else
        error "–°–µ—Ä–≤–∏—Å—ã: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
        issues+=("–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    local working_apis=0
    local apis=("http://localhost" "http://localhost:9090/health" "http://localhost:11434/api/version")

    for api in "${apis[@]}"; do
        if curl -sf "$api" &> /dev/null; then
            working_apis=$((working_apis + 1))
        fi
    done

    if [ "$working_apis" -eq 3 ]; then
        score=$((score + 2))
        success "API: –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ API –¥–æ—Å—Ç—É–ø–Ω—ã"
    elif [ "$working_apis" -ge 2 ]; then
        score=$((score + 1))
        warning "API: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        recommendations+=("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ API")
    else
        error "API: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å API"
        issues+=("–û—Å–Ω–æ–≤–Ω—ã–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    if docker-compose exec -T db pg_isready &> /dev/null && docker-compose exec -T redis redis-cli ping &> /dev/null; then
        score=$((score + 1))
        success "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: –ú–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–∞—è —Å–≤—è–∑—å —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        warning "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: –ü—Ä–æ–±–ª–µ–º—ã —Å –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–π —Å–≤—è–∑—å—é"
        recommendations+=("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏")
    fi

    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    local percentage=$((score * 100 / max_score))
    echo ""

    if [ "$percentage" -ge 90 ]; then
        success "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò: ${percentage}% - –û—Ç–ª–∏—á–Ω–æ"
    elif [ "$percentage" -ge 70 ]; then
        info "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò: ${percentage}% - –•–æ—Ä–æ—à–æ"
    elif [ "$percentage" -ge 50 ]; then
        warning "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò: ${percentage}% - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    else
        error "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò: ${percentage}% - –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    fi

    # –ü—Ä–æ–±–ª–µ–º—ã
    if [ ${#issues[@]} -gt 0 ]; then
        echo ""
        error "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:"
        for issue in "${issues[@]}"; do
            echo "  ‚Ä¢ $issue"
        done
    fi

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if [ ${#recommendations[@]} -gt 0 ]; then
        echo ""
        warning "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
        for rec in "${recommendations[@]}"; do
            echo "  ‚Ä¢ $rec"
        done
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë              Container Compatibility Test                   ‚ïë"
    echo "‚ïë           –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤            ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"

    check_docker_versions
    check_compose_config
    check_docker_images
    test_services_startup
    test_inter_service_communication
    analyze_resource_usage
    check_network_configuration
    generate_compatibility_report

    echo ""
    echo -e "${GREEN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                 –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ                      ‚ïë"
    echo "‚ïë        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ compatibility_report.txt      ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
main "$@" | tee compatibility_report.txt
