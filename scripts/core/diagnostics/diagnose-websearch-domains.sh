#!/bin/bash

# Web Search Domain Diagnosis Script for ERNI-KI
# –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –¥–æ–º–µ–Ω—ã

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON
check_json() {
    local response="$1"
    local domain="$2"

    if echo "$response" | jq . >/dev/null 2>&1; then
        local result_count=$(echo "$response" | jq '.results | length' 2>/dev/null || echo "0")
        success "$domain: –í–∞–ª–∏–¥–Ω—ã–π JSON, $result_count —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        return 0
    else
        error "$domain: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"
        echo "–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:"
        echo "${response:0:200}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoint
test_api_endpoint() {
    local domain="$1"
    local host_header="$2"

    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint –¥–ª—è $domain..."

    local cmd="curl -k -s -w 'HTTP_CODE:%{http_code}' -X POST"
    if [ "$host_header" != "none" ]; then
        cmd="$cmd -H 'Host: $host_header'"
    fi
    cmd="$cmd -H 'Content-Type: application/x-www-form-urlencoded'"
    cmd="$cmd -d 'q=test&format=json'"
    cmd="$cmd https://localhost/api/searxng/search"

    local response
    if response=$(eval "$cmd" 2>/dev/null); then
        local http_code="${response##*HTTP_CODE:}"
        local json_response="${response%HTTP_CODE:*}"

        echo "  HTTP –∫–æ–¥: $http_code"

        if [ "$http_code" = "200" ]; then
            check_json "$json_response" "$domain"
        else
            error "$domain: HTTP –æ—à–∏–±–∫–∞ $http_code"
            echo "  –û—Ç–≤–µ—Ç: ${json_response:0:200}"
            return 1
        fi
    else
        error "$domain: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
test_main_interface() {
    local domain="$1"
    local host_header="$2"

    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è $domain..."

    local cmd="curl -k -s -w 'HTTP_CODE:%{http_code}'"
    if [ "$host_header" != "none" ]; then
        cmd="$cmd -H 'Host: $host_header'"
    fi
    cmd="$cmd https://localhost/"

    local response
    if response=$(eval "$cmd" 2>/dev/null); then
        local http_code="${response##*HTTP_CODE:}"

        echo "  HTTP –∫–æ–¥: $http_code"

        if [ "$http_code" = "200" ]; then
            success "$domain: –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
            return 0
        else
            warning "$domain: HTTP –∫–æ–¥ $http_code"
            return 1
        fi
    else
        error "$domain: –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
check_nginx_config() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx..."

    echo "=== Server Names ==="
    docker-compose exec nginx grep -A 2 "server_name" /etc/nginx/conf.d/default.conf || true

    echo ""
    echo "=== API Endpoint Configuration ==="
    docker-compose exec nginx grep -A 10 "location /api/searxng" /etc/nginx/conf.d/default.conf || true

    echo ""
    echo "=== Nginx Syntax Check ==="
    if docker-compose exec nginx nginx -t 2>/dev/null; then
        success "Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"
    else
        error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è OpenWebUI..."

    echo "=== SEARXNG Configuration ==="
    grep -E "(SEARXNG|WEB_SEARCH)" env/openwebui.env || true

    echo ""
    echo "=== WEBUI_URL ==="
    grep "WEBUI_URL" env/openwebui.env || true
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."

    echo "=== Docker Compose Status ==="
    docker-compose ps nginx openwebui searxng

    echo ""
    echo "=== Health Checks ==="
    local nginx_health=$(docker-compose ps nginx --format "table {{.Status}}" | tail -1)
    local openwebui_health=$(docker-compose ps openwebui --format "table {{.Status}}" | tail -1)
    local searxng_health=$(docker-compose ps searxng --format "table {{.Status}}" | tail -1)

    echo "Nginx: $nginx_health"
    echo "OpenWebUI: $openwebui_health"
    echo "SearXNG: $searxng_health"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤
check_logs() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤..."

    echo "=== Nginx Logs (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫) ==="
    docker-compose logs --tail=5 nginx 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ Nginx"

    echo ""
    echo "=== OpenWebUI Logs (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫) ==="
    docker-compose logs --tail=5 openwebui 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ OpenWebUI"

    echo ""
    echo "=== SearXNG Logs (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫) ==="
    docker-compose logs --tail=5 searxng 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ SearXNG"
}

# –§—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã
simulate_problem() {
    log "–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å JSON.parse..."

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –≤–º–µ—Å—Ç–æ JSON
    echo "=== –¢–µ—Å—Ç: —á—Ç–æ –µ—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML? ==="

    local html_response='<!DOCTYPE html><html><head><title>Error</title></head><body><h1>Authentication Required</h1></body></html>'

    echo "HTML –æ—Ç–≤–µ—Ç:"
    echo "$html_response"

    echo ""
    echo "–ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∫ JSON:"
    if echo "$html_response" | jq . >/dev/null 2>&1; then
        echo "‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω"
    else
        echo "‚ùå JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç SyntaxError: JSON.parse"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
main() {
    echo "=================================================="
    echo "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ï–ë-–ü–û–ò–°–ö–ê –ß–ï–†–ï–ó –†–ê–ó–ù–´–ï –î–û–ú–ï–ù–´"
    echo "=================================================="
    echo "–í—Ä–µ–º—è: $(date)"
    echo ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if ! command -v jq >/dev/null 2>&1; then
        error "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install jq"
        exit 1
    fi

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    check_nginx_config
    echo ""

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_environment
    echo ""

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    check_services
    echo ""

    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
    echo "=================================================="
    echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS"
    echo "=================================================="

    test_api_endpoint "localhost" "none"
    echo ""

    test_api_endpoint "diz.zone" "diz.zone"
    echo ""

    test_api_endpoint "webui.diz.zone" "webui.diz.zone"
    echo ""

    # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    echo "=================================================="
    echo "üåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• –ò–ù–¢–ï–†–§–ï–ô–°–û–í"
    echo "=================================================="

    test_main_interface "localhost" "none"
    echo ""

    test_main_interface "diz.zone" "diz.zone"
    echo ""

    test_main_interface "webui.diz.zone" "webui.diz.zone"
    echo ""

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    check_logs
    echo ""

    # 7. –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã
    simulate_problem
    echo ""

    # 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    echo "=================================================="
    echo "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"
    echo "=================================================="

    echo "1. –ï—Å–ª–∏ –≤—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å:"
    echo "   - –í –±—Ä–∞—É–∑–µ—Ä–µ (–∫—ç—à, cookies)"
    echo "   - –í Cloudflare –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
    echo "   - –í –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    echo ""

    echo "2. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Network tab –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
    echo "   - –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞"
    echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Cloudflare –ª–æ–≥–∏"
    echo ""

    echo "3. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è:"
    echo "   - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ—á–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞"
    echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    echo "   - –°—Ä–∞–≤–Ω–∏—Ç–µ —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    local report_file="websearch_diagnosis_$(date +%Y%m%d_%H%M%S).txt"
    {
        echo "Web Search Domain Diagnosis Report"
        echo "Generated: $(date)"
        echo "======================================"
        echo ""
        echo "SUMMARY:"
        echo "- API endpoints tested: localhost, diz.zone, webui.diz.zone"
        echo "- Configuration checked: Nginx, OpenWebUI environment"
        echo "- Services status verified"
        echo ""
        echo "For detailed results, see terminal output above."
    } > "$report_file"

    log "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $report_file"
}

# –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
main "$@"
