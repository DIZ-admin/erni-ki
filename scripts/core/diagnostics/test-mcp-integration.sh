#!/bin/bash

# ERNI-KI MCP Integration Test Script
# –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å OpenWebUI

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MCPO_URL="http://localhost:8000"
OPENWEBUI_URL="http://localhost:8080"

echo -e "${BLUE}üîç ERNI-KI MCP Integration Test${NC}"
echo "=================================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint
test_endpoint() {
    local url=$1
    local description=$2
    local timeout=${3:-10}
    
    echo -n "Testing $description... "
    
    local http_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time $timeout "$url" 2>/dev/null || echo "000")
    
    if [ "$http_code" = "200" ]; then
        echo -e "${GREEN}‚úÖ OK${NC}"
        return 0
    elif [ "$http_code" = "404" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Not Found${NC}"
        return 1
    else
        echo -e "${RED}‚ùå HTTP $http_code${NC}"
        return 2
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JSON response
test_json_endpoint() {
    local url=$1
    local description=$2
    local expected_key=$3
    
    echo -n "Testing $description... "
    
    local response=$(curl -s --max-time 10 "$url" 2>/dev/null || echo "{}")
    
    if echo "$response" | jq -e ".$expected_key" >/dev/null 2>&1; then
        local count=$(echo "$response" | jq ".$expected_key | length" 2>/dev/null || echo "0")
        echo -e "${GREEN}‚úÖ OK ($count items)${NC}"
        return 0
    else
        echo -e "${RED}‚ùå No $expected_key found${NC}"
        return 1
    fi
}

total_tests=0
passed_tests=0

# –¢–µ—Å—Ç—ã MCPO —Å–µ—Ä–≤–µ—Ä–∞
echo -e "\n${BLUE}üîß MCPO Server Tests${NC}"
echo "--------------------"

((total_tests++))
if test_endpoint "$MCPO_URL/docs" "MCPO Swagger UI"; then
    ((passed_tests++))
fi

((total_tests++))
if test_endpoint "$MCPO_URL/openapi.json" "MCPO OpenAPI spec"; then
    ((passed_tests++))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö paths –≤ OpenAPI
echo -n "Checking available MCP paths... "
paths=$(curl -s "$MCPO_URL/openapi.json" 2>/dev/null | jq '.paths | keys | length' 2>/dev/null || echo "0")
if [ "$paths" -gt 0 ]; then
    echo -e "${GREEN}‚úÖ $paths paths available${NC}"
    ((passed_tests++))
else
    echo -e "${YELLOW}‚ö†Ô∏è No paths yet (servers initializing)${NC}"
fi
((total_tests++))

# –¢–µ—Å—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
echo -e "\n${BLUE}‚öôÔ∏è Individual MCP Server Tests${NC}"
echo "-------------------------------"

# Time server
((total_tests++))
if test_endpoint "$MCPO_URL/time/tools" "Time server tools"; then
    ((passed_tests++))
fi

# Memory server
((total_tests++))
if test_endpoint "$MCPO_URL/memory/tools" "Memory server tools"; then
    ((passed_tests++))
fi

# Filesystem server
((total_tests++))
if test_endpoint "$MCPO_URL/filesystem/tools" "Filesystem server tools"; then
    ((passed_tests++))
fi

# –¢–µ—Å—Ç—ã OpenWebUI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
echo -e "\n${BLUE}üåê OpenWebUI Integration Tests${NC}"
echo "-------------------------------"

((total_tests++))
if test_endpoint "$OPENWEBUI_URL/" "OpenWebUI main page"; then
    ((passed_tests++))
fi

((total_tests++))
if test_endpoint "$OPENWEBUI_URL/health" "OpenWebUI health"; then
    ((passed_tests++))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ tool connections –≤ OpenWebUI
echo -n "Testing OpenWebUI tool connections... "
# –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ—Å–≤–µ–Ω–Ω–æ
if curl -s "$OPENWEBUI_URL/api/tools" 2>/dev/null | grep -q "tools\|error\|unauthorized"; then
    echo -e "${YELLOW}‚ö†Ô∏è Requires authentication${NC}"
    ((passed_tests++))
else
    echo -e "${RED}‚ùå No response${NC}"
fi
((total_tests++))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
echo -e "\n${BLUE}üìã Log Analysis${NC}"
echo "----------------"

echo -n "Checking MCPO logs for errors... "
error_count=$(docker logs erni-ki-mcposerver-1 --tail=50 2>/dev/null | grep -c -E "(ERROR|error|Error|FATAL|fatal)" || echo "0")
if [ "$error_count" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ No errors${NC}"
    ((passed_tests++))
else
    echo -e "${YELLOW}‚ö†Ô∏è $error_count errors found${NC}"
fi
((total_tests++))

echo -n "Checking OpenWebUI logs for MCP errors... "
mcp_error_count=$(docker logs erni-ki-openwebui-1 --tail=50 2>/dev/null | grep -c -E "(mcp|MCP|tool|Tool).*error" || echo "0")
if [ "$mcp_error_count" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ No MCP errors${NC}"
    ((passed_tests++))
else
    echo -e "${YELLOW}‚ö†Ô∏è $mcp_error_count MCP errors found${NC}"
fi
((total_tests++))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
echo -e "\n${BLUE}‚ö° Performance Tests${NC}"
echo "--------------------"

echo -n "Testing MCPO response time... "
start_time=$(date +%s%3N)
curl -s "$MCPO_URL/docs" > /dev/null 2>&1
end_time=$(date +%s%3N)
response_time=$((end_time - start_time))

if [ $response_time -lt 2000 ]; then
    echo -e "${GREEN}‚úÖ ${response_time}ms${NC}"
    ((passed_tests++))
else
    echo -e "${YELLOW}‚ö†Ô∏è ${response_time}ms (slow)${NC}"
fi
((total_tests++))

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
echo -e "\n${BLUE}üìä Test Summary${NC}"
echo "==============="
echo "Total tests: $total_tests"
echo "Passed: $passed_tests"
echo "Failed: $((total_tests - passed_tests))"

success_rate=$((passed_tests * 100 / total_tests))
echo "Success rate: $success_rate%"

echo -e "\n${BLUE}üìù MCP Integration Status${NC}"
echo "=========================="

if [ $success_rate -ge 90 ]; then
    echo -e "${GREEN}üéâ MCP Integration: EXCELLENT${NC}"
    echo "‚úÖ MCPO server is running and healthy"
    echo "‚úÖ MCP servers are initializing/running"
    echo "‚úÖ OpenWebUI is ready for MCP integration"
elif [ $success_rate -ge 70 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è MCP Integration: GOOD${NC}"
    echo "‚úÖ MCPO server is running"
    echo "‚ö†Ô∏è Some MCP servers may still be initializing"
    echo "‚úÖ OpenWebUI is accessible"
elif [ $success_rate -ge 50 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è MCP Integration: PARTIAL${NC}"
    echo "‚ö†Ô∏è MCPO server has issues"
    echo "‚ö†Ô∏è MCP servers need attention"
    echo "‚úÖ OpenWebUI is accessible"
else
    echo -e "${RED}‚ùå MCP Integration: NEEDS ATTENTION${NC}"
    echo "‚ùå Multiple components have issues"
    echo "‚ùå Integration requires troubleshooting"
fi

echo -e "\n${BLUE}üîß Next Steps${NC}"
echo "============="
echo "1. Wait for MCP servers to fully initialize (may take 1-2 minutes)"
echo "2. Check MCPO endpoints: $MCPO_URL/docs"
echo "3. Configure OpenWebUI tool connections in Admin panel"
echo "4. Test MCP tools in OpenWebUI chat interface"

exit $((total_tests - passed_tests))
