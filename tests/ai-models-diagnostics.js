/**
 * ERNI-KI AI Models Diagnostics with Playwright
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ AI –º–æ–¥–µ–ª–µ–π
 *
 * @author –ê–ª—å—Ç—ç–æ–Ω –®—É–ª—å—Ü (Tech Lead)
 * @version 1.0.0
 */

const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  baseUrl: 'http://localhost:8080',
  timeout: 30000,
  screenshotsDir: './test-results/screenshots',
  reportsDir: './test-results/reports',
  expectedModels: ['gpt-oss:20b', 'gemma3n:e4b', 'nomic-embed-text:latest'],
  testPrompts: [
    '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
    '–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–µ –≤ –¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.',
    '–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ AI',
  ],
  maxResponseTime: 5000, // 5 —Å–µ–∫—É–Ω–¥
  ragTestQuery: '–ù–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ',
};

class AIModelsDiagnostics {
  constructor() {
    this.browser = null;
    this.page = null;
    this.results = {
      timestamp: new Date().toISOString(),
      systemStatus: {},
      modelTests: [],
      performanceMetrics: {},
      ragTests: [],
      errors: [],
      recommendations: [],
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.ensureDirectories();
  }

  ensureDirectories() {
    [CONFIG.screenshotsDir, CONFIG.reportsDir].forEach(dir => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
    });
  }

  async initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright –±—Ä–∞—É–∑–µ—Ä–∞...');

    this.browser = await chromium.launch({
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      slowMo: 1000, // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
    });

    this.page = await this.browser.newPage();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
    this.page.setDefaultTimeout(CONFIG.timeout);

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.page.on('console', msg => {
      if (msg.type() === 'error') {
        this.results.errors.push({
          type: 'console_error',
          message: msg.text(),
          timestamp: new Date().toISOString(),
        });
      }
    });

    console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async navigateToOpenWebUI() {
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –∫ OpenWebUI...');

    try {
      await this.page.goto(CONFIG.baseUrl, { waitUntil: 'networkidle' });

      // –°–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await this.takeScreenshot('01-main-page');

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const title = await this.page.title();
      console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${title}`);

      this.results.systemStatus.webUIAccessible = true;
      this.results.systemStatus.pageTitle = title;
    } catch (error) {
      this.results.errors.push({
        type: 'navigation_error',
        message: error.message,
        timestamp: new Date().toISOString(),
      });
      throw error;
    }
  }

  async checkAvailableModels() {
    console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');

    try {
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      await this.page.waitForSelector('[data-testid="model-selector"], .model-selector, select', {
        timeout: 10000,
      });

      // –ü–æ–∏—Å–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π (—Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
      const modelSelectors = [
        '[data-testid="model-selector"]',
        '.model-selector',
        'select[name*="model"]',
        'button[aria-label*="model"]',
        '.dropdown-toggle',
      ];

      let modelSelector = null;
      for (const selector of modelSelectors) {
        const element = await this.page.$(selector);
        if (element) {
          modelSelector = selector;
          break;
        }
      }

      if (!modelSelector) {
        throw new Error('–°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ö–ª–∏–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É –º–æ–¥–µ–ª–µ–π
      await this.page.click(modelSelector);
      await this.page.waitForTimeout(2000);

      // –°–∫—Ä–∏–Ω—à–æ—Ç —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
      await this.takeScreenshot('02-models-list');

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
      const models = await this.page.$$eval('option, .dropdown-item, [role="option"]', elements =>
        elements.map(el => el.textContent?.trim()).filter(Boolean)
      );

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: ${models.length}`);
      models.forEach(model => console.log(`  - ${model}`));

      this.results.systemStatus.availableModels = models;
      this.results.systemStatus.modelsCount = models.length;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π
      const missingModels = CONFIG.expectedModels.filter(
        expected => !models.some(available => available.includes(expected.split(':')[0]))
      );

      if (missingModels.length > 0) {
        this.results.errors.push({
          type: 'missing_models',
          message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥–µ–ª–∏: ${missingModels.join(', ')}`,
          timestamp: new Date().toISOString(),
        });
      }
    } catch (error) {
      this.results.errors.push({
        type: 'models_check_error',
        message: error.message,
        timestamp: new Date().toISOString(),
      });
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–µ–π:', error.message);
    }
  }

  async testTextGeneration() {
    console.log('‚úçÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞...');

    for (const prompt of CONFIG.testPrompts) {
      console.log(`üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: "${prompt}"`);

      try {
        const startTime = Date.now();

        // –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞
        const inputSelectors = [
          'textarea[placeholder*="message"]',
          'textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"]',
          '.chat-input textarea',
          'input[type="text"]',
          '[contenteditable="true"]',
        ];

        let inputSelector = null;
        for (const selector of inputSelectors) {
          const element = await this.page.$(selector);
          if (element) {
            inputSelector = selector;
            break;
          }
        }

        if (!inputSelector) {
          throw new Error('–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        // –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        await this.page.fill(inputSelector, prompt);
        await this.page.waitForTimeout(1000);

        // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        const sendSelectors = [
          'button[type="submit"]',
          'button[aria-label*="send"]',
          'button[aria-label*="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"]',
          '.send-button',
          '[data-testid="send-button"]',
        ];

        let sendButton = null;
        for (const selector of sendSelectors) {
          const element = await this.page.$(selector);
          if (element) {
            sendButton = selector;
            break;
          }
        }

        if (!sendButton) {
          // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Enter
          await this.page.press(inputSelector, 'Enter');
        } else {
          await this.page.click(sendButton);
        }

        // –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        await this.page.waitForSelector('.message, .chat-message, .response', {
          timeout: CONFIG.maxResponseTime,
        });

        const responseTime = Date.now() - startTime;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        const responses = await this.page.$$eval('.message, .chat-message, .response', elements =>
          elements.map(el => el.textContent?.trim()).filter(Boolean)
        );

        const lastResponse = responses[responses.length - 1];

        this.results.modelTests.push({
          prompt,
          response: lastResponse?.substring(0, 200) + '...',
          responseTime,
          success: true,
          timestamp: new Date().toISOString(),
        });

        console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${responseTime}ms`);

        // –°–∫—Ä–∏–Ω—à–æ—Ç –¥–∏–∞–ª–æ–≥–∞
        await this.takeScreenshot(`03-chat-${this.results.modelTests.length}`);

        await this.page.waitForTimeout(2000);
      } catch (error) {
        this.results.modelTests.push({
          prompt,
          response: null,
          responseTime: null,
          success: false,
          error: error.message,
          timestamp: new Date().toISOString(),
        });

        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ "${prompt}":`, error.message);
      }
    }
  }

  async testRAGIntegration() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');

    try {
      // –ü–æ–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ RAG –∏–ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞
      const ragSelectors = [
        '[data-testid="web-search"]',
        '.web-search-toggle',
        'input[type="checkbox"][name*="search"]',
        'button[aria-label*="search"]',
      ];

      let ragToggle = null;
      for (const selector of ragSelectors) {
        const element = await this.page.$(selector);
        if (element) {
          ragToggle = selector;
          break;
        }
      }

      if (ragToggle) {
        await this.page.click(ragToggle);
        console.log('üîç RAG/–≤–µ–±-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω');
      }

      // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –∑–∞–ø—Ä–æ—Å–∞
      const startTime = Date.now();

      const inputSelector =
        'textarea[placeholder*="message"], textarea[placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], .chat-input textarea';
      await this.page.fill(inputSelector, CONFIG.ragTestQuery);

      const sendButton = 'button[type="submit"], .send-button';
      await this.page.click(sendButton);

      // –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
      await this.page.waitForSelector('.message, .chat-message, .response', { timeout: 15000 });

      const responseTime = Date.now() - startTime;

      // –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const sources = await this.page.$$eval('.source, .citation, [href*="http"]', elements =>
        elements.map(el => el.textContent || el.href).filter(Boolean)
      );

      this.results.ragTests.push({
        query: CONFIG.ragTestQuery,
        responseTime,
        sourcesFound: sources.length,
        sources: sources.slice(0, 5), // –ü–µ—Ä–≤—ã–µ 5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        success: true,
        timestamp: new Date().toISOString(),
      });

      console.log(`‚úÖ RAG —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${sources.length}`);

      // –°–∫—Ä–∏–Ω—à–æ—Ç RAG –æ—Ç–≤–µ—Ç–∞
      await this.takeScreenshot('04-rag-response');
    } catch (error) {
      this.results.ragTests.push({
        query: CONFIG.ragTestQuery,
        responseTime: null,
        sourcesFound: 0,
        sources: [],
        success: false,
        error: error.message,
        timestamp: new Date().toISOString(),
      });

      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ RAG:', error.message);
    }
  }

  async takeScreenshot(name) {
    const filename = `${name}-${Date.now()}.png`;
    const filepath = path.join(CONFIG.screenshotsDir, filename);
    await this.page.screenshot({ path: filepath, fullPage: true });
    console.log(`üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
  }

  async generateReport() {
    console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...');

    // –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const successfulTests = this.results.modelTests.filter(test => test.success);
    const avgResponseTime =
      successfulTests.length > 0
        ? successfulTests.reduce((sum, test) => sum + test.responseTime, 0) / successfulTests.length
        : 0;

    this.results.performanceMetrics = {
      totalTests: this.results.modelTests.length,
      successfulTests: successfulTests.length,
      failedTests: this.results.modelTests.length - successfulTests.length,
      averageResponseTime: Math.round(avgResponseTime),
      ragTestsSuccessful: this.results.ragTests.filter(test => test.success).length,
      totalErrors: this.results.errors.length,
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    this.generateRecommendations();

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    const reportPath = path.join(CONFIG.reportsDir, `ai-diagnostics-${Date.now()}.json`);
    fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2));

    console.log(`üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);

    // –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    this.printSummary();
  }

  generateRecommendations() {
    const { performanceMetrics, errors } = this.results;

    if (performanceMetrics.averageResponseTime > CONFIG.maxResponseTime) {
      this.results.recommendations.push(
        '–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è GPU –∏–ª–∏ –º–æ–¥–µ–ª–∏.'
      );
    }

    if (performanceMetrics.failedTests > 0) {
      this.results.recommendations.push(
        '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Ollama –∏ OpenWebUI.'
      );
    }

    if (errors.some(error => error.type === 'missing_models')) {
      this.results.recommendations.push(
        '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ Ollama.'
      );
    }

    if (this.results.ragTests.length === 0 || !this.results.ragTests.some(test => test.success)) {
      this.results.recommendations.push(
        'RAG-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SearXNG –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞.'
      );
    }
  }

  printSummary() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò AI –ú–û–î–ï–õ–ï–ô');
    console.log('='.repeat(60));

    const { systemStatus, performanceMetrics } = this.results;

    console.log(`üåê OpenWebUI –¥–æ—Å—Ç—É–ø–µ–Ω: ${systemStatus.webUIAccessible ? '‚úÖ' : '‚ùå'}`);
    console.log(`ü§ñ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: ${systemStatus.modelsCount || 0}`);
    console.log(
      `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${performanceMetrics.successfulTests}/${performanceMetrics.totalTests}`
    );
    console.log(`‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${performanceMetrics.averageResponseTime}ms`);
    console.log(`üîç RAG —Ç–µ—Å—Ç—ã: ${performanceMetrics.ragTestsSuccessful} —É—Å–ø–µ—à–Ω—ã—Ö`);
    console.log(`‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${performanceMetrics.totalErrors}`);

    if (this.results.recommendations.length > 0) {
      console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      this.results.recommendations.forEach((rec, index) => {
        console.log(`${index + 1}. ${rec}`);
      });
    }

    console.log('\n' + '='.repeat(60));
  }

  async cleanup() {
    if (this.browser) {
      await this.browser.close();
      console.log('üßπ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
  }

  async run() {
    try {
      await this.initialize();
      await this.navigateToOpenWebUI();
      await this.checkAvailableModels();
      await this.testTextGeneration();
      await this.testRAGIntegration();
      await this.generateReport();
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      this.results.errors.push({
        type: 'critical_error',
        message: error.message,
        timestamp: new Date().toISOString(),
      });
    } finally {
      await this.cleanup();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  const diagnostics = new AIModelsDiagnostics();
  diagnostics.run().catch(console.error);
}

module.exports = AIModelsDiagnostics;
