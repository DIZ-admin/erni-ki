import { expect, Page, test } from '@playwright/test';
import fs from 'node:fs';

/**
 * ERNI-KI OpenWebUI RAG E2E via Playwright
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (Docling, SearXNG, Ollama)
 * - –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —à–∞–≥–æ–≤
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ –æ—à–∏–±–∫–∏
 */

const BASE = process.env.PW_BASE_URL || 'https://localhost';
const ART_DIR = 'playwright-artifacts';
const NET_LOG = `${ART_DIR}/network.log`;
try {
  require('node:fs').mkdirSync(ART_DIR, { recursive: true });
} catch {}

// –§–∞–π–ª—ã –¥–æ 10MB: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ RAG –ø–∞–ø–∫–∏
const fixtures = {
  pdf: 'tests/fixtures/sample.pdf',
  docx: 'tests/fixtures/sample.docx',
  md: 'tests/fixtures/sample.md',
  txt: 'tests/fixtures/sample.txt',
  // –†–µ–∞–ª—å–Ω—ã–µ RAG –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  ragPdf1: 'RAG/2023 Q3 INTC.pdf',
  ragPdf2: 'RAG/MB011_Dusche_August_2017.gesch√ºtzt.pdf',
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
  testMdLarge: 'test-large-document.md',
  testMdMedium: 'test-medium-complex.md',
  testMdSmall: 'test-small-multilang.md',
};

// –ü–æ–ª–µ–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ OpenWebUI)
const selectors = {
  fileInput: 'input[type="file"]',
  uploadsTab:
    'button:has-text("Uploads"), button:has-text("Files"), button:has-text("Knowledge"), a:has-text("Uploads")',
  uploadList: '[data-testid="upload-list"], .uploaded-files, .file-list, [class*="upload"]',
  chatInput:
    'textarea[placeholder*="Message"], textarea[placeholder*="–°–æ–æ–±—â"], [role="textbox"], div[contenteditable="true"], textarea',
  settingsButton: 'button[aria-label="Settings"], button:has-text("Settings")',
  webSearchToggle: 'label:has-text("Web Search") input[type="checkbox"], input[name="web_search"]',
  sendButton:
    'button[type="submit"], button:has([class*="send"]), button:has(svg), [aria-label*="Send"], [title*="Send"], button:has-text("Send"), .send-button',
  answerBlock: '.message.assistant, [data-testid="assistant-message"], [class*="message"], .prose',
  // –ù–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  attachButton:
    'button[aria-label*="attach"], button[title*="attach"], button:has([class*="paperclip"]), button:has([class*="attach"])',
  uploadButton: 'button[aria-label*="upload"], button[title*="upload"], input[type="file"]',
  plusButton: 'button:has-text("+"), button[aria-label*="add"], button[title*="add"]',
};

// –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
async function tryLogin(page: Page) {
  console.log('üîç Checking for login form...');

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è OpenWebUI
  const emailSel =
    'input[type="email"], input[name="email"], input#email, input[placeholder*="email" i], input[placeholder*="Email"]';
  const passSel =
    'input[type="password"], input[name="password"], input#password, input[placeholder*="password" i], input[placeholder*="Password"]';
  const submitSel =
    'button:has-text("Sign In"), button:has-text("–í–æ–π—Ç–∏"), button[type="submit"], button:has-text("Login"), button:has-text("Continue")';

  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  await page.waitForTimeout(2000);

  let hasLogin = await page
    .locator(emailSel)
    .first()
    .isVisible()
    .catch(() => false);
  console.log(`Login form visible on main page: ${hasLogin}`);

  if (!hasLogin) {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const loginButtons =
      'button:has-text("Sign In"), button:has-text("Login"), a:has-text("Sign In"), a:has-text("Login")';
    const hasLoginButton = await page
      .locator(loginButtons)
      .first()
      .isVisible()
      .catch(() => false);
    console.log(`Login button visible: ${hasLoginButton}`);

    if (hasLoginButton) {
      await page.click(loginButtons);
      await page.waitForTimeout(1000);
      hasLogin = await page
        .locator(emailSel)
        .first()
        .isVisible()
        .catch(() => false);
      console.log(`Login form visible after clicking login button: ${hasLogin}`);
    }
  }

  if (!hasLogin) {
    console.log('‚ùå No login form found, assuming already authenticated or no auth required');
    return false;
  }

  const EMAIL = process.env.E2E_OPENWEBUI_EMAIL || '';
  const PASS = process.env.E2E_OPENWEBUI_PASSWORD || '';
  if (!EMAIL || !PASS) {
    console.warn('‚ö†Ô∏è Login form detected but E2E_OPENWEBUI_EMAIL/PASSWORD are not set.');
    return false;
  }

  console.log(`üîë Attempting login with email: ${EMAIL}`);
  await page.fill(emailSel, EMAIL);
  await page.fill(passSel, PASS);
  await page.click(submitSel).catch(() => page.press(passSel, 'Enter'));

  // –ñ–¥–µ–º –ª–∏–±–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞, –ª–∏–±–æ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
  try {
    await page.waitForSelector(selectors.chatInput, { timeout: 10_000 });
    console.log('‚úÖ Login successful - chat input found');
    return true;
  } catch (e) {
    console.log('‚ùå Login may have failed - chat input not found');
    return false;
  }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Docling/SearXNG/Ollama
function attachNetworkLogging(page: Page) {
  const append = (line: string) => {
    try {
      fs.appendFileSync(NET_LOG, line + '\n');
    } catch {}
  };
  page.on('request', (req: any) => {
    const url = req.url();
    if (/docling|searxng|ollama|openwebui\/api/i.test(url)) {
      const line = `‚Üí ${req.method()} ${url}`;
      console.log(line);
      append(line);
    }
  });
  page.on('response', async (res: any) => {
    const url = res.url();
    if (/docling|searxng|ollama|openwebui\/api/i.test(url)) {
      const line = `‚Üê ${res.status()} ${url}`;
      console.log(line);
      append(line);
    }
  });
}

async function assertNoConsoleErrors(page: Page) {
  const errors: string[] = [];
  page.on('console', msg => {
    if (msg.type() === 'error') errors.push(msg.text());
  });
  return () => {
    if (errors.length) {
      console.warn('Console errors:', errors.join('\n'));
    }
    expect(errors.length, 'No console errors').toBe(0);
  };
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
async function uploadFile(page: Page, filePath: string): Promise<boolean> {
  console.log(`üìÅ Attempting to upload file: ${filePath}`);

  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å –ª—é–±—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  await page.keyboard.press('Escape').catch(() => {});
  await page.waitForTimeout(1000);

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ–≥–æ input[type="file"]
  const fileInput = await page
    .locator('input[type="file"]')
    .first()
    .isVisible()
    .catch(() => false);
  if (fileInput) {
    await page.setInputFiles('input[type="file"]', filePath);
    console.log('‚úÖ File uploaded via direct input');
    return true;
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è OpenWebUI
  try {
    // 1. –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å –∏–∫–æ–Ω–∫–æ–π —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    const attachButton = page.locator('button:has(img)').first();
    const isAttachVisible = await attachButton.isVisible().catch(() => false);

    if (isAttachVisible) {
      console.log('üîç Found attachment button, clicking...');

      // 2. –ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
      await attachButton.click();

      // 3. –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∏ –∏—â–µ–º "Upload Files"
      await page.waitForTimeout(1000); // –î–∞–µ–º –≤—Ä–µ–º—è –º–µ–Ω—é –ø–æ—è–≤–∏—Ç—å—Å—è
      const uploadMenuItem = page.getByRole('menuitem', { name: 'Upload Files' });

      // –ñ–¥–µ–º, –ø–æ–∫–∞ –ø—É–Ω–∫—Ç –º–µ–Ω—é —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–∏–º—ã–º
      await uploadMenuItem.waitFor({ state: 'visible', timeout: 5000 }).catch(() => {});
      const isMenuItemVisible = await uploadMenuItem.isVisible().catch(() => false);

      if (isMenuItemVisible) {
        console.log('üîç Found "Upload Files" menu item, clicking...');

        // 4. –ö–ª–∏–∫–Ω—É—Ç—å –Ω–∞ "Upload Files" –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å file chooser
        const [fileChooser] = await Promise.all([
          page.waitForEvent('filechooser', { timeout: 5000 }),
          uploadMenuItem.click(),
        ]);

        await fileChooser.setFiles(filePath);
        console.log('‚úÖ File uploaded successfully via OpenWebUI menu');

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
        await page.waitForTimeout(2000);
        return true;
      } else {
        console.log('‚ùå "Upload Files" menu item not visible');
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
        const menuItems = await page.locator('menuitem').allTextContents();
        console.log('Available menu items:', menuItems);
      }
    }
  } catch (error) {
    console.log(`‚ùå OpenWebUI upload method failed: ${error}`);
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç–æ–≥–æ input[type="file"] –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  try {
    const hiddenFileInputs = await page.locator('input[type="file"]').all();
    console.log(`Found ${hiddenFileInputs.length} file inputs`);

    for (let i = 0; i < hiddenFileInputs.length; i++) {
      const input = hiddenFileInputs[i];
      if (!input) continue;

      try {
        await input.setInputFiles(filePath);
        console.log(`‚úÖ File uploaded via hidden input ${i + 1}`);
        await page.waitForTimeout(2000);
        return true;
      } catch (error) {
        console.log(`‚ùå Hidden input ${i + 1} failed: ${error}`);
        continue;
      }
    }
  } catch (error) {
    console.log(`‚ùå Hidden input strategy failed: ${error}`);
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ input
  try {
    console.log('üîç Trying temporary file input creation...');
    const fileChooser = await page.evaluateHandle(() => {
      return new Promise(resolve => {
        const input = document.createElement('input');
        input.type = 'file';
        input.style.display = 'none';
        document.body.appendChild(input);
        input.addEventListener('change', () => resolve(input));
        input.click();
      });
    });

    if (fileChooser) {
      // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
      console.log('‚úÖ Temporary input created, but file selection requires user interaction');
    }
  } catch (error) {
    console.log(`‚ùå Temporary input method failed: ${error}`);
  }

  console.log('‚ùå All upload strategies failed');
  return false;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendMessage(page: Page, message: string): Promise<boolean> {
  console.log(`üí¨ Sending message: ${message.substring(0, 50)}...`);

  // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –∏ –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const inputSelectors = [
    selectors.chatInput,
    'textarea[placeholder*="Message"]',
    'textarea[placeholder*="–°–æ–æ–±—â"]',
    'textarea',
    '[role="textbox"]',
    'div[contenteditable="true"]',
    'input[type="text"]',
  ];

  let inputFound = false;
  for (const selector of inputSelectors) {
    try {
      const isVisible = await page
        .locator(selector)
        .first()
        .isVisible()
        .catch(() => false);
      if (isVisible) {
        await page.fill(selector, message);
        console.log(`‚úÖ Message filled in input: ${selector}`);
        inputFound = true;
        break;
      }
    } catch (error) {
      continue;
    }
  }

  if (!inputFound) {
    console.log('‚ùå Could not find message input field');
    return false;
  }

  // –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º –∏ –Ω–∞–∂–º–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
  const sendSelectors = [
    selectors.sendButton,
    'button[type="submit"]',
    'button:has(svg)',
    'button[aria-label*="Send"]',
    'button[title*="Send"]',
    'button:has-text("Send")',
    '.send-button',
    '[data-testid*="send"]',
  ];

  for (const selector of sendSelectors) {
    try {
      const isVisible = await page
        .locator(selector)
        .first()
        .isVisible()
        .catch(() => false);
      if (isVisible) {
        await page.click(selector);
        console.log(`‚úÖ Message sent via button: ${selector}`);
        return true;
      }
    } catch (error) {
      continue;
    }
  }

  // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º Enter
  try {
    await page.keyboard.press('Enter');
    console.log('‚úÖ Message sent via Enter key');
    return true;
  } catch (error) {
    console.log('‚ùå Could not send message');
    return false;
  }
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –±–∞–∑–æ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
test('Preparation: services healthy and UI reachable', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  await page.goto(BASE, { waitUntil: 'domcontentloaded' });
  // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 404 –Ω–∞ /, –Ω–æ UI –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è (SPA)
  await page.screenshot({ path: 'playwright-artifacts/01-home.png' });
  await page.waitForTimeout(500);
  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  await tryLogin(page).catch(() => {});

  // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Ç–∞ –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ UI
  console.log('üîç Looking for chat input after login...');
  let uiReady = false;

  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞
  const chatSelectors = [
    selectors.chatInput,
    'textarea',
    '[contenteditable="true"]',
    'input[type="text"]',
    '[placeholder*="message" i]',
    '[placeholder*="type" i]',
  ];

  for (const selector of chatSelectors) {
    uiReady = await page
      .locator(selector)
      .first()
      .isVisible()
      .catch(() => false);
    if (uiReady) {
      console.log(`‚úÖ Found chat input with selector: ${selector}`);
      break;
    }
  }

  if (!uiReady) {
    console.log('‚ùå No chat input found, taking screenshot for debugging');
    await page.screenshot({ path: 'playwright-artifacts/debug-no-chat-input.png', fullPage: true });

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const anyInput = await page.locator('input, textarea, [contenteditable]').count();
    console.log(`Found ${anyInput} input elements on page`);

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const title = await page.title();
    console.log(`Page title: ${title}`);
  }

  expect(uiReady, 'Chat input should be visible after authentication').toBeTruthy();
  finalize();
});

// 1) –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
Object.entries(fixtures).forEach(([label, path]) => {
  const size = fs.existsSync(path) ? fs.statSync(path).size : 0;
  const isBinary = label === 'pdf' || label === 'docx';
  const validFixture = size > (isBinary ? 2048 : 0);
  (validFixture ? test : test.skip)(`Upload & index ${label}`, async ({ page }) => {
    attachNetworkLogging(page);
    const finalize = await assertNoConsoleErrors(page);

    await page.goto(BASE);
    await tryLogin(page).catch(() => {});

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    let uploadSuccess = await uploadFile(page, path);

    if (!uploadSuccess) {
      console.log('üîÑ Trying fallback upload methods...');
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
    }

    if (!uploadSuccess) {
      console.log('‚ùå No upload method worked, analyzing page structure...');

      // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const allButtons = await page.locator('button').count();
      const allInputs = await page.locator('input').count();
      const allLinks = await page.locator('a').count();

      console.log(`Page analysis: ${allButtons} buttons, ${allInputs} inputs, ${allLinks} links`);

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
      const buttonTexts = await page.locator('button').allTextContents();
      console.log('Button texts:', buttonTexts.slice(0, 20)); // –ø–µ—Ä–≤—ã–µ 20

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
      const linkTexts = await page.locator('a').allTextContents();
      console.log('Link texts:', linkTexts.slice(0, 20)); // –ø–µ—Ä–≤—ã–µ 20

      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏)
      const iconButtons = await page.locator('button svg, button [class*="icon"]').count();
      console.log(`Found ${iconButtons} buttons with icons`);

      await page.screenshot({
        path: `playwright-artifacts/debug-upload-${label}.png`,
        fullPage: true,
      });

      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞–º–∏
      const fileRelated = await page
        .locator(
          '[class*="file"], [class*="upload"], [class*="document"], [id*="file"], [id*="upload"]'
        )
        .count();
      console.log(`Found ${fileRelated} file-related elements`);

      throw new Error(
        `Could not find upload mechanism for ${label}. Check debug screenshot and logs.`
      );
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –∏—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    console.log('‚è≥ Waiting for upload processing...');
    const uploadIndicators = [
      selectors.uploadList,
      '.upload-success',
      '.file-uploaded',
      '[data-testid*="uploaded"]',
      'text=uploaded',
      'text=success',
    ];

    let processed = false;
    for (const indicator of uploadIndicators) {
      try {
        await page.waitForSelector(indicator, { timeout: 10_000 });
        console.log(`‚úÖ Upload processed - found indicator: ${indicator}`);
        processed = true;
        break;
      } catch (e) {
        continue;
      }
    }

    if (!processed) {
      console.log('‚ö†Ô∏è No upload success indicator found, but continuing...');
    }

    await page.screenshot({ path: `playwright-artifacts/02-upload-${label}.png` });
    finalize();
  });
});

// 2) RAG-–ø–æ–∏—Å–∫ —Å –≤–µ–±-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π (SearXNG)
test('RAG web search (<10s)', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  await page.goto(BASE);
  await tryLogin(page).catch(() => {});

  // –í–∫–ª—é—á–∏—Ç—å web search –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
  await page.click(selectors.settingsButton).catch(() => {});
  await page
    .locator(selectors.webSearchToggle)
    .check({ force: true })
    .catch(() => {});

  // –í–æ–ø—Ä–æ—Å –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
  const question = '–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ AI —Å–µ–≥–æ–¥–Ω—è?';

  const start = Date.now();
  const messageSent = await sendMessage(page, question);
  expect(messageSent, 'Message should be sent successfully').toBeTruthy();

  // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–æ 30—Å (–¥–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
  await page.waitForSelector(`${selectors.answerBlock}, .progress, .spinner`, { timeout: 30_000 });
  const duration = Date.now() - start;
  console.log(`Web search answer time: ${duration}ms`);
  expect(duration).toBeLessThanOrEqual(10_000);

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫/–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  const content = await page.locator(selectors.answerBlock).first().innerText();
  expect(/https?:\/\//.test(content) || /–ò—Å—Ç–æ—á–Ω–∏–∫|Source|[[]\d+[]]/i.test(content)).toBeTruthy();

  await page.screenshot({ path: 'playwright-artifacts/03-web-search.png' });
  finalize();
});

// 3) RAG-–ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
test('RAG over uploaded docs', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  await page.goto(BASE);
  await tryLogin(page).catch(() => {});
  const question = '–ò–∑–ª–æ–∂–∏ –∫—Ä–∞—Ç–∫–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —É–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫.';
  await page.fill(selectors.chatInput, question);
  await page.click(selectors.sendButton);

  await page.waitForSelector(selectors.answerBlock, { timeout: 30_000 });
  const answer = await page.locator(selectors.answerBlock).first().innerText();
  expect(/–ò—Å—Ç–æ—á–Ω–∏–∫|–§–∞–π–ª|–î–æ–∫—É–º–µ–Ω—Ç|\.(pdf|docx|md|txt)/i.test(answer)).toBeTruthy();

  await page.screenshot({ path: 'playwright-artifacts/04-doc-rag.png' });
  finalize();
});

// 4) –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RAG (–¥–æ–∫—É–º–µ–Ω—Ç—ã + –≤–µ–±)
test('Combined RAG (docs + web)', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  await page.goto(BASE);
  const question =
    '–°–æ–ø–æ—Å—Ç–∞–≤—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏–∑ –≤–µ–±–∞ –∏ –¥–æ–±–∞–≤—å —Å—Å—ã–ª–∫–∏.';
  await page.fill(selectors.chatInput, question);
  await page.click(selectors.sendButton);

  await page.waitForSelector(selectors.answerBlock, { timeout: 30_000 });
  const answer = await page.locator(selectors.answerBlock).first().innerText();
  expect(/https?:\/\//.test(answer)).toBeTruthy();
  expect(/(–ò—Å—Ç–æ—á–Ω–∏–∫|–§–∞–π–ª|–î–æ–∫—É–º–µ–Ω—Ç)/i.test(answer)).toBeTruthy();

  await page.screenshot({ path: 'playwright-artifacts/05-combined.png' });
  finalize();
});

// 5) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ Intel Q3 2023
test('RAG with Intel Q3 2023 document', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  const ragFile = fixtures.ragPdf1;
  if (!fs.existsSync(ragFile)) {
    test.skip();
    return;
  }

  await page.goto(BASE);
  await tryLogin(page).catch(() => {});

  console.log(`üìÅ Uploading Intel Q3 2023 document: ${ragFile}`);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ file chooser
  let fileChooser;
  try {
    [fileChooser] = await Promise.all([
      page.waitForEvent('filechooser', { timeout: 10_000 }),
      page.click('button:has(svg), button:has([class*="icon"])', { timeout: 5_000 }),
    ]);
  } catch (error) {
    // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π input
    const fileInput = await page
      .locator('input[type="file"]')
      .first()
      .isVisible()
      .catch(() => false);
    if (fileInput) {
      await page.setInputFiles('input[type="file"]', ragFile);
      console.log('‚úÖ File uploaded via direct input');
    } else {
      throw new Error('Could not find upload mechanism');
    }
    return;
  }
  await fileChooser.setFiles(ragFile);

  // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  await page.waitForTimeout(5_000);

  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ Intel Q3 2023
  const question = '–ö–∞–∫–∏–µ –±—ã–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ Intel –≤ Q3 2023? –£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫.';
  await page.fill(selectors.chatInput, question);

  const start = Date.now();
  await page.click(selectors.sendButton);

  await page.waitForSelector(selectors.answerBlock, { timeout: 30_000 });
  const duration = Date.now() - start;
  console.log(`Intel Q3 RAG response time: ${duration}ms`);

  const answer = await page.locator(selectors.answerBlock).first().innerText();
  expect(/(Intel|INTC|Q3|2023|revenue|–≤—ã—Ä—É—á–∫–∞|–¥–æ—Ö–æ–¥)/i.test(answer)).toBeTruthy();
  expect(/(–ò—Å—Ç–æ—á–Ω–∏–∫|Source|\.pdf)/i.test(answer)).toBeTruthy();
  expect(duration).toBeLessThanOrEqual(5_000); // –¶–µ–ª—å: <5 —Å–µ–∫—É–Ω–¥

  await page.screenshot({ path: 'playwright-artifacts/06-intel-rag.png' });
  finalize();
});

// 6) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–≥–æ RAG (–Ω–µ–º–µ—Ü–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç)
test('Multilingual RAG (German document)', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  const ragFile = fixtures.ragPdf2;
  if (!fs.existsSync(ragFile)) {
    test.skip();
    return;
  }

  await page.goto(BASE);
  await tryLogin(page).catch(() => {});

  console.log(`üìÅ Uploading German document: ${ragFile}`);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  let fileChooser;
  try {
    [fileChooser] = await Promise.all([
      page.waitForEvent('filechooser', { timeout: 10_000 }),
      page.click('button:has(svg), button:has([class*="icon"])', { timeout: 5_000 }),
    ]);
  } catch (error) {
    // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π input
    const fileInput = await page
      .locator('input[type="file"]')
      .first()
      .isVisible()
      .catch(() => false);
    if (fileInput) {
      await page.setInputFiles('input[type="file"]', ragFile);
      console.log('‚úÖ German file uploaded via direct input');
    } else {
      throw new Error('Could not find upload mechanism for German document');
    }
    return;
  }
  await fileChooser.setFiles(ragFile);

  await page.waitForTimeout(5_000);

  // –í–æ–ø—Ä–æ—Å –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ
  const question =
    'Was sind die wichtigsten Informationen in diesem deutschen Dokument? Bitte auf Deutsch antworten.';
  await page.fill(selectors.chatInput, question);

  const start = Date.now();
  await page.click(selectors.sendButton);

  await page.waitForSelector(selectors.answerBlock, { timeout: 30_000 });
  const duration = Date.now() - start;
  console.log(`German RAG response time: ${duration}ms`);

  const answer = await page.locator(selectors.answerBlock).first().innerText();
  expect(/(Dokument|Dusche|August|2017|MB011)/i.test(answer)).toBeTruthy();
  expect(duration).toBeLessThanOrEqual(5_000);

  await page.screenshot({ path: 'playwright-artifacts/07-german-rag.png' });
  finalize();
});

// 7) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π RAG —Å–∏—Å—Ç–µ–º—ã
test('RAG integrations health check', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  console.log('üîç Testing RAG system integrations...');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ Docling API (—á–µ—Ä–µ–∑ nginx –ø—Ä–æ–∫—Å–∏)
  const doclingResponse = await page.request
    .get('http://localhost:8080/docling/health')
    .catch(() => null);
  console.log(`Docling health: ${doclingResponse?.status() || 'FAILED'}`);
  expect(doclingResponse?.ok()).toBeTruthy();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ SearXNG API
  const searxngResponse = await page.request
    .get('http://localhost:8080/api/searxng/search?q=test&format=json')
    .catch(() => null);
  console.log(`SearXNG health: ${searxngResponse?.status() || 'FAILED'}`);
  expect(searxngResponse?.ok()).toBeTruthy();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama API
  const ollamaResponse = await page.request
    .get('http://localhost:11434/api/tags')
    .catch(() => null);
  console.log(`Ollama health: ${ollamaResponse?.status() || 'FAILED'}`);
  expect(ollamaResponse?.ok()).toBeTruthy();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL —á–µ—Ä–µ–∑ OpenWebUI
  await page.goto(BASE);
  await tryLogin(page).catch(() => {});

  // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  const dbTestQuestion = '–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.';
  await page.fill(selectors.chatInput, dbTestQuestion);
  await page.click(selectors.sendButton);

  await page.waitForSelector(selectors.answerBlock, { timeout: 15_000 });
  const dbAnswer = await page.locator(selectors.answerBlock).first().innerText();
  console.log('Database integration test completed');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  expect(dbAnswer.length).toBeGreaterThan(0);

  await page.screenshot({ path: 'playwright-artifacts/08-integrations.png' });
  finalize();
});

// 8) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RAG
test('RAG performance benchmark', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  await page.goto(BASE);
  await tryLogin(page).catch(() => {});

  const performanceTests = [
    { query: '–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', maxTime: 5000 },
    { query: '–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö', maxTime: 5000 },
    { query: '–°—Ä–∞–≤–Ω–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', maxTime: 7000 },
  ];

  const results: Array<{ query: string; time: number; success: boolean }> = [];

  for (const test of performanceTests) {
    console.log(`‚è±Ô∏è Testing: ${test.query}`);

    await page.fill(selectors.chatInput, test.query);
    const start = Date.now();
    await page.click(selectors.sendButton);

    try {
      await page.waitForSelector(selectors.answerBlock, { timeout: test.maxTime + 5000 });
      const duration = Date.now() - start;
      const success = duration <= test.maxTime;

      results.push({ query: test.query, time: duration, success });
      console.log(
        `‚úÖ Query completed in ${duration}ms (target: ${test.maxTime}ms) - ${success ? 'PASS' : 'FAIL'}`
      );

      expect(duration).toBeLessThanOrEqual(test.maxTime);

      // –û—á–∏—Å—Ç–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
      await page.waitForTimeout(2000);
    } catch (error) {
      results.push({ query: test.query, time: -1, success: false });
      console.log(`‚ùå Query failed: ${error}`);
      throw error;
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('üìä Performance Results:');
  results.forEach(result => {
    console.log(`  ${result.query}: ${result.time}ms ${result.success ? '‚úÖ' : '‚ùå'}`);
  });

  await page.screenshot({ path: 'playwright-artifacts/09-performance.png' });
  finalize();
});

// 9) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ RAG –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
test('RAG configuration validation', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  await page.goto(BASE);
  await tryLogin(page).catch(() => {});

  console.log('üîß Validating RAG configuration...');

  // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
  const settingsSelectors = [
    'button:has-text("Settings")',
    'button[aria-label="Settings"]',
    'a:has-text("Settings")',
    '[data-testid="settings"]',
    'button:has(svg):has-text("Settings")',
  ];

  let settingsFound = false;
  for (const selector of settingsSelectors) {
    const hasSettings = await page
      .locator(selector)
      .first()
      .isVisible()
      .catch(() => false);
    if (hasSettings) {
      console.log(`‚úÖ Found settings with selector: ${selector}`);
      await page.click(selector);
      settingsFound = true;
      break;
    }
  }

  if (settingsFound) {
    await page.waitForTimeout(2000);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const ragSettings = ['Web Search', 'RAG', 'Documents', 'Knowledge', 'Embedding'];

    for (const setting of ragSettings) {
      const hasRagSetting = await page
        .locator(`text=${setting}`)
        .first()
        .isVisible()
        .catch(() => false);
      console.log(`RAG setting "${setting}": ${hasRagSetting ? '‚úÖ' : '‚ùå'}`);
    }

    await page.screenshot({ path: 'playwright-artifacts/10-rag-config.png' });
  } else {
    console.log('‚ö†Ô∏è Settings not accessible, skipping configuration validation');
  }

  // –¢–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const vectorTestQuery = '–ù–∞–π–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º–∏';
  await page.fill(selectors.chatInput, vectorTestQuery);

  const start = Date.now();
  await page.click(selectors.sendButton);

  await page.waitForSelector(selectors.answerBlock, { timeout: 15_000 });
  const duration = Date.now() - start;

  const answer = await page.locator(selectors.answerBlock).first().innerText();
  const hasVectorResults = /(–Ω–∞–π–¥–µ–Ω|found|–¥–æ–∫—É–º–µ–Ω—Ç|document|–∏—Å—Ç–æ—á–Ω–∏–∫|source)/i.test(answer);

  console.log(`Vector search test: ${duration}ms, results found: ${hasVectorResults}`);
  expect(hasVectorResults).toBeTruthy();
  expect(duration).toBeLessThanOrEqual(5_000);

  await page.screenshot({ path: 'playwright-artifacts/11-vector-search.png' });
  finalize();
});

// 10) –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç RAG —Å–∏—Å—Ç–µ–º—ã
test('Comprehensive RAG system test', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  await page.goto(BASE);
  await tryLogin(page).catch(() => {});

  console.log('üéØ Running comprehensive RAG system test...');

  // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, —Ç—Ä–µ–±—É—é—â–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ RAG
  const comprehensiveQuery = `
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –Ω–∞–π–¥–∏:
    1. –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    2. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    3. –°—Ä–∞–≤–Ω–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –≤–µ–±–∞
    4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
  `;

  await page.fill(selectors.chatInput, comprehensiveQuery);

  const start = Date.now();
  await page.click(selectors.sendButton);

  // –û–∂–∏–¥–∞–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
  await page.waitForSelector(selectors.answerBlock, { timeout: 30_000 });
  const duration = Date.now() - start;

  const answer = await page.locator(selectors.answerBlock).first().innerText();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
  const hasStructure = /[1-4]\.|\*|\-/.test(answer); // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
  const hasSources = /(–∏—Å—Ç–æ—á–Ω–∏–∫|source|\.pdf|https?:\/\/)/i.test(answer);
  const hasAnalysis = /(–∞–Ω–∞–ª–∏–∑|—Å—Ä–∞–≤–Ω|–¥–∞–Ω–Ω—ã–µ|–ø–æ–∫–∞–∑–∞—Ç–µ–ª)/i.test(answer);
  const hasWebInfo = /(–∞–∫—Ç—É–∞–ª—å–Ω|–Ω–æ–≤–æ—Å—Ç|–≤–µ–±|web|search)/i.test(answer);

  console.log('Comprehensive test results:');
  console.log(`  Duration: ${duration}ms`);
  console.log(`  Structured: ${hasStructure}`);
  console.log(`  Has sources: ${hasSources}`);
  console.log(`  Has analysis: ${hasAnalysis}`);
  console.log(`  Has web info: ${hasWebInfo}`);

  expect(duration).toBeLessThanOrEqual(10_000); // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  expect(hasStructure).toBeTruthy();
  expect(hasSources).toBeTruthy();
  expect(hasAnalysis).toBeTruthy();

  await page.screenshot({ path: 'playwright-artifacts/12-comprehensive.png' });

  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  console.log('üìä Final system check completed');

  finalize();
});
