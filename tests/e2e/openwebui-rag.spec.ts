import { expect, test } from '@playwright/test';
// @ts-nocheck
import fs from 'node:fs';

/**
 * ERNI-KI OpenWebUI RAG E2E via Playwright
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (Docling, SearXNG, Ollama)
 * - –°–∫—Ä–∏–Ω—à–æ—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —à–∞–≥–æ–≤
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ –æ—à–∏–±–∫–∏
 */

const BASE = process.env.PW_BASE_URL || 'https://localhost';
const ART_DIR = 'playwright-artifacts';
const NET_LOG = `${ART_DIR}/network.log`;
try {
  require('node:fs').mkdirSync(ART_DIR, { recursive: true });
} catch {}

// –§–∞–π–ª—ã –¥–æ 10MB: –ø–æ–ª–æ–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤ tests/fixtures/
const fixtures = {
  pdf: 'tests/fixtures/sample.pdf',
  docx: 'tests/fixtures/sample.docx',
  md: 'tests/fixtures/sample.md',
  txt: 'tests/fixtures/sample.txt',
};

// –ü–æ–ª–µ–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–π —Ç–µ–º–µ/–≤–µ—Ä—Å–∏–∏ OpenWebUI)
const selectors = {
  fileInput: 'input[type="file"]',
  uploadsTab:
    'button:has-text("Uploads"), button:has-text("Files"), button:has-text("Knowledge"), a:has-text("Uploads")',
  uploadList: '[data-testid="upload-list"], .uploaded-files, .file-list, [class*="upload"]',
  chatInput:
    'textarea[placeholder*="Message"], textarea[placeholder*="–°–æ–æ–±—â"], [role="textbox"], div[contenteditable="true"]',
  settingsButton: 'button[aria-label="Settings"], button:has-text("Settings")',
  webSearchToggle: 'label:has-text("Web Search") input[type="checkbox"], input[name="web_search"]',
  sendButton: 'button:has-text("Send"), button[aria-label="Send"]',
  answerBlock: '.message.assistant, [data-testid="assistant-message"]',
};

// –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
async function tryLogin(page) {
  console.log('üîç Checking for login form...');

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è OpenWebUI
  const emailSel =
    'input[type="email"], input[name="email"], input#email, input[placeholder*="email" i], input[placeholder*="Email"]';
  const passSel =
    'input[type="password"], input[name="password"], input#password, input[placeholder*="password" i], input[placeholder*="Password"]';
  const submitSel =
    'button:has-text("Sign In"), button:has-text("–í–æ–π—Ç–∏"), button[type="submit"], button:has-text("Login"), button:has-text("Continue")';

  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  await page.waitForTimeout(2000);

  let hasLogin = await page
    .locator(emailSel)
    .first()
    .isVisible()
    .catch(() => false);
  console.log(`Login form visible on main page: ${hasLogin}`);

  if (!hasLogin) {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const loginButtons =
      'button:has-text("Sign In"), button:has-text("Login"), a:has-text("Sign In"), a:has-text("Login")';
    const hasLoginButton = await page
      .locator(loginButtons)
      .first()
      .isVisible()
      .catch(() => false);
    console.log(`Login button visible: ${hasLoginButton}`);

    if (hasLoginButton) {
      await page.click(loginButtons);
      await page.waitForTimeout(1000);
      hasLogin = await page
        .locator(emailSel)
        .first()
        .isVisible()
        .catch(() => false);
      console.log(`Login form visible after clicking login button: ${hasLogin}`);
    }
  }

  if (!hasLogin) {
    console.log('‚ùå No login form found, assuming already authenticated or no auth required');
    return false;
  }

  const EMAIL = process.env.E2E_OPENWEBUI_EMAIL || '';
  const PASS = process.env.E2E_OPENWEBUI_PASSWORD || '';
  if (!EMAIL || !PASS) {
    console.warn('‚ö†Ô∏è Login form detected but E2E_OPENWEBUI_EMAIL/PASSWORD are not set.');
    return false;
  }

  console.log(`üîë Attempting login with email: ${EMAIL}`);
  await page.fill(emailSel, EMAIL);
  await page.fill(passSel, PASS);
  await page.click(submitSel).catch(() => page.press(passSel, 'Enter'));

  // –ñ–¥–µ–º –ª–∏–±–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞, –ª–∏–±–æ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
  try {
    await page.waitForSelector(selectors.chatInput, { timeout: 10_000 });
    console.log('‚úÖ Login successful - chat input found');
    return true;
  } catch (e) {
    console.log('‚ùå Login may have failed - chat input not found');
    return false;
  }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Docling/SearXNG/Ollama
function attachNetworkLogging(page) {
  const append = (line: string) => {
    try {
      fs.appendFileSync(NET_LOG, line + '\n');
    } catch {}
  };
  page.on('request', req => {
    const url = req.url();
    if (/docling|searxng|ollama|openwebui\/api/i.test(url)) {
      const line = `‚Üí ${req.method()} ${url}`;
      console.log(line);
      append(line);
    }
  });
  page.on('response', async res => {
    const url = res.url();
    if (/docling|searxng|ollama|openwebui\/api/i.test(url)) {
      const line = `‚Üê ${res.status()} ${url}`;
      console.log(line);
      append(line);
    }
  });
}

async function assertNoConsoleErrors(page) {
  const errors: string[] = [];
  page.on('console', msg => {
    if (msg.type() === 'error') errors.push(msg.text());
  });
  return () => {
    if (errors.length) {
      console.warn('Console errors:', errors.join('\n'));
    }
    expect(errors.length, 'No console errors').toBe(0);
  };
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –±–∞–∑–æ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
test('Preparation: services healthy and UI reachable', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  const resp = await page.goto(BASE, { waitUntil: 'domcontentloaded' });
  // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 404 –Ω–∞ /, –Ω–æ UI –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è (SPA)
  await page.screenshot({ path: 'playwright-artifacts/01-home.png' });
  await page.waitForTimeout(500);
  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  await tryLogin(page).catch(() => {});

  // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Ç–∞ –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ UI
  console.log('üîç Looking for chat input after login...');
  let uiReady = false;

  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞
  const chatSelectors = [
    selectors.chatInput,
    'textarea',
    '[contenteditable="true"]',
    'input[type="text"]',
    '[placeholder*="message" i]',
    '[placeholder*="type" i]',
  ];

  for (const selector of chatSelectors) {
    uiReady = await page
      .locator(selector)
      .first()
      .isVisible()
      .catch(() => false);
    if (uiReady) {
      console.log(`‚úÖ Found chat input with selector: ${selector}`);
      break;
    }
  }

  if (!uiReady) {
    console.log('‚ùå No chat input found, taking screenshot for debugging');
    await page.screenshot({ path: 'playwright-artifacts/debug-no-chat-input.png', fullPage: true });

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const anyInput = await page.locator('input, textarea, [contenteditable]').count();
    console.log(`Found ${anyInput} input elements on page`);

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const title = await page.title();
    console.log(`Page title: ${title}`);
  }

  expect(uiReady, 'Chat input should be visible after authentication').toBeTruthy();
  finalize();
});

// 1) –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
Object.entries(fixtures).forEach(([label, path]) => {
  const size = fs.existsSync(path) ? fs.statSync(path).size : 0;
  const isBinary = label === 'pdf' || label === 'docx';
  const validFixture = size > (isBinary ? 2048 : 0);
  (validFixture ? test : test.skip)(`Upload & index ${label}`, async ({ page }) => {
    attachNetworkLogging(page);
    const finalize = await assertNoConsoleErrors(page);

    await page.goto(BASE);
    await tryLogin(page).catch(() => {});

    console.log(`üìÅ Attempting to upload file: ${path}`);

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏/–º–µ–Ω—é
    const navElements = [
      'button:has-text("Knowledge")',
      'button:has-text("Documents")',
      'button:has-text("Files")',
      'a:has-text("Knowledge")',
      'a:has-text("Documents")',
      'a:has-text("Files")',
      '[href*="knowledge"]',
      '[href*="documents"]',
      '[href*="files"]',
    ];

    for (const navSel of navElements) {
      const hasNav = await page
        .locator(navSel)
        .first()
        .isVisible()
        .catch(() => false);
      if (hasNav) {
        console.log(`üîç Found navigation element: ${navSel}`);
        await page.click(navSel);
        await page.waitForTimeout(1000);
        break;
      }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —É—Å–ø–µ—Ö–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    let uploadSuccess = false;

    // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
    const iconButtons = await page.locator('button:has(svg), button:has([class*="icon"])').all();
    console.log(`üîç Found ${iconButtons.length} buttons with icons, trying each one...`);

    for (let i = 0; i < iconButtons.length; i++) {
      const button = iconButtons[i];
      if (!button) continue;

      const isVisible = await button.isVisible().catch(() => false);
      if (!isVisible) continue;

      console.log(`Trying icon button ${i + 1}/${iconButtons.length}`);

      try {
        // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–∫–æ–Ω–∫–æ–π
        await button.click();
        await page.waitForTimeout(500);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ file input –∏–ª–∏ file chooser
        const fileInput = await page.locator('input[type="file"]').first().isVisible().catch(() => false);
        if (fileInput) {
          console.log(`‚úÖ Found file input after clicking icon button ${i + 1}`);
          await page.setInputFiles('input[type="file"]', path);
          uploadSuccess = true;
          break;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª—Å—è –ª–∏ file chooser
        const fileChooserPromise = page.waitForEvent('filechooser', { timeout: 1000 });
        const fileChooser = await fileChooserPromise.catch(() => null);
        if (fileChooser) {
          console.log(`‚úÖ File chooser opened after clicking icon button ${i + 1}`);
          await fileChooser.setFiles(path);
          uploadSuccess = true;
          break;
        }
      } catch (e: any) {
        console.log(`‚ùå Icon button ${i + 1} failed: ${e.message}`);
        continue;
      }
    }

    if (!uploadSuccess) {
      // Fallback: —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      const uploadButtons = [
        'input[type="file"]',
        'button:has-text("Upload")',
        'button:has-text("Add")',
        'button:has-text("+")',
        'button[title*="upload" i]',
        'button[aria-label*="upload" i]',
        '[data-testid*="upload"]',
        '.upload-button',
        'button:has([class*="upload"])',
        'button:has([class*="plus"])',
        'button:has([class*="add"])',
      ];

      for (const buttonSel of uploadButtons) {
      const hasButton = await page
        .locator(buttonSel)
        .first()
        .isVisible()
        .catch(() => false);
      console.log(`Upload button "${buttonSel}": ${hasButton}`);

      if (hasButton) {
        try {
          if (buttonSel.includes('input[type="file"]')) {
            // –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ input
            await page.setInputFiles(buttonSel, path);
            console.log('‚úÖ File uploaded via direct input');
            uploadSuccess = true;
            break;
          } else {
            // –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ file chooser
            const [fileChooser] = await Promise.all([
              page.waitForEvent('filechooser', { timeout: 5000 }),
              page.click(buttonSel),
            ]);
            await fileChooser.setFiles(path);
            console.log('‚úÖ File uploaded via file chooser');
            uploadSuccess = true;
            break;
          }
        } catch (e: any) {
          console.log(`‚ùå Failed with "${buttonSel}": ${e.message}`);
          continue;
        }
      }
    }

    if (!uploadSuccess) {
      console.log('‚ùå No upload method worked, analyzing page structure...');

      // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const allButtons = await page.locator('button').count();
      const allInputs = await page.locator('input').count();
      const allLinks = await page.locator('a').count();

      console.log(`Page analysis: ${allButtons} buttons, ${allInputs} inputs, ${allLinks} links`);

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
      const buttonTexts = await page.locator('button').allTextContents();
      console.log('Button texts:', buttonTexts.slice(0, 20)); // –ø–µ—Ä–≤—ã–µ 20

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
      const linkTexts = await page.locator('a').allTextContents();
      console.log('Link texts:', linkTexts.slice(0, 20)); // –ø–µ—Ä–≤—ã–µ 20

      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏)
      const iconButtons = await page.locator('button svg, button [class*="icon"]').count();
      console.log(`Found ${iconButtons} buttons with icons`);

      await page.screenshot({
        path: `playwright-artifacts/debug-upload-${label}.png`,
        fullPage: true,
      });

      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞–º–∏
      const fileRelated = await page
        .locator(
          '[class*="file"], [class*="upload"], [class*="document"], [id*="file"], [id*="upload"]'
        )
        .count();
      console.log(`Found ${fileRelated} file-related elements`);

      throw new Error(
        `Could not find upload mechanism for ${label}. Check debug screenshot and logs.`
      );
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –∏—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    console.log('‚è≥ Waiting for upload processing...');
    const uploadIndicators = [
      selectors.uploadList,
      '.upload-success',
      '.file-uploaded',
      '[data-testid*="uploaded"]',
      'text=uploaded',
      'text=success',
    ];

    let processed = false;
    for (const indicator of uploadIndicators) {
      try {
        await page.waitForSelector(indicator, { timeout: 10_000 });
        console.log(`‚úÖ Upload processed - found indicator: ${indicator}`);
        processed = true;
        break;
      } catch (e) {
        continue;
      }
    }

    if (!processed) {
      console.log('‚ö†Ô∏è No upload success indicator found, but continuing...');
    }

    await page.screenshot({ path: `playwright-artifacts/02-upload-${label}.png` });
    finalize();
  });
});

// 2) RAG-–ø–æ–∏—Å–∫ —Å –≤–µ–±-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π (SearXNG)
test('RAG web search (<10s)', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  await page.goto(BASE);
  await tryLogin(page).catch(() => {});

  // –í–∫–ª—é—á–∏—Ç—å web search –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
  await page.click(selectors.settingsButton).catch(() => {});
  await page
    .locator(selectors.webSearchToggle)
    .check({ force: true })
    .catch(() => {});

  // –í–æ–ø—Ä–æ—Å –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
  const question = '–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ AI —Å–µ–≥–æ–¥–Ω—è?';
  await page.fill(selectors.chatInput, question);

  const start = Date.now();
  await page.click(selectors.sendButton);

  // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–æ 30—Å (–¥–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
  await page.waitForSelector(`${selectors.answerBlock}, .progress, .spinner`, { timeout: 30_000 });
  const duration = Date.now() - start;
  console.log(`Web search answer time: ${duration}ms`);
  expect(duration).toBeLessThanOrEqual(10_000);

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫/–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
  const content = await page.locator(selectors.answerBlock).first().innerText();
  expect(/https?:\/\//.test(content) || /–ò—Å—Ç–æ—á–Ω–∏–∫|Source|[[]\d+[]]/i.test(content)).toBeTruthy();

  await page.screenshot({ path: 'playwright-artifacts/03-web-search.png' });
  finalize();
});

// 3) RAG-–ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
test('RAG over uploaded docs', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  await page.goto(BASE);
  await tryLogin(page).catch(() => {});
  const question = '–ò–∑–ª–æ–∂–∏ –∫—Ä–∞—Ç–∫–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —É–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫.';
  await page.fill(selectors.chatInput, question);
  await page.click(selectors.sendButton);

  await page.waitForSelector(selectors.answerBlock, { timeout: 30_000 });
  const answer = await page.locator(selectors.answerBlock).first().innerText();
  expect(/–ò—Å—Ç–æ—á–Ω–∏–∫|–§–∞–π–ª|–î–æ–∫—É–º–µ–Ω—Ç|\.(pdf|docx|md|txt)/i.test(answer)).toBeTruthy();

  await page.screenshot({ path: 'playwright-artifacts/04-doc-rag.png' });
  finalize();
});

// 4) –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RAG (–¥–æ–∫—É–º–µ–Ω—Ç—ã + –≤–µ–±)
test('Combined RAG (docs + web)', async ({ page }) => {
  attachNetworkLogging(page);
  const finalize = await assertNoConsoleErrors(page);

  await page.goto(BASE);
  const question =
    '–°–æ–ø–æ—Å—Ç–∞–≤—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏–∑ –≤–µ–±–∞ –∏ –¥–æ–±–∞–≤—å —Å—Å—ã–ª–∫–∏.';
  await page.fill(selectors.chatInput, question);
  await page.click(selectors.sendButton);

  await page.waitForSelector(selectors.answerBlock, { timeout: 30_000 });
  const answer = await page.locator(selectors.answerBlock).first().innerText();
  expect(/https?:\/\//.test(answer)).toBeTruthy();
  expect(/(–ò—Å—Ç–æ—á–Ω–∏–∫|–§–∞–π–ª|–î–æ–∫—É–º–µ–Ω—Ç)/i.test(answer)).toBeTruthy();

  await page.screenshot({ path: 'playwright-artifacts/05-combined.png' });
  finalize();
});
