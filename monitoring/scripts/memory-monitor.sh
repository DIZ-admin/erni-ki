#!/bin/bash

# Memory Monitor –¥–ª—è ERNI-KI
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ELASTICSEARCH_THRESHOLD=95
LITELLM_THRESHOLD=90
GENERAL_THRESHOLD=85
LOG_FILE="./logs/memory-monitor.log"
WEBHOOK_URL="${WEBHOOK_URL:-}"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
send_alert() {
    local container="$1"
    local usage="$2"
    local threshold="$3"
    local message="üö® CRITICAL: Container $container memory usage: ${usage}% (threshold: ${threshold}%)"

    log "ALERT: $message"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if [[ -n "$WEBHOOK_URL" ]]; then
        curl -s -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{\"text\":\"$message\",\"severity\":\"critical\",\"service\":\"$container\"}" \
            || log "Failed to send webhook notification"
    fi

    # –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    echo "$message" | wall 2>/dev/null || true
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
get_memory_usage() {
    local container="$1"
    docker stats --no-stream --format "{{.MemPerc}}" "$container" 2>/dev/null | sed 's/%//' || echo "0"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container() {
    local container="$1"
    local threshold="$2"

    if ! docker ps --format "{{.Names}}" | grep -q "^${container}$"; then
        log "WARNING: Container $container not found or not running"
        return 1
    fi

    local usage
    usage=$(get_memory_usage "$container")

    if [[ -z "$usage" ]] || [[ "$usage" == "0" ]]; then
        log "WARNING: Could not get memory usage for $container"
        return 1
    fi

    log "Container $container memory usage: ${usage}%"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
    if (( $(echo "$usage > $threshold" | bc -l) )); then
        send_alert "$container" "$usage" "$threshold"
        return 2
    fi

    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_all_containers() {
    local alerts=0

    log "Starting memory monitoring check..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Elasticsearch
    if check_container "erni-ki-elasticsearch" "$ELASTICSEARCH_THRESHOLD"; then
        log "Elasticsearch memory usage OK"
    else
        case $? in
            2) ((alerts++)) ;;
            *) log "Elasticsearch check failed" ;;
        esac
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ LiteLLM
    if check_container "erni-ki-litellm" "$LITELLM_THRESHOLD"; then
        log "LiteLLM memory usage OK"
    else
        case $? in
            2) ((alerts++)) ;;
            *) log "LiteLLM check failed" ;;
        esac
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local containers=("erni-ki-openwebui-1" "erni-ki-ollama-1" "erni-ki-db-1")

    for container in "${containers[@]}"; do
        if check_container "$container" "$GENERAL_THRESHOLD"; then
            log "$container memory usage OK"
        else
            case $? in
                2) ((alerts++)) ;;
                *) log "$container check failed" ;;
            esac
        fi
    done

    log "Memory monitoring check completed. Alerts: $alerts"
    return $alerts
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
get_system_stats() {
    log "=== System Memory Statistics ==="

    # –û–±—â–∞—è –ø–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã
    local total_mem
    total_mem=$(free -h | awk '/^Mem:/ {print $2}')
    local used_mem
    used_mem=$(free -h | awk '/^Mem:/ {print $3}')
    local free_mem
    free_mem=$(free -h | awk '/^Mem:/ {print $4}')

    log "System Memory - Total: $total_mem, Used: $used_mem, Free: $free_mem"

    # –¢–æ–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏
    log "Top 5 containers by memory usage:"
    docker stats --no-stream --format "table {{.Name}}\t{{.MemUsage}}\t{{.MemPerc}}" | head -6 | while read -r line; do
        log "  $line"
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    mkdir -p "$(dirname "$LOG_FILE")"

    log "=== ERNI-KI Memory Monitor Started ==="

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    get_system_stats

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local alert_count=0
    if ! check_all_containers; then
        alert_count=$?
    fi

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    if [[ $alert_count -gt 0 ]]; then
        log "=== CRITICAL: $alert_count memory alerts detected! ==="
        exit 1
    else
        log "=== All containers within memory limits ==="
        exit 0
    fi
}

# –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
