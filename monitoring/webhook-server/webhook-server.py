#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Webhook Server –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ ERNI-KI
–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Alertmanager –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
"""

import os
import sys
import json
import logging
import requests
import smtplib
import time
import hmac
import hashlib
import base64
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from flask import Flask, request, jsonify, abort
from logging.handlers import RotatingFileHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler('/logs/webhook-server.log', maxBytes=10485760, backupCount=5),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('webhook-server')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBHOOK_SECRET = os.environ.get('WEBHOOK_SECRET', 'webhook-secret')
DISCORD_WEBHOOK_URL = os.environ.get('DISCORD_WEBHOOK_URL', '')
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '')
SMTP_SERVER = os.environ.get('SMTP_SERVER', 'localhost')
SMTP_PORT = int(os.environ.get('SMTP_PORT', '25'))
SMTP_USERNAME = os.environ.get('SMTP_USERNAME', '')
SMTP_PASSWORD = os.environ.get('SMTP_PASSWORD', '')
SMTP_FROM = os.environ.get('SMTP_FROM', 'alerts@erni-ki.local')
ADMIN_EMAIL = os.environ.get('ADMIN_EMAIL', 'admin@erni-ki.local')
ENABLE_EMAIL = os.environ.get('ENABLE_EMAIL', 'false').lower() == 'true'
ENABLE_DISCORD = os.environ.get('ENABLE_DISCORD', 'false').lower() == 'true'
ENABLE_TELEGRAM = os.environ.get('ENABLE_TELEGRAM', 'false').lower() == 'true'
ENABLE_SLACK = os.environ.get('ENABLE_SLACK', 'false').lower() == 'true'
SLACK_WEBHOOK_URL = os.environ.get('SLACK_WEBHOOK_URL', '')

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∞–ª–µ—Ä—Ç–æ–≤
COLORS = {
    'critical': 0xFF0000,  # –ö—Ä–∞—Å–Ω—ã–π
    'warning': 0xFFAA00,   # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    'info': 0x00AAFF,      # –°–∏–Ω–∏–π
    'resolved': 0x00FF00,  # –ó–µ–ª–µ–Ω—ã–π
    'default': 0x888888    # –°–µ—Ä—ã–π
}

# –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
ICONS = {
    'infrastructure': 'üèóÔ∏è',
    'security': 'üîí',
    'ai': 'ü§ñ',
    'database': 'üíæ',
    'cache': '‚ö°',
    'proxy': 'üîÑ',
    'network': 'üåê',
    'performance': '‚ö°',
    'default': 'üîî'
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
def verify_auth(auth_header):
    if not auth_header:
        return False
    
    try:
        auth_type, auth_value = auth_header.split(' ', 1)
        if auth_type.lower() != 'bearer':
            return False
        
        return auth_value == WEBHOOK_SECRET
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord
def send_discord_notification(alert_data):
    if not ENABLE_DISCORD or not DISCORD_WEBHOOK_URL:
        logger.info("Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–∞
        alerts = alert_data.get('alerts', [])
        if not alerts:
            logger.warning("–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord")
            return False
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–º–±–µ–¥–æ–≤ –¥–ª—è Discord
        embeds = []
        for alert in alerts:
            status = alert.get('status', 'firing')
            labels = alert.get('labels', {})
            annotations = alert.get('annotations', {})
            
            severity = labels.get('severity', 'default')
            category = labels.get('category', 'default')
            service = labels.get('service', 'unknown')
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏
            color = COLORS.get(severity, COLORS['default'])
            icon = ICONS.get(category, ICONS['default'])
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–∞
            embed = {
                "title": f"{icon} {annotations.get('summary', '–ê–ª–µ—Ä—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}",
                "description": annotations.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                "color": color,
                "fields": [
                    {
                        "name": "–°–µ—Ä–≤–∏—Å",
                        "value": service,
                        "inline": True
                    },
                    {
                        "name": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                        "value": category,
                        "inline": True
                    },
                    {
                        "name": "–í–∞–∂–Ω–æ—Å—Ç—å",
                        "value": severity,
                        "inline": True
                    },
                    {
                        "name": "–°—Ç–∞—Ç—É—Å",
                        "value": "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω" if status == "resolved" else "üî• –ê–∫—Ç–∏–≤–µ–Ω",
                        "inline": True
                    }
                ],
                "timestamp": datetime.utcnow().isoformat()
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if 'instance' in labels:
                embed["fields"].append({
                    "name": "–ò–Ω—Å—Ç–∞–Ω—Å",
                    "value": labels['instance'],
                    "inline": True
                })
                
            if 'job' in labels:
                embed["fields"].append({
                    "name": "Job",
                    "value": labels['job'],
                    "inline": True
                })
            
            embeds.append(embed)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        payload = {
            "username": "ERNI-KI Monitoring",
            "avatar_url": "https://i.imgur.com/4M34hi2.png",
            "content": f"**{len(alerts)}** –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤" if status == "firing" else "–ê–ª–µ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã",
            "embeds": embeds
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = requests.post(
            DISCORD_WEBHOOK_URL,
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 204:
            logger.info(f"Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
def send_telegram_notification(alert_data):
    if not ENABLE_TELEGRAM or not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logger.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–∞
        alerts = alert_data.get('alerts', [])
        if not alerts:
            logger.warning("–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
            return False
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = "*ERNI-KI Monitoring Alert*\n\n"
        
        for alert in alerts:
            status = alert.get('status', 'firing')
            labels = alert.get('labels', {})
            annotations = alert.get('annotations', {})
            
            severity = labels.get('severity', 'default')
            category = labels.get('category', 'default')
            service = labels.get('service', 'unknown')
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
            icon = ICONS.get(category, ICONS['default'])
            status_icon = "‚úÖ" if status == "resolved" else "üî•"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª–µ—Ä—Ç–µ
            message += f"{icon} *{annotations.get('summary', '–ê–ª–µ—Ä—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}*\n"
            message += f"_{annotations.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}_\n\n"
            message += f"*–°–µ—Ä–≤–∏—Å:* {service}\n"
            message += f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            message += f"*–í–∞–∂–Ω–æ—Å—Ç—å:* {severity}\n"
            message += f"*–°—Ç–∞—Ç—É—Å:* {status_icon} {status}\n"
            
            if 'instance' in labels:
                message += f"*–ò–Ω—Å—Ç–∞–Ω—Å:* {labels['instance']}\n"
                
            if 'job' in labels:
                message += f"*Job:* {labels['job']}\n"
                
            message += "\n---\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        
        response = requests.post(url, json=payload)
        
        if response.status_code == 200:
            logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ email
def send_email_notification(alert_data):
    if not ENABLE_EMAIL:
        logger.info("Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return False
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–∞
        alerts = alert_data.get('alerts', [])
        if not alerts:
            logger.warning("–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ email")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipient = ADMIN_EMAIL
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = MIMEMultipart('alternative')
        msg['Subject'] = f"ERNI-KI Alert: {len(alerts)} –Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"
        msg['From'] = SMTP_FROM
        msg['To'] = recipient
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        text_content = "ERNI-KI Monitoring Alert\n\n"
        html_content = """
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; }
                .alert { margin-bottom: 20px; padding: 10px; border-radius: 5px; }
                .critical { background-color: #ffdddd; border-left: 5px solid #ff0000; }
                .warning { background-color: #ffffdd; border-left: 5px solid #ffaa00; }
                .info { background-color: #ddffff; border-left: 5px solid #00aaff; }
                .resolved { background-color: #ddffdd; border-left: 5px solid #00ff00; }
                .default { background-color: #eeeeee; border-left: 5px solid #888888; }
                h2 { margin-top: 0; }
                .details { margin-top: 10px; }
                .label { font-weight: bold; }
            </style>
        </head>
        <body>
            <h1>ERNI-KI Monitoring Alert</h1>
        """
        
        for alert in alerts:
            status = alert.get('status', 'firing')
            labels = alert.get('labels', {})
            annotations = alert.get('annotations', {})
            
            severity = labels.get('severity', 'default')
            category = labels.get('category', 'default')
            service = labels.get('service', 'unknown')
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
            icon = ICONS.get(category, ICONS['default'])
            status_icon = "‚úÖ" if status == "resolved" else "üî•"
            
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            text_content += f"{icon} {annotations.get('summary', '–ê–ª–µ—Ä—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}\n"
            text_content += f"{annotations.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
            text_content += f"–°–µ—Ä–≤–∏—Å: {service}\n"
            text_content += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            text_content += f"–í–∞–∂–Ω–æ—Å—Ç—å: {severity}\n"
            text_content += f"–°—Ç–∞—Ç—É—Å: {status_icon} {status}\n"
            
            if 'instance' in labels:
                text_content += f"–ò–Ω—Å—Ç–∞–Ω—Å: {labels['instance']}\n"
                
            if 'job' in labels:
                text_content += f"Job: {labels['job']}\n"
                
            text_content += "\n---\n\n"
            
            # HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            html_content += f"""
            <div class="alert {severity}">
                <h2>{icon} {annotations.get('summary', '–ê–ª–µ—Ä—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}</h2>
                <p>{annotations.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}</p>
                <div class="details">
                    <p><span class="label">–°–µ—Ä–≤–∏—Å:</span> {service}</p>
                    <p><span class="label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span> {category}</p>
                    <p><span class="label">–í–∞–∂–Ω–æ—Å—Ç—å:</span> {severity}</p>
                    <p><span class="label">–°—Ç–∞—Ç—É—Å:</span> {status_icon} {status}</p>
            """
            
            if 'instance' in labels:
                html_content += f'<p><span class="label">–ò–Ω—Å—Ç–∞–Ω—Å:</span> {labels["instance"]}</p>'
                
            if 'job' in labels:
                html_content += f'<p><span class="label">Job:</span> {labels["job"]}</p>'
                
            html_content += """
                </div>
            </div>
            """
        
        html_content += """
        </body>
        </html>
        """
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        part1 = MIMEText(text_content, 'plain')
        part2 = MIMEText(html_content, 'html')
        msg.attach(part1)
        msg.attach(part2)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ email
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            if SMTP_USERNAME and SMTP_PASSWORD:
                server.starttls()
                server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
            
        logger.info(f"Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {recipient}: {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack
def send_slack_notification(alert_data):
    if not ENABLE_SLACK or not SLACK_WEBHOOK_URL:
        logger.info("Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–∞
        alerts = alert_data.get('alerts', [])
        if not alerts:
            logger.warning("–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack")
            return False
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–ª–æ–∫–æ–≤ –¥–ª—è Slack
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": f"ERNI-KI Monitoring Alert: {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤",
                    "emoji": True
                }
            },
            {
                "type": "divider"
            }
        ]
        
        for alert in alerts:
            status = alert.get('status', 'firing')
            labels = alert.get('labels', {})
            annotations = alert.get('annotations', {})
            
            severity = labels.get('severity', 'default')
            category = labels.get('category', 'default')
            service = labels.get('service', 'unknown')
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
            icon = ICONS.get(category, ICONS['default'])
            status_icon = "‚úÖ" if status == "resolved" else "üî•"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
            blocks.append({
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*{icon} {annotations.get('summary', '–ê–ª–µ—Ä—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')}*\n{annotations.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
                }
            })
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
            fields = [
                {
                    "type": "mrkdwn",
                    "text": f"*–°–µ—Ä–≤–∏—Å:*\n{service}"
                },
                {
                    "type": "mrkdwn",
                    "text": f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:*\n{category}"
                },
                {
                    "type": "mrkdwn",
                    "text": f"*–í–∞–∂–Ω–æ—Å—Ç—å:*\n{severity}"
                },
                {
                    "type": "mrkdwn",
                    "text": f"*–°—Ç–∞—Ç—É—Å:*\n{status_icon} {status}"
                }
            ]
            
            if 'instance' in labels:
                fields.append({
                    "type": "mrkdwn",
                    "text": f"*–ò–Ω—Å—Ç–∞–Ω—Å:*\n{labels['instance']}"
                })
                
            if 'job' in labels:
                fields.append({
                    "type": "mrkdwn",
                    "text": f"*Job:*\n{labels['job']}"
                })
            
            blocks.append({
                "type": "section",
                "fields": fields
            })
            
            blocks.append({
                "type": "divider"
            })
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        payload = {
            "blocks": blocks
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = requests.post(
            SLACK_WEBHOOK_URL,
            json=payload,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            logger.info(f"Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({
        "status": "ok",
        "timestamp": datetime.utcnow().isoformat(),
        "version": "1.0.0"
    })

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç Alertmanager
@app.route('/webhook', methods=['POST'])
def webhook():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_header = request.headers.get('Authorization')
    if not verify_auth(auth_header):
        logger.warning("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ webhook")
        abort(401)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        alert_data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {json.dumps(alert_data)[:200]}...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        discord_result = send_discord_notification(alert_data)
        telegram_result = send_telegram_notification(alert_data)
        email_result = send_email_notification(alert_data)
        slack_result = send_slack_notification(alert_data)
        
        return jsonify({
            "status": "success",
            "timestamp": datetime.utcnow().isoformat(),
            "notifications": {
                "discord": discord_result,
                "telegram": telegram_result,
                "email": email_result,
                "slack": slack_result
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({
            "status": "error",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }), 500

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤ –æ—Ç Fluent Bit
@app.route('/webhook/critical-logs', methods=['POST'])
def critical_logs_webhook():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_header = request.headers.get('Authorization')
    if not verify_auth(auth_header):
        logger.warning("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ webhook –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤")
        abort(401)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        log_data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤: {json.dumps(log_data)[:200]}...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–æ–≥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        alert_data = {
            "alerts": [
                {
                    "status": "firing",
                    "labels": {
                        "severity": "critical",
                        "category": log_data.get("service_category", "unknown"),
                        "service": log_data.get("service", "unknown"),
                        "instance": log_data.get("container_short_id", "unknown")
                    },
                    "annotations": {
                        "summary": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∞—Ö {log_data.get('service', 'unknown')}",
                        "description": log_data.get("log", log_data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                    }
                }
            ]
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        discord_result = send_discord_notification(alert_data)
        telegram_result = send_telegram_notification(alert_data)
        email_result = send_email_notification(alert_data)
        slack_result = send_slack_notification(alert_data)
        
        return jsonify({
            "status": "success",
            "timestamp": datetime.utcnow().isoformat(),
            "notifications": {
                "discord": discord_result,
                "telegram": telegram_result,
                "email": email_result,
                "slack": slack_result
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤: {e}")
        return jsonify({
            "status": "error",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }), 500

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è ERNI-KI")
    app.run(host='0.0.0.0', port=9093)
