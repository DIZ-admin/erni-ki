# ERNI-KI Production-Ready Docker Compose Configuration
# Simplified and optimized for production deployment
# Version: 4.0 - Production Ready

# GPU deployment configuration anchor
x-gpu-deploy: &gpu-deploy
  runtime: nvidia
  environment:
    - NVIDIA_VISIBLE_DEVICES=all
    - NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Standard logging configuration
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,version"

services:
  # Infrastructure Services
  watchtower:
    command: --cleanup --label-enable --http-api-update --http-api-metrics
    env_file: env/watchtower.env
    healthcheck:
      test: ["CMD", "/watchtower", "--health-check"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    image: containrrr/watchtower:latest
    logging: *default-logging
    restart: unless-stopped
    ports:
      - "8091:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "com.centurylinklabs.watchtower.scope=infrastructure"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.2"
        reservations:
          memory: 128M
          cpus: "0.1"

  # Database Services
  db:
    depends_on:
      watchtower:
        condition: service_healthy
    env_file: env/db.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
    image: pgvector/pgvector:pg15
    logging: *default-logging
    restart: unless-stopped
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "com.centurylinklabs.watchtower.monitor-only=true"
      - "com.centurylinklabs.watchtower.scope=critical-database"

  redis:
    depends_on:
      watchtower:
        condition: service_healthy
    env_file: env/redis.env
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 20s
    image: redis/redis-stack:latest
    logging: *default-logging
    restart: unless-stopped
    volumes:
      - ./data/redis:/data
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=cache-services"

  # AI Services
  ollama:
    <<: *gpu-deploy
    depends_on:
      watchtower:
        condition: service_healthy
    env_file: env/ollama.env
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 10s
    image: ollama/ollama:latest
    logging: *default-logging
    ports:
      - 11434:11434
    restart: unless-stopped
    volumes:
      - ./data/ollama:/root/.ollama
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "com.centurylinklabs.watchtower.monitor-only=true"
      - "com.centurylinklabs.watchtower.scope=critical-ai-gpu"

  litellm:
    image: ghcr.io/berriai/litellm:main-stable
    container_name: erni-ki-litellm
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      watchtower:
        condition: service_healthy
    env_file: env/litellm.env
    ports:
      - "4000:4000"
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f litellm || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ./conf/litellm/config-simple.yaml:/app/config.yaml:ro
      - ./data/litellm:/app/data
    command: ["--config", "/app/config.yaml", "--port", "4000", "--host", "0.0.0.0"]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"
    labels:
      - "com.erni-ki.service=litellm"
      - "com.erni-ki.version=main-stable"
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=ai-services"

  # Web Interface
  openwebui:
    <<: *gpu-deploy
    depends_on:
      db:
        condition: service_healthy
      litellm:
        condition: service_healthy
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
      searxng:
        condition: service_healthy
      docling:
        condition: service_healthy
    env_file: env/openwebui.env
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    image: ghcr.io/open-webui/open-webui:latest
    logging: *default-logging
    restart: unless-stopped
    volumes:
      - ./data/openwebui:/app/backend/data
      - ./conf/openwebui:/app/backend/config:ro
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=web-interface"
      - "com.erni-ki.service=openwebui"
      - "com.erni-ki.version=0.6.18"

  # Authentication Services
  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    depends_on:
      watchtower:
        condition: service_healthy
    env_file: env/auth.env
    logging: *default-logging
    ports:
      - "9092:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/main", "--health-check"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=auth-services"

  # Gateway Services
  nginx:
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost/health || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 5
      start_period: 5s
    image: nginx:latest
    logging: *default-logging
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    restart: unless-stopped
    volumes:
      - ./conf/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./conf/nginx/ssl:/etc/nginx/ssl
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
      - "com.centurylinklabs.watchtower.monitor-only=true"
      - "com.centurylinklabs.watchtower.scope=critical-proxy"

  # Search and Processing Services
  searxng:
    depends_on:
      redis:
        condition: service_healthy
      watchtower:
        condition: service_healthy
    env_file: env/searxng.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'wget -q --spider --header="User-Agent: OpenWebUI-HealthCheck/1.0" http://localhost:8080/ || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    image: searxng/searxng:latest
    logging: *default-logging
    restart: unless-stopped
    volumes:
      - ./conf/searxng/settings.yml:/etc/searxng/settings.yml:ro
      - ./conf/searxng/uwsgi.ini:/etc/searxng/uwsgi.ini:ro
      - ./conf/searxng/limiter.toml:/etc/searxng/limiter.toml:ro
      - ./conf/searxng/favicons.toml:/etc/searxng/favicons.toml:ro
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=search-services"

  docling:
    depends_on:
      watchtower:
        condition: service_healthy
    env_file: env/docling.env
    environment:
      DOCLING_SERVE_MAX_SYNC_WAIT: 600
      DOCLING_SERVE_TIMEOUT: 600
      DOCLING_SERVE_REQUEST_TIMEOUT: 600
      DOCLING_SERVE_MAX_WORKERS: 2
      DOCLING_SERVE_ENABLE_UI: true
      DOCLING_OCR_ENGINE: easyocr
      DOCLING_DISABLE_OSD: true
      DOCLING_PIPELINE_OCR_ENABLED: true
      DOCLING_OCR_SKIP_ERRORS: true
      DOCLING_CONTINUE_ON_ERROR: true
      DOCLING_DISABLE_TABLE_DETECTION: false
      DOCLING_DISABLE_IMAGE_PROCESSING: false
      DOCLING_SIMPLE_MODE: true
      DOCLING_FAST_MODE: true
      DOCLING_SERVE_MAX_FILE_SIZE: 104857600
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5001/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    image: quay.io/docling-project/docling-serve:latest
    logging: *default-logging
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=document-processing"

  tika:
    depends_on:
      watchtower:
        condition: service_healthy
    env_file: env/tika.env
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:9998/tika || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    image: apache/tika:latest-full
    logging: *default-logging
    ports:
      - 9998:9998
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=document-processing"

  edgetts:
    depends_on:
      watchtower:
        condition: service_healthy
    env_file: env/edgetts.env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'python3 -c "import socket; s=socket.socket(); s.settimeout(5); s.connect((\"localhost\", 5050)); s.close()" || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    image: travisvn/openai-edge-tts:latest
    logging: *default-logging
    ports:
      - 5050:5050
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=text-to-speech"

  mcposerver:
    command: ["--config", "/app/conf/config-simple.json"]
    depends_on:
      watchtower:
        condition: service_healthy
    env_file: env/mcposerver.env
    healthcheck:
      test: ["CMD-SHELL", "test -f /proc/1/cmdline"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    image: ghcr.io/open-webui/mcpo:latest
    logging: *default-logging
    ports:
      - "8000:8000"
    restart: unless-stopped
    volumes:
      - ./conf/mcposerver:/app/conf:ro
      - ./data:/app/data
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=ai-services"

  # Tunnel Services
  cloudflared:
    command: tunnel --no-autoupdate run
    depends_on:
      watchtower:
        condition: service_healthy
      nginx:
        condition: service_healthy
    env_file: env/cloudflared.env
    healthcheck:
      disable: true
    image: cloudflare/cloudflared:latest
    logging: *default-logging
    restart: unless-stopped
    volumes:
      - ./conf/cloudflare/config:/home/nonroot/.cloudflared
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=tunnel-services"

  # Backup Services
  backrest:
    depends_on:
      - db
      - redis
    env_file: env/backrest.env
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9898/ >/dev/null || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    image: garethgeorge/backrest:latest
    logging: *default-logging
    ports:
      - "9898:9898"
    restart: unless-stopped
    volumes:
      - ./data/backrest:/data
      - ./conf/backrest:/config
      - ./cache/backrest:/cache
      - ./tmp/backrest:/tmp
      - ./data:/backup-sources/data:ro
      - ./conf:/backup-sources/conf:ro
      - ./env:/backup-sources/env:ro
      - ./.config-backup:/backup-sources/.config-backup
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=backup-services"

  # Monitoring Services
  prometheus:
    depends_on:
      watchtower:
        condition: service_healthy
    image: prom/prometheus:v2.48.0
    container_name: erni-ki-prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--storage.tsdb.retention.size=10GB"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
      - "--web.external-url=http://prometheus.erni-ki.local"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - ./data/prometheus:/prometheus
    ports:
      - "9091:9090"
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=monitoring-stack"

  grafana:
    depends_on:
      watchtower:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    image: grafana/grafana:10.2.0
    container_name: erni-ki-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://grafana.erni-ki.local
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=monitoring-stack"

  alertmanager:
    depends_on:
      watchtower:
        condition: service_healthy
    image: prom/alertmanager:v0.26.0
    container_name: erni-ki-alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--web.external-url=http://alertmanager.erni-ki.local"
      - "--cluster.listen-address=0.0.0.0:9094"
    volumes:
      - ./monitoring/alertmanager/alertmanager-simple.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./data/alertmanager:/alertmanager
    ports:
      - "9093:9093"
      - "9094:9094"
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:9093/-/healthy || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=monitoring-stack"

  # Exporters
  node-exporter:
    depends_on:
      watchtower:
        condition: service_healthy
    image: prom/node-exporter:v1.7.0
    container_name: erni-ki-node-exporter
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
      - "--collector.systemd"
      - "--collector.processes"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /run/systemd/private:/run/systemd/private:ro
    ports:
      - "9101:9100"
    pid: host
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:9100/metrics || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=monitoring-stack"

  postgres-exporter:
    depends_on:
      watchtower:
        condition: service_healthy
      db:
        condition: service_healthy
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: erni-ki-postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:aEnbxS4MrXqzurHNGxkcEgCBm@db:5432/openwebui?sslmode=disable
      - PG_EXPORTER_DISABLE_DEFAULT_METRICS=false
      - PG_EXPORTER_DISABLE_SETTINGS_METRICS=true
      - PG_EXPORTER_AUTO_DISCOVER_DATABASES=true
      - PG_EXPORTER_EXCLUDE_DATABASES=template0,template1,postgres
    volumes:
      - ./conf/postgres-exporter/postgres_exporter.yml:/postgres_exporter.yml:ro
    ports:
      - "9187:9187"
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:9187/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=monitoring-stack"

  redis-exporter:
    depends_on:
      watchtower:
        condition: service_healthy
      redis:
        condition: service_healthy
    image: oliver006/redis_exporter:v1.55.0
    container_name: erni-ki-redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_EXPORTER_INCL_SYSTEM_METRICS=true
    ports:
      - "9121:9121"
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      disable: true
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=monitoring-stack"

  nvidia-exporter:
    depends_on:
      watchtower:
        condition: service_healthy
    image: mindprince/nvidia_gpu_prometheus_exporter:0.1
    container_name: erni-ki-nvidia-exporter
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "9445:9445"
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f nvidia_gpu_prometheus_exporter > /dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=monitoring-stack"

  blackbox-exporter:
    depends_on:
      watchtower:
        condition: service_healthy
    image: prom/blackbox-exporter:v0.24.0
    container_name: erni-ki-blackbox-exporter
    volumes:
      - ./monitoring/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    ports:
      - "9115:9115"
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:9115/-/healthy || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=monitoring-stack"

  cadvisor:
    depends_on:
      watchtower:
        condition: service_healthy
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: erni-ki-cadvisor
    command:
      - "--housekeeping_interval=10s"
      - "--max_housekeeping_interval=15s"
      - "--docker_only=true"
      - "--disable_metrics=disk,network,tcp,udp,percpu,sched,process"
      - "--store_container_labels=false"
      - "--whitelisted_container_labels=io.kubernetes.container.name,io.kubernetes.pod.name"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
    ports:
      - "8081:8080"
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:8080/healthz || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=monitoring-stack"

  # Webhook Receiver - обработка алертов от Alertmanager
  webhook-receiver:
    depends_on:
      watchtower:
        condition: service_healthy
    build:
      context: ./monitoring/webhook-receiver
      dockerfile: Dockerfile
    container_name: erni-ki-webhook-receiver
    environment:
      - WEBHOOK_PORT=9093
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
    volumes:
      - ./monitoring/logs/webhook:/app/logs
      - ./monitoring/webhook-receiver/scripts:/app/scripts:ro
    ports:
      - "9095:9093"
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9093/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.2"
        reservations:
          memory: 128M
          cpus: "0.1"
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "com.centurylinklabs.watchtower.scope=monitoring-stack"

# Standard Docker network configuration
networks:
  default:
    name: erni-ki-network
    driver: bridge
