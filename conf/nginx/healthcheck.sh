#!/bin/bash
# Nginx Enhanced Healthcheck Script
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ HTTP —Å—Ç–∞—Ç—É—Å, –Ω–æ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ upstream —Å–µ—Ä–≤–µ—Ä–∞–º
# –ê–≤—Ç–æ—Ä: ERNI-KI System
# –î–∞—Ç–∞: 2025-09-22

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NGINX_PORT=80
NGINX_SSL_PORT=443
NGINX_API_PORT=8080
TIMEOUT=5
MAX_RETRIES=2

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] HEALTHCHECK:${NC} $1"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] HEALTHCHECK ERROR:${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] HEALTHCHECK WARNING:${NC} $1" >&2
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å—Ç–∞—Ç—É—Å–∞
check_http_status() {
    local url=$1
    local expected_code=${2:-200}
    local description=$3

    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ $description: $url"

    local http_code
    http_code=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout $TIMEOUT --max-time $TIMEOUT "$url" 2>/dev/null || echo "000")

    if [[ "$http_code" == "$expected_code" ]]; then
        log "‚úÖ $description: HTTP $http_code"
        return 0
    else
        error "‚ùå $description: HTTP $http_code (–æ–∂–∏–¥–∞–ª—Å—è $expected_code)"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
check_tcp_connection() {
    local host=$1
    local port=$2
    local description=$3

    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $description ($host:$port)"

    if timeout $TIMEOUT bash -c "echo >/dev/tcp/$host/$port" 2>/dev/null; then
        log "‚úÖ $description: TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        error "‚ùå $description: TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DNS —Ä–µ–∑–æ–ª—é—Ü–∏–∏
check_dns_resolution() {
    local hostname=$1
    local description=$2

    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–µ–∑–æ–ª—é—Ü–∏–∏: $description ($hostname)"

    local ip
    ip=$(getent hosts "$hostname" 2>/dev/null | awk '{print $1}' | head -1)

    if [[ -n "$ip" && "$ip" != "127.0.0.1" ]]; then
        log "‚úÖ $description: DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ ($hostname -> $ip)"
        return 0
    else
        error "‚ùå $description: DNS —Ä–µ–∑–æ–ª—é—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ upstream —Å–µ—Ä–≤–µ—Ä–∞
check_upstream_server() {
    local hostname=$1
    local port=$2
    local service_name=$3
    local retry_count=0

    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ upstream —Å–µ—Ä–≤–µ—Ä–∞: $service_name"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–µ–∑–æ–ª—é—Ü–∏–∏
    if ! check_dns_resolution "$hostname" "$service_name DNS"; then
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    while [[ $retry_count -lt $MAX_RETRIES ]]; do
        if check_tcp_connection "$hostname" "$port" "$service_name TCP"; then
            return 0
        fi

        retry_count=$((retry_count + 1))
        if [[ $retry_count -lt $MAX_RETRIES ]]; then
            warning "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ $retry_count/$MAX_RETRIES –¥–ª—è $service_name"
            sleep 1
        fi
    done

    error "‚ùå $service_name: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å"
    return 1
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
main() {
    log "üîç –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è nginx"

    local failed_checks=0

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ nginx
    log "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ nginx"

    if ! check_http_status "http://localhost:$NGINX_PORT/nginx_status" 200 "Nginx Status Page"; then
        ((failed_checks++))
    fi

    if ! check_http_status "http://localhost:$NGINX_API_PORT/health" 200 "Nginx API Health"; then
        ((failed_checks++))
    fi

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö upstream —Å–µ—Ä–≤–µ—Ä–æ–≤
    log "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ upstream —Å–µ—Ä–≤–µ—Ä–æ–≤"

    # OpenWebUI - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å
    if ! check_upstream_server "openwebui" 8080 "OpenWebUI"; then
        ((failed_checks++))
    fi

    # SearXNG - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–ª—è RAG
    if ! check_upstream_server "searxng" 8080 "SearXNG"; then
        ((failed_checks++))
    fi

    # Ollama - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π AI —Å–µ—Ä–≤–∏—Å
    if ! check_upstream_server "ollama" 11434 "Ollama"; then
        ((failed_checks++))
    fi

    # PostgreSQL - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    if ! check_upstream_server "db" 5432 "PostgreSQL"; then
        ((failed_checks++))
    fi

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ proxy
    log "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ proxy"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫ OpenWebUI
    if ! check_http_status "http://localhost:$NGINX_API_PORT/" 200 "OpenWebUI Proxy"; then
        ((failed_checks++))
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫ SearXNG
    if ! check_http_status "http://localhost:$NGINX_API_PORT/searxng/" 200 "SearXNG Proxy"; then
        ((failed_checks++))
    fi

    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    if [[ $failed_checks -eq 0 ]]; then
        log "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! Nginx –∑–¥–æ—Ä–æ–≤."
        exit 0
    elif [[ $failed_checks -le 2 ]]; then
        warning "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã ($failed_checks), –Ω–æ nginx —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω"
        exit 0
    else
        error "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ($failed_checks). –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx."
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
