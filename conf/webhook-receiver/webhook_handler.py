#!/usr/bin/env python3
"""
ERNI-KI Webhook Receiver –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Alertmanager –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
"""

import json
import logging
import os
import requests
from datetime import datetime
from flask import Flask, request, jsonify
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DISCORD_WEBHOOK_URL = os.getenv('DISCORD_WEBHOOK_URL', '')
SLACK_WEBHOOK_URL = os.getenv('SLACK_WEBHOOK_URL', '')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')

class AlertProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        self.severity_colors = {
            'critical': 0xFF0000,  # –ö—Ä–∞—Å–Ω—ã–π
            'warning': 0xFFA500,   # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'info': 0x0099FF       # –°–∏–Ω–∏–π
        }

        self.severity_emojis = {
            'critical': 'üö®',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        }

    def process_alerts(self, alerts_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            alerts = alerts_data.get('alerts', [])
            group_labels = alerts_data.get('groupLabels', {})

            logger.info(f"Processing {len(alerts)} alerts")

            results = {
                'processed': 0,
                'errors': [],
                'notifications_sent': []
            }

            for alert in alerts:
                try:
                    self._process_single_alert(alert, group_labels)
                    results['processed'] += 1
                except Exception as e:
                    logger.error(f"Error processing alert: {e}")
                    results['errors'].append(str(e))

            return results

        except Exception as e:
            logger.error(f"Error processing alerts: {e}")
            return {'error': str(e)}

    def _process_single_alert(self, alert: Dict[str, Any], group_labels: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        labels = alert.get('labels', {})
        annotations = alert.get('annotations', {})
        status = alert.get('status', 'unknown')

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity = labels.get('severity', 'info')
        service = labels.get('service', 'unknown')
        category = labels.get('category', 'general')

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            'alert_name': labels.get('alertname', 'Unknown Alert'),
            'severity': severity,
            'service': service,
            'category': category,
            'status': status,
            'summary': annotations.get('summary', 'No summary available'),
            'description': annotations.get('description', 'No description available'),
            'instance': labels.get('instance', 'unknown'),
            'timestamp': datetime.now().isoformat(),
            'group_labels': group_labels
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if DISCORD_WEBHOOK_URL:
            self._send_discord_notification(message_data)

        if SLACK_WEBHOOK_URL:
            self._send_slack_notification(message_data)

        if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
            self._send_telegram_notification(message_data)

    def _send_discord_notification(self, message_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord"""
        try:
            severity = message_data['severity']
            emoji = self.severity_emojis.get(severity, '‚ÑπÔ∏è')
            color = self.severity_colors.get(severity, 0x0099FF)

            embed = {
                "title": f"{emoji} {message_data['alert_name']}",
                "description": message_data['summary'],
                "color": color,
                "fields": [
                    {
                        "name": "üîß Service / –°–µ—Ä–≤–∏—Å",
                        "value": message_data['service'],
                        "inline": True
                    },
                    {
                        "name": "üìä Category / –ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                        "value": message_data['category'],
                        "inline": True
                    },
                    {
                        "name": "üéØ Instance / –≠–∫–∑–µ–º–ø–ª—è—Ä",
                        "value": message_data['instance'],
                        "inline": True
                    },
                    {
                        "name": "üìù Description / –û–ø–∏—Å–∞–Ω–∏–µ",
                        "value": message_data['description'],
                        "inline": False
                    }
                ],
                "timestamp": message_data['timestamp'],
                "footer": {
                    "text": f"ERNI-KI Monitoring ‚Ä¢ Status: {message_data['status']}"
                }
            }

            payload = {
                "embeds": [embed],
                "username": "ERNI-KI Monitor"
            }

            response = requests.post(DISCORD_WEBHOOK_URL, json=payload, timeout=10)
            response.raise_for_status()

            logger.info(f"Discord notification sent for {message_data['alert_name']}")

        except Exception as e:
            logger.error(f"Failed to send Discord notification: {e}")

    def _send_slack_notification(self, message_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack"""
        try:
            severity = message_data['severity']
            emoji = self.severity_emojis.get(severity, '‚ÑπÔ∏è')

            color_map = {
                'critical': 'danger',
                'warning': 'warning',
                'info': 'good'
            }
            color = color_map.get(severity, 'good')

            attachment = {
                "color": color,
                "title": f"{emoji} {message_data['alert_name']}",
                "text": message_data['summary'],
                "fields": [
                    {
                        "title": "Service",
                        "value": message_data['service'],
                        "short": True
                    },
                    {
                        "title": "Instance",
                        "value": message_data['instance'],
                        "short": True
                    },
                    {
                        "title": "Description",
                        "value": message_data['description'],
                        "short": False
                    }
                ],
                "footer": "ERNI-KI Monitoring",
                "ts": int(datetime.now().timestamp())
            }

            payload = {
                "attachments": [attachment],
                "username": "ERNI-KI Monitor"
            }

            response = requests.post(SLACK_WEBHOOK_URL, json=payload, timeout=10)
            response.raise_for_status()

            logger.info(f"Slack notification sent for {message_data['alert_name']}")

        except Exception as e:
            logger.error(f"Failed to send Slack notification: {e}")

    def _send_telegram_notification(self, message_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        try:
            severity = message_data['severity']
            emoji = self.severity_emojis.get(severity, '‚ÑπÔ∏è')

            text = f"""
{emoji} *{message_data['alert_name']}*

üìù *Summary:* {message_data['summary']}
üîß *Service:* {message_data['service']}
üìä *Category:* {message_data['category']}
üéØ *Instance:* {message_data['instance']}
‚è∞ *Time:* {message_data['timestamp']}

üìÑ *Description:*
{message_data['description']}

üîó *Status:* {message_data['status']}
            """.strip()

            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            payload = {
                "chat_id": TELEGRAM_CHAT_ID,
                "text": text,
                "parse_mode": "Markdown"
            }

            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()

            logger.info(f"Telegram notification sent for {message_data['alert_name']}")

        except Exception as e:
            logger.error(f"Failed to send Telegram notification: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤
alert_processor = AlertProcessor()

@app.route('/webhook/critical', methods=['POST'])
def handle_critical_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400

        logger.info("Received critical alert webhook")
        result = alert_processor.process_alerts(data)

        return jsonify({
            'status': 'success',
            'message': 'Critical alerts processed',
            'result': result
        })

    except Exception as e:
        logger.error(f"Error handling critical webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/webhook/warning', methods=['POST'])
def handle_warning_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400

        logger.info("Received warning alert webhook")
        result = alert_processor.process_alerts(data)

        return jsonify({
            'status': 'success',
            'message': 'Warning alerts processed',
            'result': result
        })

    except Exception as e:
        logger.error(f"Error handling warning webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'erni-ki-webhook-receiver',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    logger.info("Starting ERNI-KI Webhook Receiver")
    app.run(host='0.0.0.0', port=9093, debug=False)
