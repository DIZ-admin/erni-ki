#!/usr/bin/env python3
"""
ERNI-KI Webhook Receiver
–ü—Ä–æ—Å—Ç–æ–π webhook receiver –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç Alertmanager
"""

import json
import logging
import os
from datetime import datetime
from flask import Flask, request, jsonify
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('webhook-receiver')

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEBHOOK_PORT = int(os.getenv('WEBHOOK_PORT', 9093))
LOG_DIR = Path('/app/logs')
LOG_DIR.mkdir(exist_ok=True)

def save_alert_to_file(alert_data, alert_type='general'):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–ª–µ—Ä—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = LOG_DIR / f'alert_{alert_type}_{timestamp}.json'
    
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(alert_data, f, indent=2, ensure_ascii=False)
        logger.info(f"Alert saved to {filename}")
    except Exception as e:
        logger.error(f"Failed to save alert to file: {e}")

def process_alert(alert_data, alert_type='general'):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–ª–µ—Ä—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        alerts = alert_data.get('alerts', [])
        
        for alert in alerts:
            labels = alert.get('labels', {})
            annotations = alert.get('annotations', {})
            status = alert.get('status', 'unknown')
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
            logger.info(f"Processing {alert_type} alert:")
            logger.info(f"  Status: {status}")
            logger.info(f"  Alert: {labels.get('alertname', 'Unknown')}")
            logger.info(f"  Service: {labels.get('service', 'Unknown')}")
            logger.info(f"  Severity: {labels.get('severity', 'Unknown')}")
            logger.info(f"  Summary: {annotations.get('summary', 'No summary')}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
            if alert_type == 'critical' or labels.get('severity') == 'critical':
                handle_critical_alert(alert)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è GPU –∞–ª–µ—Ä—Ç–æ–≤
            if alert_type == 'gpu' or labels.get('service') == 'gpu':
                handle_gpu_alert(alert)
                
    except Exception as e:
        logger.error(f"Error processing alert: {e}")

def handle_critical_alert(alert):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    labels = alert.get('labels', {})
    service = labels.get('service', 'unknown')
    
    logger.critical(f"üö® CRITICAL ALERT for service: {service}")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    # - –û—Ç–ø—Ä–∞–≤–∫–∞ SMS/email
    # - –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    # - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack/Teams
    
    # –ü—Ä–∏–º–µ—Ä: –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    if service in ['ollama', 'openwebui', 'searxng']:
        logger.info(f"Triggering recovery script for {service}")
        # os.system(f"/app/scripts/recover_{service}.sh")

def handle_gpu_alert(alert):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ GPU –∞–ª–µ—Ä—Ç–æ–≤"""
    labels = alert.get('labels', {})
    gpu_id = labels.get('gpu_id', 'unknown')
    component = labels.get('component', 'unknown')
    
    logger.warning(f"üéÆ GPU Alert - GPU {gpu_id}, Component: {component}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è GPU —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if component == 'nvidia' and 'temperature' in labels.get('alertname', '').lower():
        logger.warning("GPU temperature alert - consider reducing workload")

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'webhook-receiver',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/webhook', methods=['POST'])
def webhook_general():
    """–û–±—â–∏–π webhook endpoint"""
    try:
        alert_data = request.get_json()
        if not alert_data:
            return jsonify({'error': 'No JSON data received'}), 400
            
        save_alert_to_file(alert_data, 'general')
        process_alert(alert_data, 'general')
        
        return jsonify({'status': 'success', 'message': 'Alert processed'})
        
    except Exception as e:
        logger.error(f"Error in general webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/webhook/critical', methods=['POST'])
def webhook_critical():
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã"""
    try:
        alert_data = request.get_json()
        if not alert_data:
            return jsonify({'error': 'No JSON data received'}), 400
            
        save_alert_to_file(alert_data, 'critical')
        process_alert(alert_data, 'critical')
        
        return jsonify({'status': 'success', 'message': 'Critical alert processed'})
        
    except Exception as e:
        logger.error(f"Error in critical webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/webhook/warning', methods=['POST'])
def webhook_warning():
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    try:
        alert_data = request.get_json()
        if not alert_data:
            return jsonify({'error': 'No JSON data received'}), 400
            
        save_alert_to_file(alert_data, 'warning')
        process_alert(alert_data, 'warning')
        
        return jsonify({'status': 'success', 'message': 'Warning alert processed'})
        
    except Exception as e:
        logger.error(f"Error in warning webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/webhook/gpu', methods=['POST'])
def webhook_gpu():
    """GPU –∞–ª–µ—Ä—Ç—ã"""
    try:
        alert_data = request.get_json()
        if not alert_data:
            return jsonify({'error': 'No JSON data received'}), 400
            
        save_alert_to_file(alert_data, 'gpu')
        process_alert(alert_data, 'gpu')
        
        return jsonify({'status': 'success', 'message': 'GPU alert processed'})
        
    except Exception as e:
        logger.error(f"Error in GPU webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/webhook/ai', methods=['POST'])
def webhook_ai():
    """AI —Å–µ—Ä–≤–∏—Å—ã –∞–ª–µ—Ä—Ç—ã"""
    try:
        alert_data = request.get_json()
        if not alert_data:
            return jsonify({'error': 'No JSON data received'}), 400
            
        save_alert_to_file(alert_data, 'ai')
        process_alert(alert_data, 'ai')
        
        return jsonify({'status': 'success', 'message': 'AI alert processed'})
        
    except Exception as e:
        logger.error(f"Error in AI webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/webhook/database', methods=['POST'])
def webhook_database():
    """–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç—ã"""
    try:
        alert_data = request.get_json()
        if not alert_data:
            return jsonify({'error': 'No JSON data received'}), 400
            
        save_alert_to_file(alert_data, 'database')
        process_alert(alert_data, 'database')
        
        return jsonify({'status': 'success', 'message': 'Database alert processed'})
        
    except Exception as e:
        logger.error(f"Error in database webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/alerts', methods=['GET'])
def list_alerts():
    """–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        alert_files = sorted(LOG_DIR.glob('alert_*.json'), reverse=True)[:20]
        alerts = []
        
        for alert_file in alert_files:
            try:
                with open(alert_file, 'r', encoding='utf-8') as f:
                    alert_data = json.load(f)
                    alerts.append({
                        'filename': alert_file.name,
                        'timestamp': alert_file.stat().st_mtime,
                        'alerts_count': len(alert_data.get('alerts', []))
                    })
            except Exception as e:
                logger.error(f"Error reading alert file {alert_file}: {e}")
                
        return jsonify({'alerts': alerts})
        
    except Exception as e:
        logger.error(f"Error listing alerts: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    logger.info(f"Starting ERNI-KI Webhook Receiver on port {WEBHOOK_PORT}")
    app.run(host='0.0.0.0', port=WEBHOOK_PORT, debug=False)
